#!/usr/bin/env zsh

# -----------------------------------------------------
# Helper Functions
# -----------------------------------------------------
has_command() { command -v "$1" >/dev/null; }

# -----------------------------------------------------
# Homebrew Setup
# -----------------------------------------------------
if (( ! ${+commands[brew]} )); then
    echo "Homebrew not found. Please install from https://brew.sh"
    return 1
fi

# Load Homebrew environment
eval "$(/opt/homebrew/bin/brew shellenv)"

# -----------------------------------------------------
# Environment Variables
# -----------------------------------------------------
# Extended PATH configuration
typeset -U path
path=(
    $HOMEBREW_PREFIX/{bin,sbin}
    $HOME/.local/{bin,sbin}
    $path
)

# Add language-specific paths if they exist
[[ -d "$HOME/.bun/bin" ]] && path+=("$HOME/.bun/bin")
[[ -d "$HOME/.cargo/bin" ]] && path+=("$HOME/.cargo/bin")
[[ -d "$HOME/go/bin" ]] && path+=("$HOME/go/bin")

# Tool-specific settings
export MANPAGER="sh -c 'col -bx | bat --language=man --plain'"
export LESS='--RAW-CONTROL-CHARS --quit-if-one-screen --no-init'
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_ENV_HINTS=1
export HOMEBREW_BAT=1

# -----------------------------------------------------
# History Configuration
# -----------------------------------------------------
HISTFILE="${XDG_DATA_HOME}/zsh/history"
HISTSIZE=1000000
SAVEHIST=1000000

setopt EXTENDED_HISTORY        # Save timestamp and duration
setopt SHARE_HISTORY          # Share history between sessions
setopt HIST_EXPIRE_DUPS_FIRST # Expire duplicates first
setopt HIST_IGNORE_DUPS       # Ignore duplicate entries
setopt HIST_FIND_NO_DUPS      # Don't show duplicates in search
setopt HIST_REDUCE_BLANKS     # Remove superfluous blanks
setopt HIST_VERIFY           # Verify history expansion

# -----------------------------------------------------
# Directory Options
# -----------------------------------------------------
setopt AUTO_CD              # Change directories without cd
setopt AUTO_PUSHD          # Push directories to stack
setopt PUSHD_IGNORE_DUPS   # Don't push duplicates
setopt PUSHD_SILENT        # Quiet directory stacking
setopt EXTENDED_GLOB       # Extended globbing

# -----------------------------------------------------
# Completion System
# -----------------------------------------------------
# Initialize completion system
autoload -Uz compinit && compinit -d "${XDG_CACHE_HOME}/zsh/zcompdump"

# Add Homebrew completions to fpath
fpath=(
    $HOMEBREW_PREFIX/share/zsh/site-functions
    $HOMEBREW_PREFIX/share/zsh-completions
    $fpath
)

# Completion styling
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# -----------------------------------------------------
# Key Bindings
# -----------------------------------------------------
bindkey -v  # Vi mode
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word
bindkey '^H' backward-kill-word
bindkey '^[[3;5~' kill-word

# -----------------------------------------------------
# Aliases
# -----------------------------------------------------
# Modern CLI replacements
has_command bat && alias cat='bat --paging=never'
has_command eza && {
    alias ls='eza --icons --group-directories-first'
    alias ll='eza -l --git --icons --group-directories-first'
    alias la='eza -la --git --icons --group-directories-first'
    alias lt='eza --tree --icons --group-directories-first'
}
has_command rg && alias grep='rg'
has_command fd && alias find='fd'
has_command zoxide && alias cd='z'

# Git shortcuts
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
has_command lazygit && alias lg='lazygit'

# Navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias -- -='cd -'

# Package management
alias brewup='brew update && brew upgrade && brew cleanup'

# Editor
alias v='nvim'
alias vc='nvim ~/.config/nvim/'

# -----------------------------------------------------
# Tool Initialization (Early)
# -----------------------------------------------------
# Initialize starship first for prompt
if [[ -x "$(command -v starship)" ]]; then
    eval "$(starship init zsh)"
else
    echo "Warning: starship not found. Please install with 'brew install starship'"
fi

# Other tool initializations
eval "$(zoxide init zsh)"
eval "$(atuin init zsh)"
eval "$(direnv hook zsh)"

# -----------------------------------------------------
# Plugin System
# -----------------------------------------------------
# Load plugins if they exist
local plugins=(
    "/opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    "/opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
    "/opt/homebrew/share/zsh-abbr/zsh-abbr.zsh"
)

for plugin in $plugins; do
    [[ -f $plugin ]] && source $plugin
done

# -----------------------------------------------------
# Load Custom Functions
# -----------------------------------------------------
[[ -f "${ZDOTDIR}/functions.zsh" ]] && source "${ZDOTDIR}/functions.zsh"

# -----------------------------------------------------
# Local Configuration
# -----------------------------------------------------
# Load local overrides if they exist
[[ -f "${ZDOTDIR}/local.zsh" ]] && source "${ZDOTDIR}/local.zsh"
