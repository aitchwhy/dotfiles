# -----------------------------------------------------
# In (~/.zprofile), command below is run for zsh completions + etc
#
# eval "$(/opt/homebrew/bin/brew shellenv)"
#
# This sets up zsh shell with homebrew (e.g. set env-vars available set by homebrew)
# - HOMEBREW_PREFIX
# - HOMEBREW_CELLAR
# - HOMEBREW_REPOSITORY
# -----------------------------------------------------

#------------------------------------------------------------------------------
# Homebrew Initialization
#------------------------------------------------------------------------------
if ! command -v brew >/dev/null; then
    echo "Homebrew not found. Please install from https://brew.sh"
    return 1
fi

local brew_prefix=${HOMEBREW_PREFIX:-$(brew --prefix 2>/dev/null)}

eval "$($HOMEBREW_PREFIX/bin/brew shellenv)"

#------------------------------------------------------------------------------
# Early Performance Settings
#------------------------------------------------------------------------------
skip_global_compinit=1

# Performance settings for Homebrew
export HOMEBREW_NO_ENV_HINTS=1
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_AUTO_UPDATE=1
export HOMEBREW_BAT=1
export HOMEBREW_CURL_RETRIES=2
export HOMEBREW_NO_INSTALL_FROM_API=1
export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1

# Set Zsh options early
setopt extended_glob
setopt HIST_REDUCE_BLANKS
setopt SHARE_HISTORY
setopt HIST_SAVE_NO_DUPS
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_VERIFY
setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt EXTENDED_GLOB

# #------------------------------------------------------------------------------
# # Local Configuration
# #------------------------------------------------------------------------------
# [[ -f ~/.zshenv.local ]] && source ~/.zshenv.local

# #------------------------------------------------------------------------------
# # Environment Variables and XDG Base Directory
# #------------------------------------------------------------------------------
# export LANG='en_US.UTF-8'
# export LC_ALL='en_US.UTF-8'

# export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
# export XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
# export XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
# export ZDOTDIR=${ZDOTDIR:-$XDG_CONFIG_HOME/zsh}

#------------------------------------------------------------------------------
# Editor and Pager Configuration
#------------------------------------------------------------------------------
export EDITOR='nvim'
export VISUAL='nvim'
export SUDO_EDITOR='nvim'
# export PATH="/opt/homebrew/bin:$PATH"

# # Configure less and bat
# export LESS='-R -i'
# export LESSCHARSET=utf-8
# export PAGER='bat --pager=always'
# export MANPAGER="sh -c 'col -bx | bat --paging=always --language=man'"

#------------------------------------------------------------------------------
# History Configuration
#------------------------------------------------------------------------------
HISTFILE="$HOME/.zsh_history"
HISTSIZE=100000
SAVEHIST=100000

#------------------------------------------------------------------------------
# Homebrew and Path Configuration
#------------------------------------------------------------------------------
# # Set HOMEBREW_PREFIX based on architecture
# if [[ "$(uname -m)" == "arm64" ]]; then
#     export HOMEBREW_PREFIX="/opt/homebrew"
# else
#     export HOMEBREW_PREFIX="/usr/local"
# fi

# Tool-specific paths
# export BUN_INSTALL="$HOME/.bun"

# Initialize path arrays without duplicates
typeset -gU path fpath

# Set path with priorities
path=(
    # Homebrew paths (highest priority)
    $HOMEBREW_PREFIX/{bin,sbin}(N)
    
    # System paths
    /usr/local/{bin,sbin}(N)
    $HOME/.local/{bin,sbin}(N)
    $HOME/{bin,sbin}(N)
    
    # # Language/tool-specific paths
    # $BUN_INSTALL/bin(N)
    # $HOME/.cargo/bin(N)
    # $HOME/.deno/bin(N)
    # $HOME/go/bin(N)
    
    # # App-specific paths
    # $HOME/.cache/lm-studio/bin(N)
    
    # Existing paths
    $path
)

#------------------------------------------------------------------------------
# Plugin Configuration
#------------------------------------------------------------------------------
local plugins=(
    zsh-syntax-highlighting
    zsh-autosuggestions
    # zsh-autopair
    # zsh-history-substring-search
)

for plugin in $plugins; do
    plugin_path="$brew_prefix/share/$plugin/$plugin.zsh"
    [[ -f $plugin_path ]] && source $plugin_path
done
unset plugins plugin plugin_path

#------------------------------------------------------------------------------
# Tool Configuration
#------------------------------------------------------------------------------
# FZF configuration
export FZF_DEFAULT_COMMAND="rg --files --hidden --follow --glob '!.git/*'"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="--preview 'bat --style=numbers --color=always --line-range=:500 {}'"

#------------------------------------------------------------------------------
# TODO: Completion System
#------------------------------------------------------------------------------
# fpath=(
#     $HOMEBREW_PREFIX/share/zsh/site-functions
#     $HOMEBREW_PREFIX/share/zsh-completions
#     $fpath
# )

# autoload -Uz compinit
# compinit

#------------------------------------------------------------------------------
# Development Tools Initialization
#------------------------------------------------------------------------------
# # Node.js version manager (fnm)
# eval "$(fnm env --use-on-cd --version-file-strategy recursive --shell zsh)"

# # Bun JavaScript runtime
# [ -s "$BUN_INSTALL/_bun" ] && source "$BUN_INSTALL/_bun"

# # Python uv tool
# eval "$(uv generate-shell-completion zsh)"

# TODO: atuin shell completions
# TODO: brew shell completions
# TODO: zoxide shell completions
# TODO: starship completion


#------------------------------------------------------------------------------
# Shell Enhancements
#------------------------------------------------------------------------------
# Initialize enhanced tools
# eval "$(zoxide init zsh)"
# eval "$(atuin init zsh)"
# eval "$(temporal completion zsh)"
# eval "$(starship init zsh)"



# -----------------------------------------------------
# Prompt customization (example with Starship, optional)
# https://starship.rs/
# -----------------------------------------------------
if command -v starship >/dev/null 2>&1; then
 eval "$(starship init zsh)"
fi

if command -v atuin >/dev/null 2>&1; then
  eval "$(atuin init zsh)"
fi

# -----------------------------------------------------
# Zsh plugins (modify based on your chosen framework)
# -----------------------------------------------------
# For Oh My Zsh, add desired plugins in ~/.zshrc plugin list
# plugins=(git zsh-autosuggestions zsh-syntax-highlighting)

# Manually sourcing plugins if not using a framework:
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# source /opt/homebrew/share/zsh/site-functions


# -----------------------------------------------------
# Useful aliases
# -----------------------------------------------------
alias ll="ls -lahG"
alias brewup="brew update && brew upgrade && brew cleanup"

#------------------------------------------------------------------------------
# Aliases
#------------------------------------------------------------------------------
# Modern CLI alternatives
alias cat='bat --paging=always'
alias grep='rg'
alias find='fd'
alias md='glow'
alias ls='eza --icons'
alias ll='eza -l --icons'
alias la='eza -al --icons'

# Git shortcuts
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias lg='lazygit'

# FZF enhanced commands
alias flog='fzf --preview "bat --style=numbers --color=always --line-range=:500 {}"'
alias falias='alias | fzf'
alias fman='man -k . | fzf --preview "man {}"'

# Homebrew shortcuts
alias b="brew"
alias bdr="brew doctor"
alias blk="brew leaves"
alias boc="brew outdated --cask"
alias bof="brew outdated --formula"
alias bupd="brew update"
alias bupg="brew upgrade"
alias bclean="brew cleanup --prune=all && brew autoremove"
alias bcleanall='brew cleanup --prune=all && brew autoremove && rm -rf $(brew --cache)'
alias bpull="bupd && bupg && bclean"
alias bin="brew install"
alias brein="brew reinstall"
alias bi="brew info"
alias bs="brew search"

# Homebrew Cask/Bundle management
alias bcl="brew list --cask"
alias bcin="brew install --cask"
alias bcup="brew upgrade --cask"
alias bcrein="brew reinstall --cask"

alias bb="brew bundle"
alias bblist="brew bundle list --global --all --verbose --file=-"
alias bbdump="brew bundle dump --global --all --verbose --file=-"
alias bbsave="brew bundle dump --global --all --verbose -f"
alias bbcheck="brew bundle check --global --all --verbose"


# Directory navigation
alias gdl='cd ~/Downloads'
alias gcf='cd ~/.config/'


# Zsh configuration
alias ze="nvim ~/.zshrc"
alias zep="nvim ~/.zprofile"
# alias zs="source ~/.zshrc"
alias zs="exec zsh"
alias zcompreset="rm -f ~/.zcompdump; compinit"


# -----------------------------------------------------
# Custom functions (example)
# -----------------------------------------------------
mkcd () {
  mkdir -p "$1" && cd "$1"
}


#------------------------------------------------------------------------------
# Functions
#------------------------------------------------------------------------------
# # Reload zsh configuration
# function reload() {
#     zs
#     echo "Reloaded"
# }

# # FZF with bat preview
# function fbat() {
#     bat --paging=always "$1" | fzf
# }

# # Rebuild zsh completions
# function rebuild_zsh_completions() {
#     rm -f ~/.zcompdump; compinit
# }

# # Yazi file manager wrapper
# function y() {
#     local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
#     yazi "$@" --cwd-file="$tmp"
#     if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
#         builtin cd -- "$cwd"
#     fi
#     rm -f -- "$tmp"
# }

# # -----------------------------------------------------
# # Ensure .zshrc updates are applied
# # -----------------------------------------------------
# export PATH

# alias uvgn="uv venv $GLOBAL_PYTHON_VENV"
# alias uvg="source $GLOBAL_PYTHON_VENV/bin/activate"


#------------------------------------------------------------------------------
# TODO: command cheatsheet (use cheat CLI command)
# TODO: zsh-abbr shortcuts
#------------------------------------------------------------------------------
# $ ln -s ~/.config/zsh/.zshrc ~/.zshrc
# $ nvim <file>	Opens NeoVim in the terminal to edit the given file.
# $ cat <file>	bat-enhanced cat, uses pagination and syntax highlighting.
# $ fbat <file>	Use bat + fzf to filter and preview large files interactively.
# $ flog <file>	Stream logs using fzf while previewing sections of large log files.
# $ fman	fzf-based man page search: Quickly search and preview man pages, select using fuzzy find and preview.
# $ man <command>	Opens bat-enhanced man pages with syntax highlighting and nice paging.





# # Tailscale VPN
alias ts="tailscale"


# [ ! -f "$HOME/.x-cmd.root/X" ] || . "$HOME/.x-cmd.root/X" # boot up x-cmd.

# Added by Windsurf
export PATH="/Users/hank/.codeium/windsurf/bin:$PATH"
