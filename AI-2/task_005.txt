# Task ID: 5
# Title: Implement auth state persistence
# Status: pending
# Dependencies: 4
# Priority: high
# Description: Save the authenticated Playwright context's storage state to a file for reuse in subsequent tests.
# Details:
1. Check if auth state persistence is already implemented in the existing setup
2. If needed, after successful OTP verification, add code to verify the presence of required cookies (`access_token`, `refresh_token`, `auth_indicator`)
3. Implement storage state persistence using `context.storageState({ path: './.auth/user.json' })`
4. Add validation to ensure the storage state file is created successfully
5. Implement logging for the storage state persistence process
6. Add error handling for storage state persistence failures
7. Create a utility function to check if the storage state is valid and not expired
8. Add a cleanup mechanism to remove stale storage state files

# Test Strategy:
Verify that after successful authentication, the storage state file is created with the expected cookies and can be loaded in a new browser context to maintain authentication. Run the test using the existing Playwright setup.

# Subtasks:
## 1. Analyze existing auth state implementation [pending]
### Dependencies: None
### Description: Review the current codebase to determine if auth state persistence is already implemented and identify the authentication flow
### Details:
Examine the test framework to check if any storage state persistence is already implemented. Identify where authentication happens in the test flow and where the best place would be to add persistence. Document the authentication cookies that need to be verified (`access_token`, `refresh_token`, `auth_indicator`) and their expected format.

## 2. Implement storage state persistence function [pending]
### Dependencies: 5.1
### Description: Create a utility function to save the authenticated Playwright context's storage state to a file
### Details:
Create a new utility function `saveAuthState(context)` that uses `context.storageState({ path: './.auth/user.json' })` to save the authenticated state. Ensure the target directory exists (create it if needed). Add appropriate error handling with try/catch blocks and return a success/failure status. Include logging for both success and failure scenarios.

## 3. Add cookie validation before persistence [pending]
### Dependencies: 5.2
### Description: Verify the presence of required authentication cookies before saving the storage state
### Details:
Enhance the `saveAuthState` function to first verify that the required cookies (`access_token`, `refresh_token`, `auth_indicator`) exist in the context before saving. Extract the cookies using `context.cookies()` and validate them. Only proceed with saving if all required cookies are present and valid. Log appropriate messages about the validation results.

## 4. Create auth state validation utility [pending]
### Dependencies: 5.2, 5.3
### Description: Implement a function to check if the stored auth state is valid and not expired
### Details:
Create a utility function `isAuthStateValid()` that checks if: 1) The storage state file exists, 2) It contains valid JSON, 3) It has the required cookies, and 4) The tokens are not expired (if expiration info is available). Return a boolean indicating validity. This function will be used before tests to determine if re-authentication is needed.

## 5. Implement auth state cleanup mechanism [pending]
### Dependencies: 5.4
### Description: Add functionality to remove stale or invalid storage state files
### Details:
Create a cleanup utility function `cleanupAuthState()` that removes invalid or expired auth state files. This should be called either on a schedule (before test runs) or when validation fails. Include options to force cleanup regardless of validity. Add logging for cleanup operations. Consider implementing a maximum age for auth files to prevent using very old credentials.

