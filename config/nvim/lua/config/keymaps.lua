-- Keymaps are automatically loaded on the VeryLazy event
-- Default keymaps that are always set -> (https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua)
-- Add any additional keymaps here -> https://www.lazyvim.org/configuration/general#keymaps

-----------------------------------------------------------------------------------
-- CUSTOM KEYMAPS - MODERN LAZYVIM KEYBINDINGS (2025)
-----------------------------------------------------------------------------------

-- DO NOT USE `LazyVim.safe_keymap_set` IN YOUR OWN CONFIG!!
-- use `vim.keymap.set` instead
local map = LazyVim.safe_keymap_set

map()

-- vim.keymap.set
-- ~/.config/nvim/lua/config/keymaps.lua
-- local wk = require("which-key")

-- Delete

-- --------------------------------------------------------------------------------
-- -- Leader-mappings (normal mode)
-- --------------------------------------------------------------------------------
-- local leader_maps = {
--   { "<leader>f", "<cmd>Telescope find_files<cr>", desc = "Find files" },
--   { "<leader>g", "<cmd>Telescope live_grep<cr>", desc = "Grep project" },
-- }
--
-- for _, m in ipairs(leader_maps) do
--   vim.keymap.set("n", m[1], m[2], { desc = m.desc, silent = true })
-- end
--
-- -- Register with which-key for the popup
-- wk.register(leader_maps)
--
-- --------------------------------------------------------------------------------
-- -- Text-objects (operator-pending & visual modes)
-- --------------------------------------------------------------------------------
-- local textobj_maps = {
--   mode = { "o", "x" },
--
--   -- a: around
--   { "a ", desc = "Whitespace" },
--   { 'a"', desc = 'Balanced "' },
--   { "a'", desc = "Balanced '" },
--   { "a(", desc = "Balanced (" },
--   { "a)", desc = "Balanced )" },
--   { "a<", desc = "Balanced <" },
--   { "a>", desc = "Balanced >" },
--   { "a?", desc = "User Prompt" },
--   { "a[", desc = "Balanced [" },
--   { "a]", desc = "Balanced ]" },
--   { "a_", desc = "Underscore" },
--   { "a`", desc = "Balanced `" },
--   { "aa", desc = "Argument" },
--   { "ab", desc = "Balanced ), ], }" },
--   { "ac", desc = "Class" },
--   { "af", desc = "Function" },
--   { "ag", desc = "Buffer" },
--
--   -- al: around last
--   { "al", group = "Around Last textobject" },
--   { "al ", desc = "Whitespace" },
--   { 'al"', desc = 'Balanced "' },
--   { "al'", desc = "Balanced '" },
--   { "al(", desc = "Balanced (" },
--   { "al)", desc = "Balanced )" },
--   { "al<", desc = "Balanced <" },
--   { "al>", desc = "Balanced >" },
--   { "al?", desc = "User Prompt" },
--   { "al[", desc = "Balanced [" },
--   { "al]", desc = "Balanced ]" },
--   { "al_", desc = "Underscore" },
--   { "al`", desc = "Balanced `" },
--   { "ala", desc = "Argument" },
--   { "alb", desc = "Balanced ), ], }" },
--   { "alc", desc = "Class" },
--   { "alf", desc = "Function" },
--   { "alg", desc = "Buffer" },
--   { "alo", desc = "Block, conditional, loop" },
--   { "alq", desc = "Quote `, \", '" },
--   { "alt", desc = "Tag" },
--   { "al{", desc = "Balanced {" },
--   { "al}", desc = "Balanced }" },
--
--   -- an: around next
--   { "an", group = "Around Next textobject" },
--   { "an ", desc = "Whitespace" },
--   { 'an"', desc = 'Balanced "' },
--   { "an'", desc = "Balanced '" },
--   { "an(", desc = "Balanced (" },
--   { "an)", desc = "Balanced )" },
--   { "an<", desc = "Balanced <" },
--   { "an>", desc = "Balanced >" },
--   { "an?", desc = "User Prompt" },
--   { "an[", desc = "Balanced [" },
--   { "an]", desc = "Balanced ]" },
--   { "an_", desc = "Underscore" },
--   { "an`", desc = "Balanced `" },
--   { "ana", desc = "Argument" },
--   { "anb", desc = "Balanced ), ], }" },
--   { "anc", desc = "Class" },
--   { "anf", desc = "Function" },
--   { "ang", desc = "Buffer" },
--   { "ano", desc = "Block, conditional, loop" },
--   { "anq", desc = "Quote `, \", '" },
--   { "ant", desc = "Tag" },
--   { "an{", desc = "Balanced {" },
--   { "an}", desc = "Balanced }" },
--
--   -- i: inside
--   { "i ", desc = "Whitespace" },
--   { 'i"', desc = 'Balanced "' },
--   { "i'", desc = "Balanced '" },
--   { "i(", desc = "Balanced (" },
--   { "i)", desc = "Balanced ) including white-space" },
--   { "i<", desc = "Balanced <" },
--   { "i>", desc = "Balanced > including white-space" },
--   { "i?", desc = "User Prompt" },
--   { "i[", desc = "Balanced [" },
--   { "i]", desc = "Balanced ] including white-space" },
--   { "i_", desc = "Underscore" },
--   { "i`", desc = "Balanced `" },
--   { "ia", desc = "Argument" },
--   { "ib", desc = "Balanced ), ], }" },
--   { "ic", desc = "Class" },
--   { "if", desc = "Function" },
--   { "ig", desc = "Buffer" },
--
--   -- il: inside last
--   { "il", group = "Inside Last textobject" },
--   { "il ", desc = "Whitespace" },
--   { 'il"', desc = 'Balanced "' },
--   { "il'", desc = "Balanced '" },
--   { "il(", desc = "Balanced (" },
--   { "il)", desc = "Balanced ) including white-space" },
--   { "il<", desc = "Balanced <" },
--   { "il>", desc = "Balanced > including white-space" },
--   { "il?", desc = "User Prompt" },
--   { "il[", desc = "Balanced [" },
--   { "il]", desc = "Balanced ] including white-space" },
--   { "il_", desc = "Underscore" },
--   { "il`", desc = "Balanced `" },
--   { "ila", desc = "Argument" },
--   { "ilb", desc = "Balanced ), ], }" },
--   { "ilc", desc = "Class" },
--   { "ilf", desc = "Function" },
--   { "ilg", desc = "Buffer" },
--   { "ilo", desc = "Block, conditional, loop" },
--   { "ilq", desc = "Quote `, \", '" },
--   { "ilt", desc = "Tag" },
--   { "il{", desc = "Balanced {" },
--   { "il}", desc = "Balanced } including white-space" },
--
--   -- in: inside next
--   { "in", group = "Inside Next textobject" },
--   { "in ", desc = "Whitespace" },
--   { 'in"', desc = 'Balanced "' },
--   { "in'", desc = "Balanced '" },
--   { "in(", desc = "Balanced (" },
--   { "in)", desc = "Balanced ) including white-space" },
--   { "in<", desc = "Balanced <" },
--   { "in>", desc = "Balanced > including white-space" },
--   { "in?", desc = "User Prompt" },
--   { "in[", desc = "Balanced [" },
--   { "in]", desc = "Balanced ] including white-space" },
--   { "in_", desc = "Underscore" },
--   { "in`", desc = "Balanced `" },
--   { "ina", desc = "Argument" },
--   { "inb", desc = "Balanced ), ], }" },
--   { "inc", desc = "Class" },
--   { "inf", desc = "Function" },
--   { "ing", desc = "Buffer" },
--   { "ino", desc = "Block, conditional, loop" },
--   { "inq", desc = "Quote `, \", '" },
--   { "int", desc = "Tag" },
--   { "in{", desc = "Balanced {" },
--   { "in}", desc = "Balanced } including white-space" },
--
--   -- ao, aq, at, i{, i}, etc.
--   { "ao", desc = "Block, conditional, loop" },
--   { "aq", desc = "Quote `, \", '" },
--   { "at", desc = "Tag" },
--   { "a{", desc = "Balanced {" },
--   { "a}", desc = "Balanced }" },
--   { "i{", desc = "Balanced {" },
--   { "i}", desc = "Balanced } including white-space" },
-- }
--
-- -- unpack the `mode` field, register the rest
-- local mode = textobj_maps.mode
-- textobj_maps.mode = nil
-- wk.register(textobj_maps, { prefix = "", mode = mode })
