{
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[lua]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "aws.telemetry": false,
  "bookmarks.saveBookmarksInProject": true,
  "bookmarks.sideBar.expanded": true,
  "code-runner.clearPreviousOutput": true,
  "dash.exactDocset": true,
  "dash.fileNameToDocsetMap": {
    "[dD]ocker*": ["docker"],
    "*.ino": ["arduino"],
    "gruntfile.js": ["grunt"],
    "gulpfile.js": ["gulp"],
    "Vagrantfile": ["vagrant"]
  },
  "debug.allowBreakpointsEverywhere": true,
  "debug.confirmOnExit": "always",
  "debug.javascript.autoAttachFilter": "disabled",
  "debug.javascript.breakOnConditionalError": true,
  "debug.openExplorerOnEnd": true,
  "debug.terminal.clearBeforeReusing": true,
  "diffEditor.codeLens": true,
  "diffEditor.experimental.showMoves": true,
  "diffEditor.hideUnchangedRegions.enabled": true,
  "diffEditor.ignoreTrimWhitespace": true,
  "diffEditor.renderSideBySide": false,
  "editor.accessibilitySupport": "off",
  "editor.bracketPairColorization.independentColorPoolPerBracketType": true,
  "editor.formatOnPaste": false,
  "editor.formatOnSave": true,
  "editor.formatOnSaveMode": "file",
  "editor.formatOnType": false,
  "editor.inlineSuggest.syntaxHighlightingEnabled": true,
  "editor.renderWhitespace": "all",
  "editor.wordWrap": "wordWrapColumn",
  "excalidraw.image": {
    "exportScale": 1,
    "exportWithBackground": true,
    "exportWithDarkMode": false
  },
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.expand": false,
  "explorer.fileNesting.patterns": {
    "//": "Last update at 2/12/2025, 9:59:13 PM",
    ".clang-tidy": ".clang-format, .clangd, compile_commands.json",
    ".env": "*.env, .env.*, .envrc, env.d.ts",
    ".gitignore": ".gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*",
    ".project": ".classpath",
    "+layout.svelte": "+layout.ts,+layout.ts,+layout.js,+layout.server.ts,+layout.server.js,+layout.gql",
    "+page.svelte": "+page.server.ts,+page.server.js,+page.ts,+page.js,+page.gql",
    "ansible.cfg": "ansible.cfg, .ansible-lint, requirements.yml",
    "app.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, content.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, react-router.config.*, rspack.config.*, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "artisan": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, content.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, react-router.config.*, rspack.config.*, server.php, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, webpack.mix.js, windi.config.*",
    "astro.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, content.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, react-router.config.*, rspack.config.*, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "build-wrapper.log": "build-wrapper*.log, build-wrapper-dump*.json, build-wrapper-win*.exe, build-wrapper-linux*, build-wrapper-macosx*",
    "BUILD.bazel": "*.bzl, *.bazel, *.bazelrc, bazel.rc, .bazelignore, .bazelproject, WORKSPACE",
    "Cargo.toml": ".clippy.toml, .rustfmt.toml, cargo.lock, clippy.toml, cross.toml, rust-toolchain.toml, rustfmt.toml",
    "CMakeLists.txt": "*.cmake, *.cmake.in, .cmake-format.yaml, CMakePresets.json, CMakeCache.txt",
    "composer.json": ".php*.cache, composer.lock, phpunit.xml*, psalm*.xml",
    "default.nix": "shell.nix",
    "deno.json*": "*.env, .env.*, .envrc, api-extractor.json, deno.lock, env.d.ts, import-map.json, import_map.json, jsconfig.*, tsconfig.*, tsdoc.*",
    "Dockerfile": "*.dockerfile, .devcontainer.*, .dockerignore, captain-definition, compose.*, docker-compose.*, dockerfile*",
    "flake.nix": "flake.lock",
    "gatsby-config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, content.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, gatsby-browser.*, gatsby-node.*, gatsby-ssr.*, gatsby-transformer.*, histoire.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, react-router.config.*, rspack.config.*, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "gemfile": ".ruby-version, gemfile.lock",
    "go.mod": ".air*, go.sum",
    "go.work": "go.work.sum",
    "hatch.toml": ".editorconfig, .flake8, .isort.cfg, .python-version, hatch.toml, requirements*.in, requirements*.pip, requirements*.txt, tox.ini",
    "I*.cs": "$(capture).cs",
    "Makefile": "*.mk",
    "mix.exs": ".credo.exs, .dialyzer_ignore.exs, .formatter.exs, .iex.exs, .tool-versions, mix.lock",
    "next.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, content.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, next-env.d.ts, next-i18next.config.*, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, react-router.config.*, rspack.config.*, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "nuxt.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .nuxtignore, .nuxtrc, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, content.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, react-router.config.*, rspack.config.*, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "package.json": "*.code-workspace, .browserslist*, .circleci*, .commitlint*, .cspell*, .cursorrules, .cz-config.js, .czrc, .dlint.json, .dprint.json*, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitmojirc.json, .gitpod*, .huskyrc*, .jslint*, .knip.*, .lintstagedrc*, .ls-lint.yml, .markdownlint*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .pylintrc, .release-please*.json, .releaserc*, .ruff.toml, .sentry*, .simple-git-hooks*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .versionrc*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, Procfile, apollo.config.*, appveyor*, azure-pipelines*, biome.json*, bower.json, build.config.*, bun.lock, bun.lockb, bunfig.toml, colada.options.ts, commitlint*, crowdin*, cspell*, dangerfile*, dlint.json, dprint.json*, electron-builder.*, eslint*, firebase.json, grunt*, gulp*, jenkins*, knip.*, lerna*, lint-staged*, nest-cli.*, netlify*, nixpacks*, nodemon*, npm-shrinkwrap.json, nx.*, package-lock.json, package.nls*.json, phpcs.xml, pm2.*, pnpm*, prettier*, pullapprove*, pyrightconfig.json, release-please*.json, release-tasks.sh, release.config.*, renovate*, rolldown.config.*, rollup.config.*, rspack*, ruff.toml, sentry.*.config.ts, simple-git-hooks*, sonar-project.properties, stylelint*, tsdown.config.*, tslint*, tsup.config.*, turbo*, typedoc*, unlighthouse*, vercel*, vetur.config.*, webpack*, workspace.json, wrangler.toml, xo.config.*, yarn*",
    "Pipfile": ".editorconfig, .flake8, .isort.cfg, .python-version, Pipfile, Pipfile.lock, requirements*.in, requirements*.pip, requirements*.txt, tox.ini",
    "pubspec.yaml": ".metadata, .packages, all_lint_rules.yaml, analysis_options.yaml, build.yaml, pubspec.lock, pubspec_overrides.yaml",
    "pyproject.toml": ".commitlint*, .cspell*, .dlint.json, .dprint.json*, .editorconfig, .eslint*, .flake8, .flowconfig, .isort.cfg, .jslint*, .lintstagedrc*, .ls-lint.yml, .markdownlint*, .pdm-python, .pdm.toml, .prettier*, .pylintrc, .python-version, .ruff.toml, .stylelint*, .textlint*, .xo-config*, .yamllint*, MANIFEST.in, Pipfile, Pipfile.lock, biome.json*, commitlint*, cspell*, dangerfile*, dlint.json, dprint.json*, eslint*, hatch.toml, lint-staged*, pdm.lock, phpcs.xml, poetry.lock, poetry.toml, prettier*, pyproject.toml, pyrightconfig.json, requirements*.in, requirements*.pip, requirements*.txt, ruff.toml, setup.cfg, setup.py, stylelint*, tox.ini, tslint*, uv.lock, uv.toml, xo.config.*",
    "quasar.conf.js": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, content.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, quasar.extensions.json, react-router.config.*, rspack.config.*, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "readme*": "AUTHORS, Authors, BACKERS*, Backers*, CHANGELOG*, CITATION*, CODEOWNERS, CODE_OF_CONDUCT*, CONTRIBUTING*, CONTRIBUTORS, COPYING*, CREDITS, Changelog*, Citation*, Code_Of_Conduct*, Codeowners, Contributing*, Contributors, Copying*, Credits, GOVERNANCE.MD, Governance.md, HISTORY.MD, History.md, LICENSE*, License*, MAINTAINERS, Maintainers, README-*, README_*, RELEASE_NOTES*, ROADMAP.MD, Readme-*, Readme_*, Release_Notes*, Roadmap.md, SECURITY.MD, SPONSORS*, Security.md, Sponsors*, authors, backers*, changelog*, citation*, code_of_conduct*, codeowners, contributing*, contributors, copying*, credits, governance.md, history.md, license*, maintainers, readme-*, readme_*, release_notes*, roadmap.md, security.md, sponsors*",
    "Readme*": "AUTHORS, Authors, BACKERS*, Backers*, CHANGELOG*, CITATION*, CODEOWNERS, CODE_OF_CONDUCT*, CONTRIBUTING*, CONTRIBUTORS, COPYING*, CREDITS, Changelog*, Citation*, Code_Of_Conduct*, Codeowners, Contributing*, Contributors, Copying*, Credits, GOVERNANCE.MD, Governance.md, HISTORY.MD, History.md, LICENSE*, License*, MAINTAINERS, Maintainers, README-*, README_*, RELEASE_NOTES*, ROADMAP.MD, Readme-*, Readme_*, Release_Notes*, Roadmap.md, SECURITY.MD, SPONSORS*, Security.md, Sponsors*, authors, backers*, changelog*, citation*, code_of_conduct*, codeowners, contributing*, contributors, copying*, credits, governance.md, history.md, license*, maintainers, readme-*, readme_*, release_notes*, roadmap.md, security.md, sponsors*",
    "README*": "AUTHORS, Authors, BACKERS*, Backers*, CHANGELOG*, CITATION*, CODEOWNERS, CODE_OF_CONDUCT*, CONTRIBUTING*, CONTRIBUTORS, COPYING*, CREDITS, Changelog*, Citation*, Code_Of_Conduct*, Codeowners, Contributing*, Contributors, Copying*, Credits, GOVERNANCE.MD, Governance.md, HISTORY.MD, History.md, LICENSE*, License*, MAINTAINERS, Maintainers, README-*, README_*, RELEASE_NOTES*, ROADMAP.MD, Readme-*, Readme_*, Release_Notes*, Roadmap.md, SECURITY.MD, SPONSORS*, Security.md, Sponsors*, authors, backers*, changelog*, citation*, code_of_conduct*, codeowners, contributing*, contributors, copying*, credits, governance.md, history.md, license*, maintainers, readme-*, readme_*, release_notes*, roadmap.md, security.md, sponsors*",
    "remix.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, content.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, react-router.config.*, remix.*, rspack.config.*, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "requirements.txt": ".editorconfig, .flake8, .isort.cfg, .python-version, requirements*.in, requirements*.pip, requirements*.txt, tox.ini",
    "rush.json": "*.code-workspace, .browserslist*, .circleci*, .commitlint*, .cspell*, .cursorrules, .cz-config.js, .czrc, .dlint.json, .dprint.json*, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitmojirc.json, .gitpod*, .huskyrc*, .jslint*, .knip.*, .lintstagedrc*, .ls-lint.yml, .markdownlint*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .pylintrc, .release-please*.json, .releaserc*, .ruff.toml, .sentry*, .simple-git-hooks*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .versionrc*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, Procfile, apollo.config.*, appveyor*, azure-pipelines*, biome.json*, bower.json, build.config.*, bun.lock, bun.lockb, bunfig.toml, colada.options.ts, commitlint*, crowdin*, cspell*, dangerfile*, dlint.json, dprint.json*, electron-builder.*, eslint*, firebase.json, grunt*, gulp*, jenkins*, knip.*, lerna*, lint-staged*, nest-cli.*, netlify*, nixpacks*, nodemon*, npm-shrinkwrap.json, nx.*, package-lock.json, package.nls*.json, phpcs.xml, pm2.*, pnpm*, prettier*, pullapprove*, pyrightconfig.json, release-please*.json, release-tasks.sh, release.config.*, renovate*, rolldown.config.*, rollup.config.*, rspack*, ruff.toml, sentry.*.config.ts, simple-git-hooks*, sonar-project.properties, stylelint*, tsdown.config.*, tslint*, tsup.config.*, turbo*, typedoc*, unlighthouse*, vercel*, vetur.config.*, webpack*, workspace.json, wrangler.toml, xo.config.*, yarn*",
    "sanity.config.*": "sanity.cli.*, sanity.types.ts, schema.json",
    "setup.cfg": ".editorconfig, .flake8, .isort.cfg, .python-version, MANIFEST.in, requirements*.in, requirements*.pip, requirements*.txt, setup.cfg, tox.ini",
    "setup.py": ".editorconfig, .flake8, .isort.cfg, .python-version, MANIFEST.in, requirements*.in, requirements*.pip, requirements*.txt, setup.cfg, setup.py, tox.ini",
    "shims.d.ts": "*.d.ts",
    "svelte.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, content.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, houdini.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, mdsvex.config.js, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, react-router.config.*, rspack.config.*, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vite.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "vite.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, content.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, react-router.config.*, rspack.config.*, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "vue.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, capacitor.config.*, content.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, ionic.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, panda.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, react-router.config.*, rspack.config.*, sst.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "*.asax": "$(capture).*.cs, $(capture).*.vb",
    "*.ascx": "$(capture).*.cs, $(capture).*.vb",
    "*.ashx": "$(capture).*.cs, $(capture).*.vb",
    "*.aspx": "$(capture).*.cs, $(capture).*.vb",
    "*.axaml": "$(capture).axaml.cs",
    "*.bloc.dart": "$(capture).event.dart, $(capture).state.dart",
    "*.c": "$(capture).h",
    "*.cc": "$(capture).hpp, $(capture).h, $(capture).hxx, $(capture).hh",
    "*.cjs": "$(capture).cjs.map, $(capture).*.cjs, $(capture)_*.cjs",
    "*.component.ts": "$(capture).component.html, $(capture).component.spec.ts, $(capture).component.css, $(capture).component.scss, $(capture).component.sass, $(capture).component.less",
    "*.cpp": "$(capture).hpp, $(capture).h, $(capture).hxx, $(capture).hh",
    "*.cs": "$(capture).*.cs",
    "*.cshtml": "$(capture).cshtml.cs",
    "*.csproj": "*.config, *proj.user, appsettings.*, bundleconfig.json",
    "*.css": "$(capture).css.map, $(capture).*.css",
    "*.cxx": "$(capture).hpp, $(capture).h, $(capture).hxx, $(capture).hh",
    "*.dart": "$(capture).freezed.dart, $(capture).g.dart",
    "*.db": "*.db-shm, *.db-wal",
    "*.ex": "$(capture).html.eex, $(capture).html.heex, $(capture).html.leex",
    "*.fs": "$(capture).fs.js, $(capture).fs.js.map, $(capture).fs.jsx, $(capture).fs.ts, $(capture).fs.tsx, $(capture).fs.rs, $(capture).fs.php, $(capture).fs.dart",
    "*.go": "$(capture)_test.go",
    "*.java": "$(capture).class",
    "*.js": "$(capture).js.map, $(capture).*.js, $(capture)_*.js, $(capture).d.ts, $(capture).js.flow",
    "*.jsx": "$(capture).js, $(capture).*.jsx, $(capture)_*.js, $(capture)_*.jsx, $(capture).css, $(capture).module.css, $(capture).less, $(capture).module.less, $(capture).module.less.d.ts, $(capture).scss, $(capture).module.scss, $(capture).module.scss.d.ts",
    "*.master": "$(capture).*.cs, $(capture).*.vb",
    "*.md": "$(capture).*",
    "*.mjs": "$(capture).mjs.map, $(capture).*.mjs, $(capture)_*.mjs",
    "*.module.ts": "$(capture).resolver.ts, $(capture).controller.ts, $(capture).service.ts",
    "*.mts": "$(capture).mts.map, $(capture).*.mts, $(capture)_*.mts",
    "*.pubxml": "$(capture).pubxml.user",
    "*.py": "$(capture).pyi",
    "*.razor": "$(capture).razor.cs, $(capture).razor.css, $(capture).razor.scss",
    "*.resx": "$(capture).*.resx, $(capture).designer.cs, $(capture).designer.vb",
    "*.tex": "$(capture).acn, $(capture).acr, $(capture).alg, $(capture).aux, $(capture).bbl, $(capture).bbl-SAVE-ERROR, $(capture).bcf, $(capture).blg, $(capture).fdb_latexmk, $(capture).fls, $(capture).glg, $(capture).glo, $(capture).gls, $(capture).idx, $(capture).ind, $(capture).ist, $(capture).lof, $(capture).log, $(capture).lot, $(capture).nav, $(capture).out, $(capture).run.xml, $(capture).snm, $(capture).synctex.gz, $(capture).toc, $(capture).xdv",
    "*.ts": "$(capture).js, $(capture).d.ts.map, $(capture).*.ts, $(capture)_*.js, $(capture)_*.ts",
    "*.tsx": "$(capture).ts, $(capture).*.tsx, $(capture)_*.ts, $(capture)_*.tsx, $(capture).css, $(capture).module.css, $(capture).less, $(capture).module.less, $(capture).module.less.d.ts, $(capture).scss, $(capture).module.scss, $(capture).module.scss.d.ts, $(capture).css.ts",
    "*.vbproj": "*.config, *proj.user, appsettings.*, bundleconfig.json",
    "*.vue": "$(capture).*.ts, $(capture).*.js, $(capture).story.vue",
    "*.w": "$(capture).*.w, I$(capture).w",
    "*.wat": "$(capture).wasm",
    "*.xaml": "$(capture).xaml.cs"
  },
  "extensions.experimental.affinity": {
    "asvetliakov.vscode-neovim": 1
  },
  "files.autoGuessEncoding": true,
  "files.autoSave": "afterDelay",
  "files.insertFinalNewline": true,
  "gitlens.ai.model": "anthropic:claude-3-5-sonnet-latest",
  "GitLive.Special branches": "main|master|trunk|dev|develop|qa|test|release[-/].*",
  "leetcode.defaultLanguage": "python3",
  "Lua.codeLens.enable": true,
  "markdown.extension.completion.enabled": true,
  "nix.enableLanguageServer": true,
  "nix.formatterPath": "alejandra",
  "nix.serverSettings": {},
  "nixEnvSelector.nixFile": "",
  "path-intellisense.showHiddenFiles": true,
  "problems.showCurrentInStatus": true,
  "projectManager.filterOnFullPath": true,
  "projectManager.git.baseFolders": ["/Users/hank/src", "/Users/hank/dotfiles"],
  "projectManager.projectsLocation": "~/Dropbox/_WORKSPACE/projects.json",
  "pythonIndent.trimLinesWithOnlyWhitespace": true,
  "raycast.loglevel": "info",
  "roo-cline.allowedCommands": [
    "npm test",
    "npm install",
    "tsc",
    "git log",
    "git diff",
    "git show"
  ],
  "ruff.format.preview": false,
  "scm.alwaysShowActions": true,
  "scm.alwaysShowRepositories": true,
  "scm.defaultViewMode": "tree",
  "search.defaultViewMode": "tree",
  "search.globalFindClipboard": true,
  "search.searchEditor.defaultNumberOfContextLines": 2,
  "search.searchEditor.focusResultsOnSearch": true,
  "security.workspace.trust.startupPrompt": "never",
  "security.workspace.trust.untrustedFiles": "open",
  "terminal.explorerKind": "external",
  "terminal.external.osxExec": "Ghostty.app",
  "terminal.integrated.confirmOnExit": "hasChildProcesses",
  "vim.cursorStylePerMode.insert": "line-thin",
  "vim.cursorStylePerMode.normal": "block",
  "vim.cursorStylePerMode.replace": "underline-thin",
  "vim.cursorStylePerMode.visual": "line-thin",
  "vim.easymotion": true,
  "vim.enableNeovim": true,
  "vim.foldfix": true,
  "vim.highlightedyank.enable": true,
  "vim.hlsearch": true,
  "vim.leader": ",",
  "whichkey.bindings": [
    {
      "command": "workbench.action.showCommands",
      "key": " ",
      "name": "Commands",
      "type": "command"
    },
    {
      "commands": [
        "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "list.select"
      ],
      "key": "\t",
      "name": "Last editor",
      "type": "commands"
    },
    {
      "command": "whichkey.searchBindings",
      "key": "?",
      "name": "Search keybindings",
      "type": "command"
    },
    {
      "command": "whichkey.repeatMostRecent",
      "key": ".",
      "name": "Repeat most recent action",
      "type": "command"
    },
    {
      "bindings": [
        {
          "command": "workbench.action.showAllEditors",
          "key": "b",
          "name": "Show all buffers/editors",
          "type": "command"
        },
        {
          "command": "workbench.action.showEditorsInActiveGroup",
          "key": "B",
          "name": "Show all buffers/editors in active group",
          "type": "command"
        },
        {
          "command": "workbench.action.closeActiveEditor",
          "key": "d",
          "name": "Close active editor",
          "type": "command"
        },
        {
          "command": "workbench.action.moveEditorToLeftGroup",
          "key": "H",
          "name": "Move editor into left group",
          "type": "command"
        },
        {
          "command": "workbench.action.moveEditorToBelowGroup",
          "key": "J",
          "name": "Move editor into below group",
          "type": "command"
        },
        {
          "command": "workbench.action.moveEditorToAboveGroup",
          "key": "K",
          "name": "Move editor into above group",
          "type": "command"
        },
        {
          "command": "workbench.action.moveEditorToRightGroup",
          "key": "L",
          "name": "Move editor into right group",
          "type": "command"
        },
        {
          "command": "workbench.action.closeOtherEditors",
          "key": "M",
          "name": "Close other editors",
          "type": "command"
        },
        {
          "command": "workbench.action.nextEditor",
          "key": "n",
          "name": "Next editor",
          "type": "command"
        },
        {
          "command": "workbench.action.previousEditor",
          "key": "p",
          "name": "Previous editor",
          "type": "command"
        },
        {
          "command": "workbench.action.files.newUntitledFile",
          "key": "N",
          "name": "New untitled editor",
          "type": "command"
        },
        {
          "command": "workbench.action.reopenClosedEditor",
          "key": "u",
          "name": "Reopen closed editor",
          "type": "command"
        },
        {
          "commands": [
            "editor.action.selectAll",
            "editor.action.clipboardPasteAction"
          ],
          "key": "P",
          "name": "Paste clipboard to buffer",
          "type": "commands"
        },
        {
          "commands": [
            "editor.action.selectAll",
            "editor.action.clipboardCopyAction",
            "cancelSelection"
          ],
          "key": "Y",
          "name": "Copy buffer to clipboard",
          "type": "commands"
        }
      ],
      "key": "b",
      "name": "+Buffers/Editors",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "workbench.action.debug.start",
          "key": "d",
          "name": "Start debug",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.run",
          "key": "D",
          "name": "Run without debugging",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.stop",
          "key": "S",
          "name": "Stop debug",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.continue",
          "key": "c",
          "name": "Continue debug",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.pause",
          "key": "p",
          "name": "Pause debug",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.restart",
          "key": "R",
          "name": "Restart debug",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.stepInto",
          "key": "i",
          "name": "Step into",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.stepOver",
          "key": "s",
          "name": "Step over",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.stepOut",
          "key": "o",
          "name": "Step out",
          "type": "command"
        },
        {
          "command": "editor.debug.action.toggleBreakpoint",
          "key": "b",
          "name": "Toggle breakpoint",
          "type": "command"
        },
        {
          "command": "editor.debug.action.toggleInlineBreakpoint",
          "key": "B",
          "name": "Toggle inline breakpoint",
          "type": "command"
        },
        {
          "command": "debug.jumpToCursor",
          "key": "j",
          "name": "Jump to cursor",
          "type": "command"
        },
        {
          "command": "workbench.debug.action.toggleRepl",
          "key": "v",
          "name": "REPL",
          "type": "command"
        },
        {
          "command": "workbench.debug.action.focusWatchView",
          "key": "w",
          "name": "Focus on watch window",
          "type": "command"
        },
        {
          "command": "editor.debug.action.selectionToWatch",
          "key": "W",
          "name": "Add to watch",
          "type": "command"
        }
      ],
      "key": "d",
      "name": "+Debug",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "args": "whichkey.transient.error",
          "command": "whichkey.showTransient",
          "key": ".",
          "name": "Error transient",
          "type": "command"
        },
        {
          "command": "workbench.actions.view.problems",
          "key": "l",
          "name": "List errors",
          "type": "command"
        },
        {
          "command": "editor.action.marker.prev",
          "key": "N",
          "name": "Previous error",
          "type": "command"
        },
        {
          "command": "editor.action.marker.next",
          "key": "n",
          "name": "Next error",
          "type": "command"
        },
        {
          "command": "editor.action.marker.prev",
          "key": "p",
          "name": "Previous error",
          "type": "command"
        }
      ],
      "key": "e",
      "name": "+Errors",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "whichkey.openFile",
          "key": "f",
          "name": "Open file/folder",
          "type": "command"
        },
        {
          "command": "workbench.action.files.newUntitledFile",
          "key": "n",
          "name": "New Untitled",
          "type": "command"
        },
        {
          "command": "workbench.action.files.showOpenedFileInNewWindow",
          "key": "w",
          "name": "Open active in new window",
          "type": "command"
        },
        {
          "command": "workbench.action.files.save",
          "key": "s",
          "name": "Save file",
          "type": "command"
        },
        {
          "command": "workbench.action.files.saveAll",
          "key": "S",
          "name": "Save all files",
          "type": "command"
        },
        {
          "command": "workbench.action.openRecent",
          "key": "r",
          "name": "Open recent",
          "type": "command"
        },
        {
          "commands": [
            "workbench.files.action.showActiveFileInExplorer",
            "renameFile"
          ],
          "key": "R",
          "name": "Rename file",
          "type": "commands"
        },
        {
          "command": "workbench.view.explorer",
          "key": "t",
          "name": "Show tree/explorer view",
          "type": "command"
        },
        {
          "command": "workbench.files.action.showActiveFileInExplorer",
          "key": "T",
          "name": "Show active file in tree/explorer view",
          "type": "command"
        },
        {
          "command": "workbench.action.files.copyPathOfActiveFile",
          "key": "y",
          "name": "Copy path of active file",
          "type": "command"
        },
        {
          "command": "explorer.openWith",
          "key": "o",
          "name": "Open with",
          "type": "command"
        },
        {
          "command": "workbench.action.editor.changeLanguageMode",
          "key": "l",
          "name": "Change file language",
          "type": "command"
        },
        {
          "command": "editor.action.formatDocument",
          "key": "=",
          "name": "Format file",
          "type": "command"
        },
        {
          "bindings": [
            {
              "command": "changeEditorIndentation",
              "key": "i",
              "name": "Change indentation",
              "type": "command"
            },
            {
              "command": "editor.action.detectIndentation",
              "key": "d",
              "name": "Detect indentation",
              "type": "command"
            },
            {
              "command": "editor.action.reindentlines",
              "key": "r",
              "name": "Reindent",
              "type": "command"
            },
            {
              "command": "editor.action.reindentselectedlines",
              "key": "R",
              "name": "Reindent selected",
              "type": "command"
            },
            {
              "command": "editor.action.indentationToTabs",
              "key": "t",
              "name": "Convert indentation to tabs",
              "type": "command"
            },
            {
              "command": "editor.action.indentationToSpaces",
              "key": "s",
              "name": "Convert indentation to spaces",
              "type": "command"
            }
          ],
          "key": "i",
          "name": "+Indentation",
          "type": "bindings"
        }
      ],
      "key": "f",
      "name": "+File",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "git.checkout",
          "key": "b",
          "name": "Checkout",
          "type": "command"
        },
        {
          "command": "git.commit",
          "key": "c",
          "name": "Commit",
          "type": "command"
        },
        {
          "command": "git.deleteBranch",
          "key": "d",
          "name": "Delete Branch",
          "type": "command"
        },
        {
          "command": "git.fetch",
          "key": "f",
          "name": "Fetch",
          "type": "command"
        },
        {
          "command": "git.init",
          "key": "i",
          "name": "Init",
          "type": "command"
        },
        {
          "command": "git.merge",
          "key": "m",
          "name": "Merge",
          "type": "command"
        },
        {
          "command": "git.publish",
          "key": "p",
          "name": "Publish",
          "type": "command"
        },
        {
          "command": "workbench.view.scm",
          "key": "s",
          "name": "Status",
          "type": "command"
        },
        {
          "command": "git.stage",
          "key": "S",
          "name": "Stage",
          "type": "command"
        },
        {
          "command": "git.unstage",
          "key": "U",
          "name": "Unstage",
          "type": "command"
        }
      ],
      "key": "g",
      "name": "+Git",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "editor.action.insertLineAfter",
          "key": "j",
          "name": "Insert line below",
          "type": "command"
        },
        {
          "command": "editor.action.insertLineBefore",
          "key": "k",
          "name": "Insert line above",
          "type": "command"
        },
        {
          "command": "editor.action.insertSnippet",
          "key": "s",
          "name": "Insert snippet",
          "type": "command"
        }
      ],
      "key": "i",
      "name": "+Insert",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "workbench.action.quickOpen",
          "key": "f",
          "name": "Find file in project",
          "type": "command"
        },
        {
          "command": "workbench.action.openRecent",
          "key": "p",
          "name": "Switch project",
          "type": "command"
        },
        {
          "command": "workbench.view.explorer",
          "key": "t",
          "name": "Show tree/explorer view",
          "type": "command"
        }
      ],
      "key": "p",
      "name": "+Project",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "whichkey.repeatRecent",
          "key": ".",
          "name": "Repeat recent actions",
          "type": "command"
        }
      ],
      "key": "r",
      "name": "+Repeat",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "editor.action.rename",
          "key": "e",
          "name": "Edit symbol",
          "type": "command"
        },
        {
          "args": [null, "whichkey.transient.symbol"],
          "commands": [
            "editor.action.wordHighlight.trigger",
            "whichkey.showTransient"
          ],
          "key": "h",
          "name": "Highlight symbol transient",
          "type": "commands"
        },
        {
          "command": "workbench.action.gotoSymbol",
          "key": "j",
          "name": "Jump to symbol in file",
          "type": "command"
        },
        {
          "command": "workbench.action.showAllSymbols",
          "key": "J",
          "name": "Jump to symbol in workspace",
          "type": "command"
        },
        {
          "command": "workbench.action.findInFiles",
          "key": "p",
          "name": "Search in a project",
          "type": "command"
        },
        {
          "commands": [
            "editor.action.addSelectionToNextFindMatch",
            "workbench.action.findInFiles"
          ],
          "key": "P",
          "name": "Search in a project with a selection",
          "type": "commands"
        },
        {
          "command": "editor.action.referenceSearch.trigger",
          "key": "r",
          "name": "Search all references",
          "type": "command"
        },
        {
          "command": "references-view.find",
          "key": "R",
          "name": "Search all references in side bar",
          "type": "command"
        },
        {
          "command": "actions.find",
          "key": "s",
          "name": "Search in current file",
          "type": "command"
        }
      ],
      "key": "s",
      "name": "+Search/Symbol",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "workbench.view.explorer",
          "key": "e",
          "name": "Show explorer",
          "type": "command"
        },
        {
          "command": "workbench.view.search",
          "key": "s",
          "name": "Show search",
          "type": "command"
        },
        {
          "command": "workbench.view.scm",
          "key": "g",
          "name": "Show source control",
          "type": "command"
        },
        {
          "command": "workbench.view.extension.test",
          "key": "t",
          "name": "Show test",
          "type": "command"
        },
        {
          "command": "workbench.view.remote",
          "key": "r",
          "name": "Show remote explorer",
          "type": "command"
        },
        {
          "command": "workbench.view.extensions",
          "key": "x",
          "name": "Show extensions",
          "type": "command"
        },
        {
          "command": "workbench.actions.view.problems",
          "key": "p",
          "name": "Show problem",
          "type": "command"
        },
        {
          "command": "workbench.action.output.toggleOutput",
          "key": "o",
          "name": "Show output",
          "type": "command"
        },
        {
          "command": "workbench.debug.action.toggleRepl",
          "key": "d",
          "name": "Show debug console",
          "type": "command"
        }
      ],
      "key": "S",
      "name": "+Show",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "toggleFindCaseSensitive",
          "key": "c",
          "name": "Toggle find case sensitive",
          "type": "command"
        },
        {
          "command": "toggle.diff.ignoreTrimWhitespace",
          "key": "w",
          "name": "Toggle ignore trim whitespace in diff",
          "type": "command"
        },
        {
          "command": "editor.action.toggleWordWrap",
          "key": "W",
          "name": "Toggle word wrap",
          "type": "command"
        }
      ],
      "key": "t",
      "name": "+Toggles",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "workbench.action.toggleSidebarVisibility",
          "key": "b",
          "name": "Toggle side bar visibility",
          "type": "command"
        },
        {
          "command": "workbench.action.togglePanel",
          "key": "j",
          "name": "Toggle panel visibility",
          "type": "command"
        },
        {
          "command": "workbench.action.toggleFullScreen",
          "key": "F",
          "name": "Toggle full screen",
          "type": "command"
        },
        {
          "command": "workbench.action.selectTheme",
          "key": "s",
          "name": "Select theme",
          "type": "command"
        },
        {
          "command": "workbench.action.toggleMaximizedPanel",
          "key": "m",
          "name": "Toggle maximized panel",
          "type": "command"
        },
        {
          "command": "workbench.action.toggleActivityBarVisibility",
          "key": "t",
          "name": "Toggle tool/activity bar visibility",
          "type": "command"
        },
        {
          "command": "workbench.action.toggleTabsVisibility",
          "key": "T",
          "name": "Toggle tab visibility",
          "type": "command"
        },
        {
          "command": "workbench.action.toggleZenMode",
          "key": "z",
          "name": "Toggle zen mode",
          "type": "command"
        }
      ],
      "key": "T",
      "name": "+UI toggles",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "workbench.action.focusPreviousGroup",
          "key": "W",
          "name": "Focus previous editor group",
          "type": "command"
        },
        {
          "command": "workbench.action.splitEditorDown",
          "key": "-",
          "name": "Split editor below",
          "type": "command"
        },
        {
          "command": "workbench.action.splitEditor",
          "key": "/",
          "name": "Split editor right",
          "type": "command"
        },
        {
          "command": "workbench.action.splitEditorDown",
          "key": "s",
          "name": "Split editor below",
          "type": "command"
        },
        {
          "command": "workbench.action.splitEditor",
          "key": "v",
          "name": "Split editor right",
          "type": "command"
        },
        {
          "command": "workbench.action.focusLeftGroup",
          "key": "h",
          "name": "Focus editor group left",
          "type": "command"
        },
        {
          "command": "workbench.action.focusBelowGroup",
          "key": "j",
          "name": "Focus editor group down",
          "type": "command"
        },
        {
          "command": "workbench.action.focusAboveGroup",
          "key": "k",
          "name": "Focus editor group up",
          "type": "command"
        },
        {
          "command": "workbench.action.focusRightGroup",
          "key": "l",
          "name": "Focus editor group right",
          "type": "command"
        },
        {
          "command": "workbench.action.moveActiveEditorGroupLeft",
          "key": "H",
          "name": "Move editor group left",
          "type": "command"
        },
        {
          "command": "workbench.action.moveActiveEditorGroupDown",
          "key": "J",
          "name": "Move editor group down",
          "type": "command"
        },
        {
          "command": "workbench.action.moveActiveEditorGroupUp",
          "key": "K",
          "name": "Move editor group up",
          "type": "command"
        },
        {
          "command": "workbench.action.moveActiveEditorGroupRight",
          "key": "L",
          "name": "Move editor group right",
          "type": "command"
        },
        {
          "command": "workbench.action.toggleEditorWidths",
          "key": "t",
          "name": "Toggle editor group sizes",
          "type": "command"
        },
        {
          "command": "workbench.action.minimizeOtherEditors",
          "key": "m",
          "name": "Maximize editor group",
          "type": "command"
        },
        {
          "command": "workbench.action.maximizeEditor",
          "key": "M",
          "name": "Maximize editor group and hide side bar",
          "type": "command"
        },
        {
          "command": "workbench.action.evenEditorWidths",
          "key": "=",
          "name": "Reset editor group sizes",
          "type": "command"
        },
        {
          "command": "workbench.action.joinAllGroups",
          "key": "z",
          "name": "Combine all editors",
          "type": "command"
        },
        {
          "command": "workbench.action.closeEditorsInGroup",
          "key": "d",
          "name": "Close editor group",
          "type": "command"
        },
        {
          "command": "workbench.action.closeAllGroups",
          "key": "x",
          "name": "Close all editor groups",
          "type": "command"
        }
      ],
      "key": "w",
      "name": "+Window",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "editor.action.organizeImports",
          "key": "i",
          "name": "Organize Imports",
          "type": "command"
        },
        {
          "command": "editor.action.rename",
          "key": "r",
          "name": "Rename symbol",
          "type": "command"
        },
        {
          "command": "editor.action.refactor",
          "key": "R",
          "name": "Refactor",
          "type": "command"
        },
        {
          "command": "editor.action.quickFix",
          "key": ".",
          "name": "Quick fix",
          "type": "command"
        },
        {
          "command": "editor.action.referenceSearch.trigger",
          "key": "a",
          "name": "Find all references",
          "type": "command"
        },
        {
          "command": "editor.action.transformToLowercase",
          "key": "u",
          "name": "To lower case",
          "type": "command"
        },
        {
          "command": "editor.action.transformToUppercase",
          "key": "U",
          "name": "To upper case",
          "type": "command"
        },
        {
          "args": [null, "whichkey.transient.lineMoving"],
          "commands": [
            "editor.action.moveLinesDownAction",
            "whichkey.showTransient"
          ],
          "key": "J",
          "name": "Move lines down transient",
          "type": "commands"
        },
        {
          "args": [null, "whichkey.transient.lineMoving"],
          "commands": [
            "editor.action.moveLinesUpAction",
            "whichkey.showTransient"
          ],
          "key": "K",
          "name": "Move lines up transient",
          "type": "commands"
        },
        {
          "bindings": [
            {
              "command": "editor.action.sortLinesAscending",
              "key": "s",
              "name": "Sort lines in ascending order",
              "type": "command"
            },
            {
              "command": "editor.action.sortLinesDescending",
              "key": "S",
              "name": "Sort lines in descending order",
              "type": "command"
            },
            {
              "command": "editor.action.copyLinesDownAction",
              "key": "d",
              "name": "Duplicate lines down",
              "type": "command"
            },
            {
              "command": "editor.action.copyLinesUpAction",
              "key": "D",
              "name": "Duplicate lines up",
              "type": "command"
            }
          ],
          "key": "l",
          "name": "+Lines",
          "type": "bindings"
        },
        {
          "bindings": [
            {
              "command": "editor.action.trimTrailingWhitespace",
              "key": "w",
              "name": "Delete trailing whitespace",
              "type": "command"
            }
          ],
          "key": "d",
          "name": "+Delete",
          "type": "bindings"
        },
        {
          "bindings": [
            {
              "command": "merge-conflict.accept.both",
              "key": "b",
              "name": "Accept both",
              "type": "command"
            },
            {
              "command": "merge-conflict.accept.current",
              "key": "c",
              "name": "Accept current",
              "type": "command"
            },
            {
              "command": "merge-conflict.accept.incoming",
              "key": "i",
              "name": "Accept incoming",
              "type": "command"
            },
            {
              "command": "merge-conflict.accept.all-both",
              "key": "B",
              "name": "Accept all both",
              "type": "command"
            },
            {
              "command": "merge-conflict.accept.all-current",
              "key": "C",
              "name": "Accept all current",
              "type": "command"
            },
            {
              "command": "merge-conflict.accept.all-incoming",
              "key": "I",
              "name": "Accept all incoming",
              "type": "command"
            },
            {
              "command": "merge-conflict.accept.selection",
              "key": "s",
              "name": "Accept selection",
              "type": "command"
            },
            {
              "command": "merge-conflict.compare",
              "key": "k",
              "name": "Compare current conflict",
              "type": "command"
            },
            {
              "command": "merge-conflict.next",
              "key": "n",
              "name": "Next Conflict",
              "type": "command"
            },
            {
              "command": "merge-conflict.previous",
              "key": "N",
              "name": "Previous Conflict",
              "type": "command"
            }
          ],
          "key": "m",
          "name": "+Merge conflict",
          "type": "bindings"
        }
      ],
      "key": "x",
      "name": "+Text",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "bindings": [
            {
              "command": "editor.toggleFold",
              "key": "a",
              "name": "Toggle: around a point",
              "type": "command"
            },
            {
              "command": "editor.fold",
              "key": "c",
              "name": "Close: at a point",
              "type": "command"
            },
            {
              "command": "editor.foldAllBlockComments",
              "key": "b",
              "name": "Close: all block comments",
              "type": "command"
            },
            {
              "command": "editor.foldAllMarkerRegions",
              "key": "g",
              "name": "Close: all regions",
              "type": "command"
            },
            {
              "command": "editor.foldAll",
              "key": "m",
              "name": "Close: all",
              "type": "command"
            },
            {
              "command": "editor.unfold",
              "key": "o",
              "name": "Open: at a point",
              "type": "command"
            },
            {
              "command": "editor.unfoldRecursively",
              "key": "O",
              "name": "Open: recursively",
              "type": "command"
            },
            {
              "command": "editor.unfoldAllMarkerRegions",
              "key": "G",
              "name": "Open: all regions",
              "type": "command"
            },
            {
              "command": "editor.unfoldAll",
              "key": "r",
              "name": "Open: all",
              "type": "command"
            }
          ],
          "key": ".",
          "name": "+Fold",
          "type": "bindings"
        },
        {
          "args": "whichkey.transient.frameZooming",
          "command": "whichkey.showTransient",
          "key": "f",
          "name": "Frame zooming transient",
          "type": "command"
        },
        {
          "args": "whichkey.transient.fontZooming",
          "command": "whichkey.showTransient",
          "key": "x",
          "name": "Font zooming transient",
          "type": "command"
        },
        {
          "args": "whichkey.transient.imageZooming",
          "command": "whichkey.showTransient",
          "key": "i",
          "name": "Image zooming transient",
          "type": "command"
        }
      ],
      "key": "z",
      "name": "+Zoom/Fold",
      "type": "bindings"
    },
    {
      "command": "workbench.action.terminal.focus",
      "key": "!",
      "name": "Show terminal",
      "type": "command"
    },
    {
      "command": "workbench.action.findInFiles",
      "key": "/",
      "name": "Search in a project",
      "type": "command"
    },
    {
      "commands": [
        "editor.action.addSelectionToNextFindMatch",
        "workbench.action.findInFiles"
      ],
      "key": "*",
      "name": "Search in a project with a selection",
      "type": "commands"
    },
    {
      "args": [null, "whichkey.transient.smartExpand"],
      "commands": ["editor.action.smartSelect.grow", "whichkey.showTransient"],
      "key": "v",
      "name": "Smart select/expand region transient",
      "type": "commands"
    },
    {
      "command": "workbench.action.focusFirstEditorGroup",
      "key": "1",
      "name": "Focus 1st editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusSecondEditorGroup",
      "key": "2",
      "name": "Focus 2nd editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusThirdEditorGroup",
      "key": "3",
      "name": "Focus 3rd editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusFourthEditorGroup",
      "key": "4",
      "name": "Focus 4th editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusFifthEditorGroup",
      "key": "5",
      "name": "Focus 5th editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusSixthEditorGroup",
      "key": "6",
      "name": "Focus 6th editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusSeventhEditorGroup",
      "key": "7",
      "name": "Focus 7th editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusEighthEditorGroup",
      "key": "8",
      "name": "Focus 8th editor group",
      "type": "command"
    }
  ],
  "window.autoDetectColorScheme": true,
  "window.confirmBeforeClose": "keyboardOnly",
  "window.nativeTabs": true,
  "window.newWindowDimensions": "maximized",
  "window.newWindowProfile": "Default",
  "window.openFoldersInNewWindow": "on",
  "window.zoomPerWindow": false,
  "workbench.activityBar.location": "default",
  "workbench.editor.alwaysShowEditorActions": true,
  "workbench.editor.autoLockGroups": {
    "workbench.editor.chatSession": true
  },
  "workbench.editor.defaultBinaryEditor": "default",
  "workbench.editor.highlightModifiedTabs": true,
  "workbench.editor.openPositioning": "last",
  "workbench.editor.revealIfOpen": true,
  "workbench.editor.sharedViewState": true,
  "workbench.fontAliasing": "antialiased",
  "workbench.iconTheme": "file-icons-colourless",
  "workbench.layoutControl.type": "menu",
  "workbench.preferredLightColorTheme": "Catppuccin Latte",
  "workbench.reduceMotion": "on",
  "workbench.settings.openDefaultKeybindings": true,
  "workbench.settings.openDefaultModelSelection": true,
  "workbench.tree.indent": 4,
  "xstate.nestTypegenFiles": false,
  "yaml.schemas": {
    "file:///Users/hank/.aide/extensions/atlassian.atlascode-3.2.2/resources/schemas/pipelines-schema.json": "bitbucket-pipelines.yml"
  },
  "workbench.preferredDarkColorTheme": "Catppuccin Macchiato"
}
