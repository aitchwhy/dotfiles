# Git configuration optimized for macOS Apple Silicon
# https://git-scm.com/docs/git-config.html

# ===== User Information =====
[user]
email = hank.lee@anterior.com
name = Hank Lee

# ===== Core Settings =====
[core]
editor = nvim
pager = delta
# Reference the custom gitignore path
excludesfile = ~/dotfiles/config/git/gitignore
# Performance optimizations for m

# ===== Basic UI Settings =====
[color]
ui = true
diff = auto
status = auto
branch = auto
interactive = auto

[init]
defaultBranch = main

# ===== Diff & Merge Tools =====
[interactive]
diffFilter = delta --color-only

[delta]
navigate = true
light = false
line-numbers = true
side-by-side = true

# ===== Pull, Push & Branch Settings =====
[pull]
rebase = false

[push]
default = current
followTags = true
recurseSubmodules = check

[branch]
autoSetupRebase = always
sort = -committerdate

[fetch]
prune = true
pruneTags = true
parallel = 0

[rebase]
autoStash = true
instructionFormat = "[%an @ %ar] %s"
stat = true

# ===== Status & Pager Settings =====
[status]
showUntrackedFiles = all
submoduleSummary = true

[pager]
diff = delta
log = delta
reflog = delta
show = delta
branch = false
tag = false

# ===== Authentication & Signing =====
[credential]
helper = osxkeychain

[credential "https://github.com"]
	helper =
	helper = !/opt/homebrew/bin/gh auth git-credential

[credential "https://gist.github.com"]
	helper =
	helper = !/opt/homebrew/bin/gh auth git-credential

[gpg "ssh"]
program = ssh-keygen
allowedSignersFile = ~/.ssh/allowed_signers

[commit]
template = ~/dotfiles/config/git/gitmessage
verbose = true

# ===== LFS Settings =====
[filter "lfs"]
clean = git-lfs clean -- %f
smudge = git-lfs smudge -- %f
process = git-lfs filter-process
required = true

# ===== URL Handling =====
[url "git@github.com:"]
insteadOf = https://github.com/

# ===== Useful Aliases =====
[alias]
# Basic operations
a = add
aa = add --all
c = commit
ca = commit --amend
co = checkout
s = status
ss = status -s
st = status -sb

# Branch operations
b = branch

# Diff & logs
d = diff
log = log --oneline

# Remote operations
p = push
ll = pull

# Blame for easy code history
bl = blame

################
# [user]
# email = hank.lee.qed@gmail.com
# name = Hank Lee
# # signingKey = FE1EF2465E55A3FDE919F8EA03B0943F3314E8BB
#
# [core]
# editor = nvim
# pager = delta
# # Use custom macOS specific gitignore and attributes
# excludesfile = ~/dotfiles/config/git/gitignore
# # excludesfile = ~/dotfiles/config/.gitignore
# # # Make `git rebase` safer on macOS
# # trustctime = false
# # # Prevent showing files with non-ASCII symbols as unversioned (macOS specific)
# # precomposeunicode = true
# # # Speed up commands involving untracked files
# # untrackedCache = true
# # Use macOS-native symlinks
# # symlinks = true
# # fsync = true
# # Improve performance on macOS APFS (fsync recommended for macOS)
# # fsync = true
# # fsyncMethod = fsync
# # Use threads to speed up file operations on Apple Silicon
# # preloadIndex = true
# # Uncomment to improve performance of large repos
# # packedGitLimit = 128m
# # packedGitWindowSize = 128m
#
# [color]
# ui = true
# diff = auto
# status = auto
# branch = auto
# interactive = auto
#
# [init]
# defaultBranch = main
# # Template directory for new git repositories
# # templateDir = ~/.config/git/template
#
# [interactive]
# diffFilter = delta --color-only
#
# [diff]
# # Use Apple Silicon optimized path for Kaleidoscope
# algorithm = zdiff3
# external = /opt/homebrew/bin/ksdiff
#
# # renames = true
# # colorMoved = default
# # # Use improved diff algorithm for better results
# # algorithm = histogram
# # mnemonicprefix = true
# # tool = vimdiff
# # # Use patience diff algorithm as backup
# # patience = true
# # # Detect moves within files
# # indentHeuristic = true
# # # Optimized for Apple Silicon
# # statGraphWidth = 130
#
# [pull]
# rebase = false
# # Avoid unnecessary merge commits
# # ff = only
#
# [push]
# # Push only current branch by default
# default = current
# # Automatically push annotated tags
# followTags = true
# # Check actual status when pushing to make sure you only push the expected changes
# recurseSubmodules = check
#
# [alias]
# # Basic shortcuts
# a = add
# aa = add --all
# bl = blame
# c = commit
# ca = commit --amend
# co = checkout
# d = diff
# log = log --oneline
# p = push
# ll = pull
# s = status
# ss = status -s
# st = status -sb
#
# # # Remote operations
# # llo = pull origin
# # po = push origin
# # pof = push origin --force-with-lease
# # pofn = push origin --force-with-lease --no-verify
# # pt = push --tag
# # r = remote
# # rs = remote show
#
# Submodule
# # sub = submodule update --remote
#
# # Tag management
# td = tag --delete
# tdr = tag --delete origin
#
# # # Log formatting
# # blog = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:red)%(refname:short)%(color:reset) - %(color:yellow)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:blue)%(committerdate:relative)%(color:reset))'
# # loggraph = log --oneline --decorate --graph
# # log1 = log --graph --abbrev-commit --oneline --decorate
#
# # Branch management
# # bclean = "!f() { git branch --merged | grep -v '\\*\\|main\\|master\\|develop' | xargs -n 1 git branch -d; }; f"
# b = branch
#
# # # macOS specific shortcuts
# # # Open changed files in default editor
# # edit = "!f() { git status -s | cut -c4- | grep -v '^ ' | uniq | xargs $EDITOR; }; f"
# # # Open file in macOS Finder
# # finder = "!open -a Finder ."
# # # Use fzf for interactive checkouts
# # fco = "!f() { git checkout $(git branch -l | fzf); }; f"
#
# # # Productivity
# # # GitHub specific: open repository in browser
# # browse = "!gh repo view --web"
# # # Fixup and rebase in one operation
# # fixup = "!f() { TARGET=$(git rev-parse "$1"); git commit --fixup=$TARGET ${@:2} && EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f"
# # # Stash only untracked files
# # stash-untracked = "!git stash --include-untracked --keep-index"
# # # List files in conflict
# # conflicts = "!git diff --name-only --diff-filter=U"
# # # Show log with relative dates
# # recent = "log --pretty=format:'%C(yellow)%h%Creset %ad | %s%d [%an]' --date=relative"
# # # Show all commits not yet pushed to remote
# # unpushed = "!git log origin/$(git rev-parse --abbrev-ref HEAD)..HEAD"
# # # What was done today
# # today = "!git log --since=midnight --author=\"$(git config user.name)\" --oneline"
# # # Show largest files in git history
# # big = "!git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | sed -n 's/^blob //p' | sort -k2nr | cut -c 1-12,41- | head -10"
#
# [credential]
# helper = osxkeychain
#
# [credential "https://github.com"]
# helper = !/opt/homebrew/bin/gh auth git-credential
#
# [credential "https://gist.github.com"]
# helper = !/opt/homebrew/bin/gh auth git-credential
#
# [filter "lfs"]
# clean = git-lfs clean -- %f
# smudge = git-lfs smudge -- %f
# process = git-lfs filter-process
# required = true
#
# #[gpg]
# #format = openpgp
# # Path for GPG on Apple Silicon
# #program = /opt/homebrew/bin/gpg
#
# [gpg "ssh"]
# program = ssh-keygen
# # Path for SSH on Apple Silicon
# allowedSignersFile = ~/.ssh/allowed_signers
#
# [commit]
# # Uncomment to enable GPG signing by default
# # gpgSign = true
# template = ~/dotfiles/config/git/gitmessage
# # Improve commit message formatting
# verbose = true
#
# # [tag]
# #forceSignAnnotated = true
# # Sort tags by version number
# #sort = version:rename
#
# [fetch]
# # Automatically delete remote-tracking branches that no longer exist on the remote
# prune = true
# # Also prune tags
# pruneTags = true
# # Parallelize fetches for better performance on Apple Silicon
# parallel = 0
#
# [rebase]
# # Automatically stash/unstash during rebase
# autoStash = true
# # Use merge conflict style during rebase
# instructionFormat = "[%an @ %ar] %s"
# # Show stats after rebase
# stat = true
#
# [status]
# # Show untracked files
# showUntrackedFiles = all
# # Display submodule summary
# submoduleSummary = true
#
# [pager]
# # Use delta for all paging
# diff = delta
# log = delta
# reflog = delta
# show = delta
# # Don't use pager for these commands
# branch = false
# tag = false
#
# [branch]
# # Auto setup rebase for new branches
# autoSetupRebase = always
# # Sort branches by most recently used
# sort = -committerdate
#
# [url "git@github.com:"]
# # Prefer SSH over HTTPS for GitHub
# insteadOf = https://github.com/
#
# # [includeIf "gitdir:~/work/"]
# # # Conditionally include work-specific config
# # path = ~/.config/git/work.gitconfig
