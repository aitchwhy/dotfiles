openapi: 3.1.0
info:
  title: Chat Service API
  version: 1.0.0
  description: |
    API for streaming LLM chat responses based on PDF extracts and a basic health probe.
servers:
  - url: http://localhost:20701
paths:
  /health:
    get:
      summary: Health check
      operationId: getHealth
      responses:
        "200":
          description: Service healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /chat:
    post:
      summary: Create a chat completion stream for a clinical stem
      operationId: postChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatRequestBody"
            examples:
              default:
                value:
                  stem_id: "stem_id"
                  pdf_ids: ["pdf_1", "pdf_2"]
                  messages:
                    - message_id: "msg_1"
                      timestamp: "2025-05-15T16:00:00.000Z"
                      role: "user"
                      content:
                        - type: "markdown"
                          markdown: "Summarize these clinicals"
      responses:
        "200":
          description: Server‑Sent Events (SSE) stream with assistant content blocks.
          content:
            text/event-stream:
              schema:
                type: string
                description: UTF‑8 encoded SSE stream.
        "400":
          description: Invalid request body.
        "500":
          description: Internal server error.
components:
  schemas:
    Role:
      type: string
      enum: [user, assistant, system]
    Section:
      type: object
      required: [artifact_id, section_type, section_payload]
      properties:
        artifact_id:
          type: string
        section_type:
          type: string
        section_payload:
          type: object
    Citation:
      type: object
      required: [from, to]
      properties:
        from:
          $ref: "#/components/schemas/Section"
        to:
          $ref: "#/components/schemas/Section"
    TextBlock:
      type: object
      required: [type, text]
      properties:
        type:
          type: string
          enum: [text]
        text:
          type: string
        citations:
          type: array
          items:
            $ref: "#/components/schemas/Citation"
    MarkdownBlock:
      type: object
      required: [type, markdown]
      properties:
        type:
          type: string
          enum: [markdown]
        markdown:
          type: string
        citations:
          type: array
          items:
            $ref: "#/components/schemas/Citation"
    ImageBlock:
      type: object
      required: [type, image_url]
      properties:
        type:
          type: string
          enum: [image]
        image_url:
          type: string
          format: uri
        alt_text:
          type: string
    ContentBlock:
      oneOf:
        - $ref: "#/components/schemas/TextBlock"
        - $ref: "#/components/schemas/MarkdownBlock"
        - $ref: "#/components/schemas/ImageBlock"
      discriminator:
        propertyName: type
    ChatMessage:
      type: object
      required: [message_id, timestamp, role, content]
      properties:
        message_id:
          type: string
        timestamp:
          type: string
          format: date-time
        role:
          $ref: "#/components/schemas/Role"
        content:
          type: array
          items:
            $ref: "#/components/schemas/ContentBlock"
        metadata:
          type: object
    ChatRequestBody:
      type: object
      required: [stem_id, pdf_ids, messages]
      properties:
        stem_id:
          type: string
        pdf_ids:
          type: array
          items:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessage"
    HealthResponse:
      type: object
      required: [status, time]
      properties:
        status:
          type: string
          enum: [ok]
        time:
          type: string
          format: date-time
        commit:
          type: string
