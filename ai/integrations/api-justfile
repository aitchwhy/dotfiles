# API utilities justfile
# Namespace for REST API-related utilities
# Version: 1.0.0

# Set shell to zsh for all recipes
set shell := ["zsh", "-cu"]

# Enable colorful output
set dotenv-load
set positional-arguments

# API Tool paths
OPTIC_PATH := env_var_or_default("OPTIC_PATH", "optic")
SPECTRAL_PATH := env_var_or_default("SPECTRAL_PATH", "spectral")
HTTPIE_PATH := env_var_or_default("HTTPIE_PATH", "http")

# Default recipe for this namespace
_default:
    #!/usr/bin/env zsh
    echo "\033[1;36m=== API Tools - REST API Development Utilities ===\033[0m"
    echo "\033[1;33mOptic commands (OpenAPI validation & diffing):\033[0m"
    {{just_executable()}} --list --unsorted | grep -E "^api:optic" | sort | sed 's/^api:optic:/  /'
    
    echo "\n\033[1;33mSpectral commands (OpenAPI linting):\033[0m"
    {{just_executable()}} --list --unsorted | grep -E "^api:spectral" | sort | sed 's/^api:spectral:/  /'
    
    echo "\n\033[1;33mHTTPie commands (HTTP client):\033[0m"
    {{just_executable()}} --list --unsorted | grep -E "^api:httpie" | sort | sed 's/^api:httpie:/  /'
    
    echo "\n\033[1;33mGeneral API commands:\033[0m"
    {{just_executable()}} --list --unsorted | 
    grep -E "^api:" | 
    grep -v -E "(optic|spectral|httpie)" | 
    sort | 
    sed 's/^api:/  /'

# ----------------------------------------------------------
# Optic commands for OpenAPI validation and diffing
# ----------------------------------------------------------
[namespace=api optic]

# Validate OpenAPI specification file
validate spec_file:
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Validating OpenAPI Specification ===\033[0m"
    echo "\033[1;33mFile:\033[0m {{spec_file}}"
    
    if [ ! -f "{{spec_file}}" ]; then
        echo "\033[1;31mError: File {{spec_file}} does not exist\033[0m"
        exit 1
    fi
    
    {{OPTIC_PATH}} openapi validate "{{spec_file}}"

# Start Optic API proxy server
proxy spec_file port="8081":
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Starting Optic API Proxy ===\033[0m"
    echo "\033[1;33mFile:\033[0m {{spec_file}}"
    echo "\033[1;33mPort:\033[0m {{port}}"
    
    if [ ! -f "{{spec_file}}" ]; then
        echo "\033[1;31mError: File {{spec_file}} does not exist\033[0m"
        exit 1
    fi
    
    {{OPTIC_PATH}} api proxy "{{spec_file}}" --port "{{port}}"

# Diff two OpenAPI specs
diff spec_before spec_after:
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Comparing OpenAPI Specifications ===\033[0m"
    echo "\033[1;33mBefore:\033[0m {{spec_before}}"
    echo "\033[1;33mAfter:\033[0m {{spec_after}}"
    
    if [ ! -f "{{spec_before}}" ]; then
        echo "\033[1;31mError: File {{spec_before}} does not exist\033[0m"
        exit 1
    fi
    
    if [ ! -f "{{spec_after}}" ]; then
        echo "\033[1;31mError: File {{spec_after}} does not exist\033[0m"
        exit 1
    fi
    
    {{OPTIC_PATH}} openapi diff "{{spec_before}}" "{{spec_after}}"

# ----------------------------------------------------------
# Spectral commands for OpenAPI linting
# ----------------------------------------------------------
[namespace=api spectral]

# Lint OpenAPI spec with Spectral
lint spec_file ruleset="spectral:oas":
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Linting OpenAPI Specification ===\033[0m"
    echo "\033[1;33mFile:\033[0m {{spec_file}}"
    echo "\033[1;33mRuleset:\033[0m {{ruleset}}"
    
    if [ ! -f "{{spec_file}}" ]; then
        echo "\033[1;31mError: File {{spec_file}} does not exist\033[0m"
        exit 1
    fi
    
    {{SPECTRAL_PATH}} lint "{{spec_file}}" --ruleset "{{ruleset}}"

# Generate a custom ruleset
generate-ruleset output_path:
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Generating Spectral Ruleset ===\033[0m"
    echo "\033[1;33mOutput:\033[0m {{output_path}}"
    
    cat > "{{output_path}}" << EOL
extends: ["spectral:oas"]
rules:
  operation-tags: error
  operation-operationId: error
  operation-2xx-response: error
  operation-description: warn
  operation-summary: warn
  path-params: error
  openapi-tags: warn
  info-contact: warn
  example-value-or-externalValue: warn
  oas3-schema: error
  no-$ref-siblings: error
  typed-enum: error
  duplicated-entry-in-enum: error
  operation-singular-tag: warn
  path-declarations-must-exist: error
EOL
    
    echo "\033[1;32mGenerated Spectral ruleset at {{output_path}}\033[0m"

# ----------------------------------------------------------
# HTTPie commands for REST API testing
# ----------------------------------------------------------
[namespace=api httpie]

# Make a GET request
get url *args:
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Making HTTP GET Request ===\033[0m"
    echo "\033[1;33mURL:\033[0m {{url}}"
    
    {{HTTPIE_PATH}} -v GET "{{url}}" {{args}}

# Make a POST request
post url *args:
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Making HTTP POST Request ===\033[0m"
    echo "\033[1;33mURL:\033[0m {{url}}"
    
    {{HTTPIE_PATH}} -v POST "{{url}}" {{args}}

# Make a PUT request
put url *args:
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Making HTTP PUT Request ===\033[0m"
    echo "\033[1;33mURL:\033[0m {{url}}"
    
    {{HTTPIE_PATH}} -v PUT "{{url}}" {{args}}

# Make a DELETE request
delete url *args:
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Making HTTP DELETE Request ===\033[0m"
    echo "\033[1;33mURL:\033[0m {{url}}"
    
    {{HTTPIE_PATH}} -v DELETE "{{url}}" {{args}}

# Save request to a Bruno file
save-to-bruno url method="GET" name="example" collection_path:
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Saving Request to Bruno File ===\033[0m"
    echo "\033[1;33mURL:\033[0m {{url}}"
    echo "\033[1;33mMethod:\033[0m {{method}}"
    echo "\033[1;33mName:\033[0m {{name}}"
    
    # Ensure collection directory exists
    COLLECTION_DIR=$(dirname "{{collection_path}}")
    mkdir -p "$COLLECTION_DIR"
    
    # Save as Bruno file
    cat > "{{collection_path}}" << EOL
meta {
  name: {{name}}
  type: http
  seq: 1
}

{{method}} {{url}} HTTP/1.1
Content-Type: application/json
User-Agent: bruno

# Example request body (for POST/PUT):
# {
#   "key": "value"
# }
EOL
    
    echo "\033[1;32mSaved request to {{collection_path}}\033[0m"

# ----------------------------------------------------------
# General API utilities
# ----------------------------------------------------------
[namespace=api]

# Generate TypeScript client from OpenAPI spec
generate-client spec_file output_dir:
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Generating TypeScript Client ===\033[0m"
    echo "\033[1;33mSpec File:\033[0m {{spec_file}}"
    echo "\033[1;33mOutput Directory:\033[0m {{output_dir}}"
    
    if [ ! -f "{{spec_file}}" ]; then
        echo "\033[1;31mError: File {{spec_file}} does not exist\033[0m"
        exit 1
    fi
    
    # Create output directory if it doesn't exist
    mkdir -p "{{output_dir}}"
    
    # Generate client using openapi-generator-cli
    SPEC_EXT="${{spec_file}##*.}"
    if [ "$SPEC_EXT" = "yaml" ] || [ "$SPEC_EXT" = "yml" ]; then
        # Convert YAML to JSON first for better compatibility
        TEMP_JSON=$(mktemp)
        npx yaml2json "{{spec_file}}" > "$TEMP_JSON"
        npx @openapitools/openapi-generator-cli generate -i "$TEMP_JSON" -g typescript-fetch -o "{{output_dir}}"
        rm "$TEMP_JSON"
    else
        npx @openapitools/openapi-generator-cli generate -i "{{spec_file}}" -g typescript-fetch -o "{{output_dir}}"
    fi
    
    # Add Tanstack Query hooks if available
    if command -v "npx" > /dev/null && [ -d "{{output_dir}}" ]; then
        echo "\033[1;33mGenerating Tanstack Query hooks...\033[0m"
        
        # Create hooks directory
        HOOKS_DIR="{{output_dir}}/hooks"
        mkdir -p "$HOOKS_DIR"
        
        # Create index.ts with query hooks
        cat > "$HOOKS_DIR/index.ts" << EOL
import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { Api, ApiConfig } from '../apis';

// Create API client factory with configuration
export const createApiClient = (config: ApiConfig) => new Api(config);

// Create hooks factory
export const createApiHooks = (apiClient: Api) => {
  // Return hooks for each API endpoint
  return {
    // Example query hook generator
    useApiQuery: <T>(
      queryFn: (api: Api) => Promise<T>,
      queryKey: any[],
      options?: Omit<UseQueryOptions<T, Error, T, any[]>, 'queryKey' | 'queryFn'>
    ) => {
      return useQuery({
        queryKey,
        queryFn: () => queryFn(apiClient),
        ...options,
      });
    },
    
    // Example mutation hook generator
    useApiMutation: <T, V>(
      mutationFn: (api: Api, variables: V) => Promise<T>,
      options?: Omit<UseMutationOptions<T, Error, V, unknown>, 'mutationFn'>
    ) => {
      return useMutation({
        mutationFn: (variables: V) => mutationFn(apiClient, variables),
        ...options,
      });
    },
  };
};
EOL
        
        echo "\033[1;32mTanstack Query hooks generated at $HOOKS_DIR\033[0m"
    fi
    
    echo "\033[1;32mTypeScript client generated at {{output_dir}}\033[0m"

# Generate Python client from OpenAPI spec
generate-python-client spec_file output_dir:
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Generating Python Client ===\033[0m"
    echo "\033[1;33mSpec File:\033[0m {{spec_file}}"
    echo "\033[1;33mOutput Directory:\033[0m {{output_dir}}"
    
    if [ ! -f "{{spec_file}}" ]; then
        echo "\033[1;31mError: File {{spec_file}} does not exist\033[0m"
        exit 1
    fi
    
    # Create output directory if it doesn't exist
    mkdir -p "{{output_dir}}"
    
    # Generate client using openapi-generator-cli
    npx @openapitools/openapi-generator-cli generate -i "{{spec_file}}" -g python -o "{{output_dir}}"
    
    echo "\033[1;32mPython client generated at {{output_dir}}\033[0m"
    
    # Create requirements.txt
    cat > "{{output_dir}}/requirements.txt" << EOL
urllib3>=1.26.0
python-dateutil>=2.8.0
pydantic>=1.10.8,<2
aenum>=3.1.11
EOL
    
    echo "\033[1;32mCreated requirements.txt at {{output_dir}}/requirements.txt\033[0m"

# Create new OpenAPI 3.1 specification
create-spec output_path title="API" version="1.0.0":
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Creating New OpenAPI 3.1 Specification ===\033[0m"
    echo "\033[1;33mOutput:\033[0m {{output_path}}"
    echo "\033[1;33mTitle:\033[0m {{title}}"
    echo "\033[1;33mVersion:\033[0m {{version}}"
    
    # Create directory if it doesn't exist
    mkdir -p $(dirname "{{output_path}}")
    
    # Determine file extension for output format
    OUTPUT_EXT="${{output_path}##*.}"
    if [ "$OUTPUT_EXT" = "json" ]; then
        # Create JSON specification
        cat > "{{output_path}}" << EOL
{
  "openapi": "3.1.0",
  "info": {
    "title": "{{title}}",
    "version": "{{version}}",
    "description": "API specification for {{title}}",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    },
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    }
  ],
  "paths": {},
  "components": {
    "schemas": {},
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}
EOL
    else
        # Create YAML specification
        cat > "{{output_path}}" << EOL
openapi: 3.1.0
info:
  title: {{title}}
  version: {{version}}
  description: API specification for {{title}}
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
servers:
  - url: http://localhost:8080
    description: Local development server
paths: {}
components:
  schemas: {}
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
security:
  - BearerAuth: []
EOL
    fi
    
    echo "\033[1;32mCreated OpenAPI 3.1 specification at {{output_path}}\033[0m"

# Convert between YAML and JSON formats
convert spec_file output_file:
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Converting OpenAPI Specification Format ===\033[0m"
    echo "\033[1;33mInput:\033[0m {{spec_file}}"
    echo "\033[1;33mOutput:\033[0m {{output_file}}"
    
    if [ ! -f "{{spec_file}}" ]; then
        echo "\033[1;31mError: File {{spec_file}} does not exist\033[0m"
        exit 1
    fi
    
    # Determine input and output formats
    INPUT_EXT="${{spec_file}##*.}"
    OUTPUT_EXT="${{output_file}##*.}"
    
    if [ "$INPUT_EXT" = "yaml" ] || [ "$INPUT_EXT" = "yml" ]; then
        if [ "$OUTPUT_EXT" = "json" ]; then
            # YAML to JSON
            npx yaml2json "{{spec_file}}" > "{{output_file}}"
        else
            # YAML to YAML (copy)
            cp "{{spec_file}}" "{{output_file}}"
        fi
    elif [ "$INPUT_EXT" = "json" ]; then
        if [ "$OUTPUT_EXT" = "yaml" ] || [ "$OUTPUT_EXT" = "yml" ]; then
            # JSON to YAML
            npx json2yaml "{{spec_file}}" > "{{output_file}}"
        else
            # JSON to JSON (copy)
            cp "{{spec_file}}" "{{output_file}}"
        fi
    else
        echo "\033[1;31mError: Unsupported file extension for {{spec_file}}\033[0m"
        exit 1
    fi
    
    echo "\033[1;32mConverted specification to {{output_file}}\033[0m"

# Start a mock server based on OpenAPI spec
mock spec_file port="8080":
    #!/usr/bin/env zsh
    echo "\033[1;36m=== Starting Mock API Server ===\033[0m"
    echo "\033[1;33mSpec File:\033[0m {{spec_file}}"
    echo "\033[1;33mPort:\033[0m {{port}}"
    
    if [ ! -f "{{spec_file}}" ]; then
        echo "\033[1;31mError: File {{spec_file}} does not exist\033[0m"
        exit 1
    fi
    
    # Check if Prism is installed
    if ! command -v "prism" > /dev/null; then
        echo "\033[1;33mPrism not found. Installing...\033[0m"
        npm install -g @stoplight/prism-cli
    fi
    
    # Start mock server
    prism mock "{{spec_file}}" --port "{{port}}"