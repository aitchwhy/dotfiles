# Task ID: 2
# Title: Implement login form automation
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create the functionality to navigate to the login page, fill in credentials, and submit the form.
# Details:
1. Review existing authentication code in the project
2. If needed, create or extend `auth.setup.ts` to navigate to `/auth/login.html`
3. Implement functions to retrieve test credentials from environment variables using the existing dotenvx setup
4. Create selectors for email and password fields using data-testid attributes when available
5. Implement form filling with the test user's email and password
6. Add form submission and wait for the network request to `/api/v1/login`
7. Add logging for each step of the process
8. Implement error handling for navigation failures or form submission errors
9. Verify redirection to the OTP verification page

# Test Strategy:
Run the test using the existing Playwright setup with 'npm i && dotenvx npm run test:e2e' to verify it can successfully navigate to the login page, fill in credentials, and submit the form, resulting in redirection to the OTP verification page.

# Subtasks:
## 1. Create authentication setup file [done]
### Dependencies: None
### Description: Review existing authentication code and create or extend auth.setup.ts to handle login page navigation
### Details:
Review the project's authentication code to understand the current implementation. Create a new file `auth.setup.ts` if it doesn't exist or extend the existing one. Implement a function that uses Playwright to navigate to the login page at `/auth/login.html`. Include proper error handling for navigation failures and add logging for successful navigation.

## 2. Implement credential retrieval from environment variables [done]
### Dependencies: 2.1
### Description: Create functions to securely retrieve test credentials using the existing dotenvx setup
### Details:
Utilize the existing dotenvx configuration to create helper functions that retrieve test user credentials (email and password) from environment variables. Implement validation to ensure credentials are properly set and available. Add appropriate error handling for missing or invalid credentials. Document the required environment variable names in comments.

## 3. Create form interaction functions [done]
### Dependencies: 2.1
### Description: Implement functions to locate and interact with login form elements
### Details:
Create selectors for the login form elements (email field, password field, submit button) using data-testid attributes when available. Implement functions to fill in the form fields with credentials. Add validation to ensure form elements are found before attempting interaction. Include appropriate error handling and logging for each interaction step.

## 4. Implement form submission and response handling [done]
### Dependencies: 2.2, 2.3
### Description: Add functionality to submit the login form and handle the network response
### Details:
Implement form submission functionality that triggers the login request. Set up a wait for the network request to `/api/v1/login` to complete. Add error handling for submission failures or unexpected responses. Implement logging for the submission process and response status. Verify the authentication state after submission.

## 5. Verify post-login redirection and implement complete flow [done]
### Dependencies: 2.4
### Description: Ensure proper redirection to the OTP verification page and integrate all components
### Details:
Implement verification of successful redirection to the OTP verification page after login. Create a complete end-to-end login flow function that combines all previous subtasks (navigation, credential retrieval, form filling, submission, and verification). Add comprehensive error handling and logging throughout the entire process. Document the usage of the login automation functionality with examples.

