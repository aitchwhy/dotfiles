# Task ID: 7
# Title: Create PDF status polling functionality
# Status: pending
# Dependencies: 6
# Priority: medium
# Description: Implement the functionality to poll the PDF processing status endpoint until the document is ready.
# Details:
1. Extend `pdf.spec.ts` to implement a polling mechanism for the PDF status
2. Create a function that makes GET requests to `/pdfs/pdf-status/:stemUid/:pdfUid`
3. Implement a retry mechanism with appropriate intervals (starting with short intervals and increasing over time)
4. Add a maximum timeout for the polling to prevent infinite loops
5. Parse the response to check if the status is 'ready'
6. Implement logging for each polling attempt
7. Add error handling for network failures during polling
8. Create a utility function to encapsulate the polling logic for reuse

# Test Strategy:
Verify that the polling mechanism correctly handles different status responses, respects the timeout, and successfully detects when a PDF is ready for extraction. Run the test using the existing Playwright setup.

# Subtasks:
## 1. Create basic PDF status retrieval function [pending]
### Dependencies: None
### Description: Implement a function that makes a GET request to the PDF status endpoint to check the processing status of a document
### Details:
Create a function in `pdf.spec.ts` that accepts stemUid and pdfUid parameters and makes a GET request to `/pdfs/pdf-status/:stemUid/:pdfUid`. The function should return the response data containing the PDF processing status. Include basic error handling for network failures and invalid responses. This will serve as the foundation for the polling mechanism.

## 2. Implement exponential backoff utility [pending]
### Dependencies: None
### Description: Create a utility function that calculates increasing time intervals for retry attempts using an exponential backoff strategy
### Details:
Develop a utility function that calculates wait times between polling attempts. Start with a short interval (e.g., 500ms) and increase it exponentially with each attempt. Include a maximum interval cap (e.g., 10 seconds) to prevent excessive wait times. This utility will be used by the polling mechanism to determine how long to wait between status checks.

## 3. Build core polling mechanism [pending]
### Dependencies: 7.1, 7.2
### Description: Create a function that repeatedly checks the PDF status until it's ready or times out
### Details:
Implement a polling function that uses the status retrieval function from subtask 1 and the backoff utility from subtask 2. The function should repeatedly check the PDF status with increasing intervals until either: 1) the status is 'ready', 2) a maximum timeout is reached, or 3) an error occurs. Include a parameter for maximum total polling time (e.g., 2 minutes) to prevent infinite loops. Return the final status or throw an appropriate error.

## 4. Add comprehensive logging and error handling [pending]
### Dependencies: 7.3
### Description: Enhance the polling mechanism with detailed logging and robust error handling
### Details:
Extend the polling mechanism to log each polling attempt, including the attempt number, current wait time, and response status. Implement comprehensive error handling that distinguishes between different types of failures (network errors, server errors, timeout errors) and provides meaningful error messages. Include the ability to retry after certain types of errors but not others.

## 5. Create reusable polling utility and test integration [pending]
### Dependencies: 7.4
### Description: Refactor the polling logic into a reusable utility and integrate it with the test suite
### Details:
Extract the polling logic into a separate utility function that can be reused across different tests. The utility should be configurable with options for initial delay, maximum delay, maximum total time, and custom status checking logic. Update the existing tests in `pdf.spec.ts` to use this utility for PDF status polling. Add test cases that verify the polling behavior with different PDF processing scenarios (immediate completion, delayed completion, failure).

