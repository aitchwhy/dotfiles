# PostHog Implementation Patch

This patch file contains the minimal changes needed to implement PostHog analytics in FloPilot and FloNotes.


## 1. Add PostHog tracking to PDF processing

```diff
--- a/vibes/apps/flonotes/src/hooks/use-process-pdf.ts
+++ b/vibes/apps/flonotes/src/hooks/use-process-pdf.ts
@@ -1,6 +1,7 @@
 import { useMutation } from "@tanstack/react-query";
 import { savePdf, updatePdfExtracts } from "./use-pdf-storage";
 import { processAndGetPdfExtracts } from "../services/noggin-api";
+import { trackEvent } from "../posthog";
 
 export const processPdfsMutationKey = [["pdf", "processPdfs"]];
 
@@ -73,6 +74,14 @@ export function useProcessPdfs() {
           data.stemUid,
           data.pdfUid,
         );
+        
+        // Track PDF processing in PostHog
+        trackEvent('flonote_pdf_added', {
+          pdf_uid: data.pdfUid,
+          stem_uid: data.stemUid,
+          extract_count: data.result.extracts?.length || 0,
+        });
       }
     },
 
```
EOF < /dev/null
## 2. Update editor to add template tracking IDs

```diff
--- a/vibes/apps/flonotes/src/components/shell/notes/editor.tsx
+++ b/vibes/apps/flonotes/src/components/shell/notes/editor.tsx
@@ -52,7 +52,10 @@ const Tiptap = () => {
   const setTemplateContent = (templateKey: keyof typeof templates) => {
     const template = templates[templateKey];
     if (template) {
-      setContent(template.content);
+      // Add data-template-id attribute to the content for tracking purposes
+      const contentWithTemplateId = template.content.replace('<h1>', `<h1 data-template-id="${templateKey}">`); 
+      setContent(contentWithTemplateId);
     }
   };
 
```
EOF < /dev/null
## 3. Update editor callbacks to use PostHog tracking

```diff
--- a/vibes/apps/flonotes/src/components/shell/notes/hooks/use-editor-callbacks.ts
+++ b/vibes/apps/flonotes/src/components/shell/notes/hooks/use-editor-callbacks-updated.ts
@@ -1,6 +1,7 @@
 import { Editor } from "@tiptap/react";
 import { useCallback } from "react";
 import { replaceInsertInfoSpans } from "../utils/editor-utils";
 import { db } from "../../../../indexed-db/db";
 import { useLiveQuery } from "dexie-react-hooks";
 import { useMutation } from "@tanstack/react-query";
 import { createAndWaitForNote } from "../../../../services/noggin-api";
+import { trackEvent } from "../../../../posthog";
 
 /**
  * Sanitizes HTML responses from the LLM to ensure they're compatible with TipTap
  *
  * This handles different formats of HTML that might be returned and extracts
  * the relevant content for insertion into the editor.
  */
 const sanitizeHtml = (html: string): string => {
   // Skip sanitization if html is not a string
   if (typeof html \!== "string") {
     console.error("Invalid HTML received:", html);
     return "<p>Error: Invalid response from LLM service</p>";
   }
 
   // Sometimes the API returns HTML without proper document structure
   // Ensure we have proper HTML structure
   if (\!html.includes("<html>") && \!html.includes("<\!DOCTYPE")) {
     // If we just have fragments, wrap them properly
     if (\!html.includes("<body>")) {
       // This appears to be just HTML fragments, not a complete document
       return html;
     }
   }
 
   // If we got a full HTML document, extract just the body content
   const bodyMatch = html.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
   if (bodyMatch && bodyMatch[1]) {
     return bodyMatch[1].trim();
   }
 
   return html;
 };
 
 export const useEditorCallbacks = (editor: Editor | null) => {
   // Always use direct API calls with React Query
   // This ensures we're using real hooks within the component
   const noteMutation = useMutation({
     // Use the updated function that handles polling automatically
     mutationKey: ["llm.notes"],
     mutationFn: createAndWaitForNote,
   });
 
   const pdfs =
     useLiveQuery(() =>
       db.pdfs.where("documentType").equals("clinical").toArray(),
     ) ?? [];
 
   const handleRunAutoFill = useCallback(async () => {
     if (\!editor) return;
     const currentContent = editor.getHTML();
     console.log("Current content before extraction:", currentContent);
     const extractedContent = replaceInsertInfoSpans(currentContent);
     console.log(
       "Extracted content with replaced QuickFill tags:",
       extractedContent,
     );
+
+    // Check if this is a template run by looking for template markers in the HTML
+    const isTemplateRun = currentContent.includes('data-template-id=');
+    let templateName = "custom";
+    
+    // Extract template name if it's a template run
+    if (isTemplateRun) {
+      const templateMatch = currentContent.match(/data-template-id="([^"]+)"/);
+      if (templateMatch && templateMatch[1]) {
+        templateName = templateMatch[1];
+      }
+    }
+
+    // Track the event in PostHog
+    if (isTemplateRun) {
+      trackEvent('template_reuse', {
+        template_name: templateName,
+        has_pdfs: pdfs.length > 0,
+        pdf_count: pdfs.length,
+      });
+    } else {
+      trackEvent('query_run_without_template', {
+        has_pdfs: pdfs.length > 0,
+        pdf_count: pdfs.length,
+      });
+    }
 
     const extractsArray =
       pdfs
         .filter((pdf) => pdf && pdf.extracts)
         .map((pdf) => {
           return {
             id: pdf.id.toString(),
             extracts: pdf.extracts.result.extracts || [],
           };
         }) || [];
 
     // Find the first PDF that has a stemUid from the server
     const pdfWithStemUid = pdfs.find((pdf) => pdf.stemUid);
 
     // Check if we have a server-provided stemUid
     if (\!pdfWithStemUid?.stemUid) {
       console.error(
         "No stemUid found in PDFs. Cannot create note without a server-assigned stemUid.",
       );
       alert(
         "Error: Cannot create note without processing a PDF first. Please upload a PDF document.",
       );
       return;
     }
 
     const stemUid = pdfWithStemUid.stemUid;
     console.log(
       `Using server-assigned stemUid ${stemUid} from PDF for note creation`,
     );
 
     try {
       console.log(
         "Sending request to LLM with clinicals:",
         extractsArray.length,
         "stemUid:",
         stemUid,
       );
 
       // This now handles the complete flow including polling
       const noteContent = await noteMutation.mutateAsync({
         stemUid,
         clinicals: extractsArray,
         messages: [],
         userMessage: `Write a clinical note by:
 1. Using the following template structure: ${extractedContent}
 2. Replace each {{QuickFill}} placeholder with ONLY the specific information being requested based on context
 3. Each {{QuickFill}} replacement should be brief and focused only on what is asked for in the preceding label
 4. Maintain the exact HTML structure and formatting, unless the {{QuickFill}} replacement calls for an ordered or unordered list (<ol> or <ul>) with list items (<li>)
 5. For EACH piece of information, include a citation tag immediately after the text
 6. Format dates as MM/DD/YYYY
 7. Use consistent medical terminology following [specify standard, e.g. SNOMED CT]
 8. For missing or unclear data, write "[Not documented]"
 9. Flag any critical values with <critical></critical> tags
 10. Validate all numbers are within typical clinical ranges
 11. DO NOT include the entire content of the source - only extract the relevant information
 12. Keep your answers SPECIFIC and CONCISE for each field
 13. Checkbox should be filled in if the information is present from [] to [x], including a citation tag.
 14. Citation tags should exist within a <li> tag if the citation is relevant to a list item.
 
 Citation format:
 - Use <citation fileId="X" extractId="Y" blockIds="Z" /> tags after each piece of information
 - Each {{QuickFill}} should be replaced by ONLY the requested data with appropriate citation(s)
 - Include page numbers in the citation when available
 
 Example input:
 <p><strong>Address:</strong> {{QuickFill}}</p>
 
 Example output with exactly one citation:
 <p><strong>Address:</strong> 123 TOON AVENUE, TOONTOWN, 12345, ARIZONA <citation fileId="1" extractId="abc123" blockIds="1" /></p>
 
 Example input:
 <p><strong>Date of Birth:</strong> {{QuickFill}}</p>
 
 Example output with exactly two citations:
 <p><strong>Date of Birth:</strong> 03/12/1962 <citation fileId="1" extractId="def456" blockIds="1,2" /></p>
 
 Example input:
 <p><strong>ICD-10 Codes:</strong> {{QuickFill}}</p>
 
 Example output with ordered one citation and ordered list of values:
 <p>
     All ICD-10 Codes: C23 <citation extractid="E1" fileid="1" blockids="7"></citation>
     <ol>
         <li>ICD 10 diagnoses: Malignant neoplasm of gallbladder (C23)</li>
         <li>Unspecified asthma, uncomplicated (J45.909)</li>
         <li>Type 2 diabetes mellitus without complications (E11.9)</li>
         <li>Essential (primary) hypertension (I10)</li>
         <li>Depression, unspecified (F32.A)</li>
         <li>Bilateral primary osteoarthritis of hip (M16.0)</li>
         <li>Hypothyroidism, unspecified (E03.9)</li>
         <li>History of falling (Z91.81)</li>
         <li>Long term (current) use of insulin (Z79.4)</li>
         <li>Acquired absence of kidney (Z90.5)</li>
     </ol>
 </p>
 
 Invalid outputs:
 - Adding extra HTML elements, unless the {{QuickFill}} replacement calls for an ordered or unordered list (<ol> or <ul>) with list items (<li>)
 - Changing template structure
 - Omitting citations
 - Free-form text outside template
 - Including information not specifically requested by the field label
 - Returning entire sections or paragraphs when only a specific data point is asked for`,
       });
 
       console.log(
         "Received completed note content from LLM:",
         typeof noteContent === "string"
           ? noteContent.substring(0, 100) + "..."
           : noteContent,
       );
+
+      // Track FloNote creation event in PostHog
+      trackEvent('flonote_created', {
+        template_name: templateName,
+        has_pdfs: pdfs.length > 0,
+        pdf_count: pdfs.length,
+        has_template: isTemplateRun,
+      });
 
       // Clean up the HTML - now we know we have a string from createAndWaitForNote
       const cleanedHtml = sanitizeHtml(noteContent);
       console.log("Cleaned HTML:", cleanedHtml.substring(0, 100) + "...");
 
       // Force a complete content replacement
       editor.commands.clearContent();
       setTimeout(() => {
         console.log("Setting editor content with cleaned response");
         editor.commands.setContent(cleanedHtml);
 
         // Validate content was set
         setTimeout(() => {
           const newContent = editor.getHTML();
           console.log(
             "New editor content after update:",
             newContent.substring(0, 100) +
               (newContent.length > 100 ? "..." : ""),
           );
 
           if (newContent.trim() === "" || newContent === "<p></p>") {
             console.error(
               "Editor content is still empty after update, falling back to direct HTML insertion",
             );
             // As a fallback, try a different approach to insert content
             editor.commands.insertContent(cleanedHtml);
           }
         }, 100);
       }, 100);
     } catch (error) {
       console.error("Error in handleRunAutoFill:", error);
       // Show an error message to the user
       alert(
         `Error generating note: ${error instanceof Error ? error.message : "Unknown error"}`,
       );
     }
   }, [editor, noteMutation, pdfs]);
```
EOF < /dev/null
## 4. Update menu-bar to use updated editor callbacks

```diff
--- a/vibes/apps/flonotes/src/components/shell/notes/components/menu/menu-bar.tsx
+++ b/vibes/apps/flonotes/src/components/shell/notes/components/menu/menu-bar.tsx
@@ -12,7 +12,7 @@ import {
   DropdownMenuTrigger,
   DropdownMenuGroup,
 } from "../../../../../../neuron/react";
-import { useEditorCallbacks } from "../../hooks/use-editor-callbacks";
+import { useEditorCallbacks } from "../../hooks/use-editor-callbacks-updated";
 import { LoadingSpinner } from "../loading-spinner";
 
 interface MenuBarProps {
```
EOF < /dev/null
## 5. Add HelpfulnessRating component 

```diff
--- /dev/null
+++ b/vibes/apps/flonotes/src/components/feedback/helpfulness-rating.tsx
@@ -0,0 +1,89 @@
+import { useState } from 'react';
+import { trackEvent } from '../../posthog';
+
+interface HelpfulnessRatingProps {
+  messageId: string;
+  query: string;
+  response: string;
+}
+
+/**
+ * A thumbs up/down component that allows users to rate the helpfulness of an AI response
+ * Sends the rating, query, and response to PostHog for analytics
+ */
+export function HelpfulnessRating({ messageId, query, response }: HelpfulnessRatingProps) {
+  const [rating, setRating] = useState<'helpful' | 'unhelpful' | null>(null);
+  const [loading, setLoading] = useState(false);
+
+  const handleRating = async (isHelpful: boolean) => {
+    setLoading(true);
+    
+    try {
+      const newRating = isHelpful ? 'helpful' : 'unhelpful';
+      setRating(newRating);
+      
+      // Track the feedback event in PostHog
+      trackEvent('message_feedback', {
+        message_id: messageId,
+        rating: newRating,
+        query,
+        response_length: response.length,
+      });
+    } catch (error) {
+      console.error('Error tracking feedback:', error);
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  return (
+    <div className="flex items-center gap-2 mt-4">
+      <p className="text-sm text-gray-600 mr-2">
+        {rating === null ? 'Was this response helpful?' : 'Thanks for your feedback\!'}
+      </p>
+      
+      {rating === null && (
+        <>
+          <button
+            className="rounded-full p-2 hover:bg-green-100 hover:text-green-800"
+            onClick={() => handleRating(true)}
+            disabled={loading}
+            aria-label="Thumbs Up"
+          >
+            <ThumbsUpIcon className="w-4 h-4" />
+          </button>
+          
+          <button
+            className="rounded-full p-2 hover:bg-red-100 hover:text-red-800"
+            onClick={() => handleRating(false)}
+            disabled={loading}
+            aria-label="Thumbs Down"
+          >
+            <ThumbsDownIcon className="w-4 h-4" />
+          </button>
+        </>
+      )}
+      
+      {rating === 'helpful' && (
+        <span className="text-green-600">
+          <ThumbsUpIcon className="w-4 h-4" />
+        </span>
+      )}
+      
+      {rating === 'unhelpful' && (
+        <span className="text-red-600">
+          <ThumbsDownIcon className="w-4 h-4" />
+        </span>
+      )}
+    </div>
+  );
+}
+
+// Icons omitted for brevity...
```
EOF < /dev/null
## 6. Add CSAT Survey Component

```diff
--- /dev/null
+++ b/vibes/apps/flonotes/src/components/feedback/csat-survey.tsx
@@ -0,0 +1,87 @@
+import { useState } from 'react';
+import { trackEvent } from '../../posthog';
+
+interface CSATSurveyProps {
+  sessionId: string;
+  onClose?: () => void;
+}
+
+/**
+ * A Customer Satisfaction (CSAT) survey component with a 5-point rating scale
+ * Tracks user satisfaction with PostHog events
+ */
+export function CSATSurvey({ sessionId, onClose }: CSATSurveyProps) {
+  const [selectedRating, setSelectedRating] = useState<number | null>(null);
+  const [submitted, setSubmitted] = useState(false);
+  const [feedback, setFeedback] = useState('');
+
+  const handleRatingSelect = (rating: number) => {
+    setSelectedRating(rating);
+  };
+
+  const handleSubmit = () => {
+    if (selectedRating === null) return;
+    
+    // Track the CSAT event in PostHog
+    trackEvent('csat_rating', {
+      session_id: sessionId,
+      rating: selectedRating,
+      feedback: feedback,
+    });
+    
+    setSubmitted(true);
+    
+    // Call onClose after a delay if provided
+    if (onClose) {
+      setTimeout(onClose, 2000);
+    }
+  };
+
+  if (submitted) {
+    return (
+      <div className="bg-white p-4 rounded-lg shadow border border-gray-200 max-w-md">
+        <h3 className="font-medium text-lg mb-2">Thank you for your feedback\!</h3>
+        <p className="text-gray-600 text-sm">Your feedback helps us improve our service.</p>
+      </div>
+    );
+  }
+
+  return (
+    <div className="bg-white p-4 rounded-lg shadow border border-gray-200 max-w-md">
+      <h3 className="font-medium text-lg mb-2">How would you rate your experience?</h3>
+      
+      <div className="flex justify-between mb-4 py-2">
+        {[1, 2, 3, 4, 5].map((rating) => (
+          <button
+            key={rating}
+            className={`flex flex-col items-center justify-center w-12 h-12 rounded-full
+              ${selectedRating === rating 
+                ? 'bg-anterior-500 text-white' 
+                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'}`}
+            onClick={() => handleRatingSelect(rating)}
+            aria-label={`Rating ${rating}`}
+          >
+            <span className="text-lg font-medium">{rating}</span>
+          </button>
+        ))}
+      </div>
+      
+      <div className="flex flex-col gap-2 mb-4">
+        <label className="text-sm text-gray-600">Any additional feedback?</label>
+        <textarea 
+          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-anterior-500"
+          rows={3}
+          placeholder="Tell us more about your experience..."
+          value={feedback}
+          onChange={(e) => setFeedback(e.target.value)}
+        />
+      </div>
+
+      {/* Submit button and labels omitted for brevity */}
+    </div>
+  );
+}
```
EOF < /dev/null