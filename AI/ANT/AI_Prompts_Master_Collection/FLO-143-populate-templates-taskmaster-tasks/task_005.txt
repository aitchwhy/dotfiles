# Task ID: 5
# Title: Implement WebSocket for Run Progress Updates
# Status: pending
# Dependencies: 1, 2
# Priority: medium
# Description: Create WebSocket endpoint to stream progress updates for template runs to the UI.
# Details:
1. Set up WebSocket server in the Gateway API
2. Implement connection handler for `/templates/runs/:run_id` path
3. Create subscription mechanism to receive progress events
4. Broadcast progress updates to connected clients

```typescript
// In routes.ts or a dedicated websocket.ts file
app.ws('/templates/runs/:run_id', (ws, req) => {
  const runId = req.params.run_id;
  
  // Validate run exists
  const run = await runService.findById(runId);
  if (!run) {
    ws.close(1008, 'Run not found');
    return;
  }
  
  // Subscribe to progress events for this run
  const subscription = eventBus.subscribe(`run.${runId}.progress`, (event) => {
    ws.send(JSON.stringify({
      type: 'progress',
      stem_id: event.stemId,
      pct: event.percentComplete,
      message: event.statusMessage
    }));
  });
  
  // Subscribe to completion events
  eventBus.subscribe(`run.${runId}.complete`, (event) => {
    ws.send(JSON.stringify({
      type: 'complete',
      status: event.success ? 'success' : 'error',
      message: event.message
    }));
    
    // Close connection after completion
    setTimeout(() => ws.close(), 1000);
  });
  
  // Handle client disconnect
  ws.on('close', () => {
    subscription.unsubscribe();
  });
});
```

# Test Strategy:
1. Unit test WebSocket connection handling
2. Test event subscription and broadcasting
3. Test connection closure on run completion
4. Integration test with simulated progress events
5. Verify correct message format for progress and completion events
