# Task ID: 10
# Title: Implement End-to-End Integration and Documentation
# Status: pending
# Dependencies: 2, 3, 4, 5, 6, 7, 8, 9
# Priority: medium
# Description: Connect all components, update documentation, and create integration tests for the complete flow.
# Details:
1. Update `README.md` with API documentation
2. Create OpenAPI specification for the endpoints
3. Create integration tests for the complete flow:

```typescript
describe('Template Population E2E', () => {
  let app: Express;
  let db: Database;
  let broker: MessageBroker;
  
  beforeAll(async () => {
    // Setup in-memory database and broker
    db = new InMemoryDatabase();
    broker = new InMemoryMessageBroker();
    
    // Initialize app with dependencies
    app = await createApp({ db, broker });
    
    // Seed test data
    await seedTestData(db);
  });
  
  it('should create a run, emit event, process it, and update status', async () => {
    // 1. Create a run via API
    const createResponse = await request(app)
      .post('/templates/runs')
      .send({
        template_ref: 'ant://test/templates/test-template',
        clinicals_ref: ['ant://test/clinicals/test-clinical.pdf']
      });
    
    expect(createResponse.status).toBe(201);
    expect(createResponse.body).toHaveProperty('stem_id');
    
    const stemId = createResponse.body.stem_id;
    
    // 2. Verify event was emitted
    const events = await broker.getPublishedEvents('template.populate');
    expect(events.length).toBe(1);
    expect(events[0]).toHaveProperty('stemId', stemId);
    
    // 3. Manually trigger the BRRR task handler
    const task = new PopulateTemplateTask(db, broker);
    await task.handle_populate_template(events[0]);
    
    // 4. Verify stem status was updated
    const stemResponse = await request(app)
      .get(`/templates/stems/${stemId}`)
      .send();
    
    expect(stemResponse.status).toBe(200);
    expect(stemResponse.body).toHaveProperty('status', 'complete');
  });
});
```

4. Create a manual testing guide for E2E verification
5. Ensure all components are properly connected and configured
6. Verify CI pipeline passes with all tests

# Test Strategy:
1. End-to-end integration tests covering the complete flow
2. Manual testing following the testing guide
3. Verify documentation accuracy
4. Test with real dependencies in a staging environment
5. Verify WebSocket connections and event streaming
