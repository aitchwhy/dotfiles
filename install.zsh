#!/usr/bin/env zsh

# ========================================================================
# install.zsh - macOS dotfiles installation script
# ========================================================================

set -euo pipefail

# ========================================================================
# Environment Configuration
# ========================================================================
export DOTFILES="${DOTFILES:-$HOME/dotfiles}"
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
export XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
export ZDOTDIR_TARGET="$DOTFILES/config/zsh"
export BACKUP_DIR="$HOME/.dotfiles_backup/$(date +%Y%m%d_%H%M%S)"

# Source utilities
if [[ ! -f "$DOTFILES/utils.sh" ]]; then
  echo "Error: utils.sh not found in $DOTFILES. Please ensure the dotfiles repository is properly cloned."
  exit 1
fi

source "$DOTFILES/utils.sh"
source "$DOTFILES/config/zsh/functions.zsh"

# ========================================================================
# Repository Verification
# ========================================================================
verify_repo_structure() {
  info "Verifying dotfiles repository structure..."

  # Check if dotfiles directory exists
  if [[ ! -d "$DOTFILES" ]]; then
    error "Dotfiles directory not found at $DOTFILES"
    error "Please clone the repository first: git clone <repo-url> $DOTFILES"
    exit 1
  fi

  # Check if it's a git repository
  if [[ ! -d "$DOTFILES/.git" ]]; then
    error "The dotfiles directory is not a git repository"
    error "Please clone the repository properly: git clone <repo-url> $DOTFILES"
    exit 1
  fi

  # Check for critical directories and files
  local missing_items=()

  [[ ! -f "$DOTFILES/Brewfile" ]] && missing_items+=("Brewfile")
  [[ ! -d "$DOTFILES/config" ]] && missing_items+=("config dir")
  [[ ! -d "$DOTFILES/config/zsh" ]] && missing_items+=("config/zsh dir")
  [[ ! -f "$DOTFILES/config/zsh/.zshrc" ]] && missing_items+=("config/zsh/.zshrc file")
  [[ ! -f "$DOTFILES/config/zsh/.zprofile" ]] && missing_items+=("config/zsh/.zprofile file")
  [[ ! -d "$DOTFILES/config/nvim" ]] && missing_items+=("config/nvim dir")

  if (( ${#missing_items[@]} > 0 )); then
    error "The dotfiles repository is missing critical components:"
    for item in "${missing_items[@]}"; do
      error "  - Missing $item"
    done
    error "Please ensure you've cloned the correct repository."
    exit 1
  fi

  success "Repository structure verified successfully"
}

# ========================================================================
# ZSH Setup
# ========================================================================
setup_zsh() {
  info "Setting up ZSH configuration..."

  # Backup existing .zshenv if it exists
  if [[ -f "$HOME/.zshenv" ]]; then
    # backup_file "$HOME/.zshenv"
    rm -f "$HOME/.zshenv"
  fi

  # Create .zshenv in home directory pointing to dotfiles
  info "Creating .zshenv to point to dotfiles ZSH configuration"
  cat >"$HOME/.zshenv" <<EOF
# ZSH configuration bootstrapper
# Auto-generated by dotfiles installation script
export ZDOTDIR="$ZDOTDIR_TARGET"
[[ -f "$ZDOTDIR_TARGET/.zshenv" ]] && source "$ZDOTDIR_TARGET/.zshenv"
EOF

  chmod 644 "$HOME/.zshenv"
  success "Created $HOME/.zshenv pointing to $ZDOTDIR_TARGET"
}

# ========================================================================
# Homebrew Setup
# ========================================================================
setup_homebrew() {
  info "Setting up Homebrew..."

  info "Brew cleanup (scrub)..."
  brew cleanup --scrub

  if [[ ! -x /opt/homebrew/bin/brew ]]; then
    info "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    if is_apple_silicon; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
    else
      eval "$(/usr/local/bin/brew shellenv)"
    fi
  else
    info "Homebrew is already installed"
  fi

  # Update Homebrew
  info "Updating Homebrew..."
  brew update

  # Install from Brewfile
  if [[ -f "$DOTFILES/Brewfile" ]]; then
    info "(sudo) Installing packages from Brewfile..."
    # read -q "answer?Install all Homebrew packages? This may take a while. [y/N] "
    # echo ""
    # sudo -v
    sudo brew bundle install --verbose --global --all --no-lock --cleanup --force
    # sudo -v
    # if [[ "$answer" =~ ^[Yy]$ ]]; then
    #   # Full installation
    #   brew bundle install --file="$DOTFILES/Brewfile" --no-lock
    # else
    #   # Install just essential packages
    #   info "Installing essential packages only..."
    #   brew install starship atuin zoxide bat zsh-syntax-highlighting zsh-autosuggestions fzf git
    # fi
  else
    warn "Brewfile not found at $DOTFILES/Brewfile"
  fi
}

# ========================================================================
# Config File Linking
# ========================================================================
setup_cli_tools() {
  info "Setting up CLI tools configuration..."

  declare -A DOTFILES_TO_SYMLINK_MAP=(
    ["$DOTFILES/config/git/gitconfig"]="$HOME/.gitconfig"
    ["$DOTFILES/config/git/gitignore"]="$HOME/.gitignore"
    ["$DOTFILES/config/starship.toml"]="$XDG_CONFIG_HOME/starship.toml"
    ["$DOTFILES/config/karabiner/karabiner.json"]="$XDG_CONFIG_HOME/karabiner/karabiner.json"
    ["$DOTFILES/config/nvim"]="$XDG_CONFIG_HOME/nvim"
    ["$DOTFILES/config/ghostty"]="$XDG_CONFIG_HOME/ghostty"
    ["$DOTFILES/config/atuin"]="$XDG_CONFIG_HOME/atuin"
    ["$DOTFILES/config/bat"]="$XDG_CONFIG_HOME/bat"
    ["$DOTFILES/config/lazygit"]="$XDG_CONFIG_HOME/lazygit"
    ["$DOTFILES/config/zellij"]="$XDG_CONFIG_HOME/zellij"
    ["$DOTFILES/config/espanso"]="$XDG_CONFIG_HOME/espanso"
    ["$DOTFILES/config/vscode/settings.json"]="$HOME/Library/Application Support/Code/User/settings.json"
    ["$DOTFILES/config/vscode/keybindings.json"]="$HOME/Library/Application Support/Code/User/keybindings.json"
    ["$DOTFILES/config/cursor/settings.json"]="$HOME/Library/Application Support/Cursor/User/settings.json"
    ["$DOTFILES/config/cursor/keybindings.json"]="$HOME/Library/Application Support/Cursor/User/keybindings.json"
    ["$DOTFILES/config/hammerspoon"]="$HOME/.hammerspoon"
    ["$DOTFILES/config/ai/claude/claude_desktop_config.json"]="$HOME/Library/Application Support/Claude/claude_desktop_config.json"
  )

  for src in "${(@k)DOTFILES_TO_SYMLINK_MAP}"; do
    local dst="${DOTFILES_TO_SYMLINK_MAP[$src]}"
    local parent_dir=$(dirname "$dst")

    # Create parent directory if it doesn't exist
    ensure_dir "$parent_dir"

    if [[ -L "$dst" ]]; then
      # If it's already a symlink, update it
      rm -f "$dst"
    elif [[ -e "$dst" ]]; then
      # If it exists as a file or directory, back it up
      # backup_file "$dst"
      rm -rf "$dst"
    fi

    # Create the symlink
    if [[ -e "$src" ]]; then
      ln -sf "$src" "$dst"
      success "Symlinked $dst -> $src source file"
    else
      warn "Source '$src' does not exist, skipping"
    fi
  done
}

# ========================================================================
# macOS System Preferences
# ========================================================================
function setup_macos_preferences() {
  info "Configuring macOS system preferences..."

  # Faster key repeat
  defaults write NSGlobalDomain KeyRepeat -int 2
  defaults write NSGlobalDomain InitialKeyRepeat -int 15

  # Disable press-and-hold for keys in favor of key repeat
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

  # Always show file extensions
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true

  # Don't write .DS_Store files on network drives
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

  # Dock settings
  defaults write com.apple.dock autohide -bool true
  defaults write com.apple.dock autohide-delay -float 0
  defaults write com.apple.dock show-recents -bool false

  # Enable trackpad tap to click
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true

  # Finder settings
  defaults write com.apple.finder AppleShowAllFiles -bool true
  defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
  defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"
  defaults write com.apple.finder ShowPathbar -bool true
  defaults write com.apple.finder ShowStatusBar -bool true
  defaults write com.apple.finder _FXSortFoldersFirst -bool true

  # Restart affected applications
  for app in "Finder" "Dock"; do
    killall "$app" &>/dev/null || true
  done

  success "macOS preferences configured"
}

# ========================================================================
# Main Installation Function
# ========================================================================
main() {
  info "Starting dotfiles setup for macOS..."

  # Check if running on macOS
  if ! is_macos; then
    error "This script is designed for macOS only."
    exit 1
  fi

  # Verify repository structure first
  verify_repo_structure

  # Show install plan
  info "Installation plan:"
  echo "  ✓ Set up ZSH configuration"
  [[ "$NO_BREW" == "false" ]] && echo "  ✓ Set up Homebrew packages"
  echo "  ✓ Configure CLI tools"
  [[ "$NO_MACOS" == "false" ]] && echo "  ✓ Configure macOS preferences"

  # Start installation timer
  local start_time=$(date +%s)

  # Create XDG directories
  ensure_dir "$XDG_CONFIG_HOME"
  ensure_dir "$XDG_CACHE_HOME"
  ensure_dir "$XDG_DATA_HOME"
  ensure_dir "$XDG_STATE_HOME"

  # Setup components
  setup_zsh

  if [[ "$NO_BREW" == "false" ]]; then
    setup_homebrew
  else
    info "Skipping Homebrew setup (--no-brew flag used)"
  fi

  setup_cli_tools

  if [[ "$NO_MACOS" == "false" ]]; then
    setup_macos_preferences
  else
    info "Skipping macOS preferences (--no-macos flag used)"
  fi

  # Calculate time taken
  local end_time=$(date +%s)
  local time_taken=$((end_time - start_time))
  local minutes=$((time_taken / 60))
  local seconds=$((time_taken % 60))

  success "Dotfiles setup complete! 🎉"
  info "Time taken: ${minutes}m ${seconds}s"

  if [[ -d "$BACKUP_DIR" && "$(ls -A "$BACKUP_DIR" 2>/dev/null)" ]]; then
    local backup_size=$(du -sh "$BACKUP_DIR" | cut -f1)
    info "Backup created at $BACKUP_DIR ($backup_size)"
  fi

  info "Please log out and log back in, or restart your computer for all changes to take effect."
  info "To finish setting up your shell, run: exec zsh"
}

# Parse command-line arguments
parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --no-brew)
        NO_BREW=true
        shift
        ;;
      --no-macos)
        NO_MACOS=true
        shift
        ;;
      --minimal)
        MINIMAL=true
        shift
        ;;
      --help)
        echo "Usage: $0 [options]"
        echo "Options:"
        echo "  --no-brew     Skip Homebrew installation and updates"
        echo "  --no-macos    Skip macOS preferences configuration"
        echo "  --minimal     Install only essential configurations"
        echo "  --help        Show this help message"
        exit 0
        ;;
      *)
        echo "Unknown option: $1"
        shift
        ;;
    esac
  done
}

# Initialize optional flags
NO_BREW=false
NO_MACOS=false
MINIMAL=false

# Run the script
parse_args "$@"
main "$@"
