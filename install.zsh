#!/usr/bin/env zsh
# install.zsh - macOS dotfiles installation script
# Expects dotfiles repo to already be cloned at ~/dotfiles

set -euo pipefail

# -----------------------------------------------------------------------------
# Environment Configuration
# -----------------------------------------------------------------------------
export DOTFILES="${DOTFILES:-$HOME/dotfiles}"
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
export XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
export ZDOTDIR_TARGET="$DOTFILES/config/zsh"
export BACKUP_DIR="$HOME/.dotfiles_backup/$(date +%Y%m%d_%H%M%S)"

# Source utilities
if [[ ! -f "$DOTFILES/utils.sh" ]]; then
  echo "Error: utils.sh not found in $DOTFILES. Please ensure the dotfiles repository is properly cloned."
  exit 1
fi

source "$DOTFILES/utils.sh"

# -----------------------------------------------------------------------------
# Verify Repository Structure
# -----------------------------------------------------------------------------
verify_repo_structure() {
  info "Verifying dotfiles repository structure..."
  
  # Check if dotfiles directory exists
  if [[ ! -d "$DOTFILES" ]]; then
    error "Dotfiles directory not found at $DOTFILES"
    error "Please clone the repository first: git clone <repo-url> $DOTFILES"
    exit 1
  fi
  
  # Check if it's a git repository
  if [[ ! -d "$DOTFILES/.git" ]]; then
    error "The dotfiles directory is not a git repository"
    error "Please clone the repository properly: git clone <repo-url> $DOTFILES"
    exit 1
  fi
  
  # Check for critical directories and files
  local missing_items=()
  
  [[ ! -d "$DOTFILES/config" ]] && missing_items+=("config directory")
  [[ ! -d "$DOTFILES/config/zsh" ]] && missing_items+=("config/zsh directory")
  [[ ! -f "$DOTFILES/config/zsh/.zshenv" ]] && missing_items+=("config/zsh/.zshenv file")
  [[ ! -f "$DOTFILES/config/zsh/.zshrc" ]] && missing_items+=("config/zsh/.zshrc file")
  [[ ! -f "$DOTFILES/config/zsh/.zprofile" ]] && missing_items+=("config/zsh/.zprofile file")
  [[ ! -f "$DOTFILES/Brewfile" ]] && missing_items+=("Brewfile")
  
  if (( ${#missing_items[@]} > 0 )); then
    error "The dotfiles repository is missing critical components:"
    for item in "${missing_items[@]}"; do
      error "  - Missing $item"
    done
    error "Please ensure you've cloned the correct repository."
    exit 1
  fi
  
  success "Repository structure verified successfully"
}

# -----------------------------------------------------------------------------
# ZSH Setup
# -----------------------------------------------------------------------------
setup_zsh() {
  info "Setting up ZSH configuration..."
  
  # Backup existing .zshenv if it exists
  if [[ -f "$HOME/.zshenv" ]]; then
    backup_file "$HOME/.zshenv"
    rm -f "$HOME/.zshenv"
  fi
  
  # Create .zshenv in home directory pointing to dotfiles
  info "Creating .zshenv to point to dotfiles ZSH configuration"
  cat > "$HOME/.zshenv" <<EOF
# ZSH configuration bootstrapper
# Auto-generated by dotfiles installation script
export ZDOTDIR="$ZDOTDIR_TARGET"
[[ -f "\$ZDOTDIR/.zshenv" ]] && source "\$ZDOTDIR/.zshenv"
EOF
  
  chmod 644 "$HOME/.zshenv"
  success "Created $HOME/.zshenv pointing to $ZDOTDIR_TARGET"
  
  # Ensure XDG config directory exists
  ensure_dir "$XDG_CONFIG_HOME"
  
  # Link ZSH config dir to XDG location for compatibility
  if [[ -e "$XDG_CONFIG_HOME/zsh" || -L "$XDG_CONFIG_HOME/zsh" ]]; then
    backup_file "$XDG_CONFIG_HOME/zsh"
    rm -rf "$XDG_CONFIG_HOME/zsh"
  fi
  
  # Create symlink to the zsh config directory
  ln -sf "$ZDOTDIR_TARGET" "$XDG_CONFIG_HOME/zsh"
  success "Linked ZSH configuration to $XDG_CONFIG_HOME/zsh"
}

# -----------------------------------------------------------------------------
# Homebrew Setup
# -----------------------------------------------------------------------------
setup_homebrew() {
  info "Setting up Homebrew..."

  if ! has_command brew; then
    info "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    if is_apple_silicon; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
    else
      eval "$(/usr/local/bin/brew shellenv)"
    fi
  else
    info "Homebrew is already installed"
  fi

  # Update Homebrew
  info "Updating Homebrew..."
  brew update

  # Install from Brewfile
  if [[ -f "$DOTFILES/Brewfile" ]]; then
    info "Installing packages from Brewfile..."
    # Ask user if they want to install all packages (could take time) or just essentials
    local answer
    read -q "answer?Install all Homebrew packages? This may take a while. [y/N] "
    echo ""
    
    if [[ "$answer" =~ ^[Yy]$ ]]; then
      # Full installation
      brew bundle install --file="$DOTFILES/Brewfile" --no-lock
    else
      # Install just essential packages for dotfiles to work
      info "Installing essential packages only..."
      brew install starship atuin zoxide bat zsh-syntax-highlighting zsh-autosuggestions fzf git
    fi
  else
    warn "Brewfile not found at $DOTFILES/Brewfile"
  fi
}

# -----------------------------------------------------------------------------
# CLI Tools Configuration
# -----------------------------------------------------------------------------
setup_cli_tools() {
  info "Setting up CLI tools configuration..."
  
  # Ghostty terminal
  if [[ -d "$DOTFILES/config/ghostty" ]]; then
    ensure_dir "$XDG_CONFIG_HOME/ghostty"
    
    if [[ -f "$DOTFILES/config/ghostty/config" ]]; then
      make_link "$DOTFILES/config/ghostty/config" "$XDG_CONFIG_HOME/ghostty/config"
    fi
  fi

  # Starship prompt
  if [[ -f "$DOTFILES/config/starship.toml" ]]; then
    ensure_dir "$XDG_CONFIG_HOME"
    make_link "$DOTFILES/config/starship.toml" "$XDG_CONFIG_HOME/starship.toml"
  fi
  
  # Atuin shell history
  if [[ -d "$DOTFILES/config/atuin" ]]; then
    ensure_dir "$XDG_CONFIG_HOME/atuin"
    make_link "$DOTFILES/config/atuin/config.toml" "$XDG_CONFIG_HOME/atuin/config.toml"
  fi
  
  # Bat (cat replacement)
  if [[ -d "$DOTFILES/config/bat" ]]; then
    ensure_dir "$XDG_CONFIG_HOME/bat"
    make_link "$DOTFILES/config/bat/config" "$XDG_CONFIG_HOME/bat/config"
  fi
  
  # Zellij terminal multiplexer
  if [[ -d "$DOTFILES/config/zellij" ]]; then
    ensure_dir "$XDG_CONFIG_HOME/zellij"
    make_link "$DOTFILES/config/zellij/config.kdl" "$XDG_CONFIG_HOME/zellij/config.kdl"
  fi
}

# -----------------------------------------------------------------------------
# GUI Apps Configuration
# -----------------------------------------------------------------------------
setup_gui_apps() {
  info "Setting up GUI applications configuration..."
  
  # Karabiner (keyboard customization)
  if [[ -d "$DOTFILES/config/karabiner" ]]; then
    ensure_dir "$XDG_CONFIG_HOME/karabiner"
    make_link "$DOTFILES/config/karabiner/karabiner.json" "$XDG_CONFIG_HOME/karabiner/karabiner.json"
  fi
  
  # VS Code
  if [[ -d "$DOTFILES/config/vscode" ]]; then
    ensure_dir "$HOME/Library/Application Support/Code/User"
    make_link "$DOTFILES/config/vscode/settings.json" "$HOME/Library/Application Support/Code/User/settings.json"
    make_link "$DOTFILES/config/vscode/keybindings.json" "$HOME/Library/Application Support/Code/User/keybindings.json"
  fi
  
  # Cursor (VS Code-based editor)
  if [[ -d "$DOTFILES/config/cursor" ]]; then
    ensure_dir "$HOME/Library/Application Support/Cursor/User"
    make_link "$DOTFILES/config/cursor/settings.json" "$HOME/Library/Application Support/Cursor/User/settings.json"
    make_link "$DOTFILES/config/cursor/keybindings.json" "$HOME/Library/Application Support/Cursor/User/keybindings.json"
  fi
  
  # Hammerspoon
  if [[ -d "$DOTFILES/config/hammerspoon" ]]; then
    ensure_dir "$HOME/.hammerspoon"
    make_link "$DOTFILES/config/hammerspoon/init.lua" "$HOME/.hammerspoon/init.lua"
  fi
  
  # Claude Desktop
  if [[ -d "$DOTFILES/config/ai/claude" ]]; then
    ensure_dir "$HOME/Library/Application Support/Claude"
    make_link "$DOTFILES/config/ai/claude/claude_desktop_config.json" "$HOME/Library/Application Support/Claude/claude_desktop_config.json"
  fi
}

# -----------------------------------------------------------------------------
# macOS System Preferences
# -----------------------------------------------------------------------------
setup_macos_preferences() {
  info "Configuring macOS system preferences..."
  
  # Faster key repeat
  defaults write NSGlobalDomain KeyRepeat -int 2
  defaults write NSGlobalDomain InitialKeyRepeat -int 15
  
  # Disable press-and-hold for keys in favor of key repeat
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
  
  # Always show file extensions
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true
  
  # Don't write .DS_Store files on network drives
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
  
  # Dock settings
  defaults write com.apple.dock autohide -bool true
  defaults write com.apple.dock autohide-delay -float 0
  defaults write com.apple.dock show-recents -bool false
  
  # Enable trackpad tap to click
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  
  # Finder settings
  defaults write com.apple.finder AppleShowAllFiles -bool true
  defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
  defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"
  defaults write com.apple.finder ShowPathbar -bool true
  defaults write com.apple.finder ShowStatusBar -bool true
  defaults write com.apple.finder _FXSortFoldersFirst -bool true
  
  # Restart affected applications
  for app in "Finder" "Dock"; do
    killall "$app" &>/dev/null || true
  done
  
  success "macOS preferences configured"
}

# -----------------------------------------------------------------------------
# Development Environment Setup
# -----------------------------------------------------------------------------
setup_dev_environment() {
  info "Setting up development environment..."
  
  # Ensure development directories exist
  ensure_dir "$HOME/Projects"
  ensure_dir "$HOME/go/bin"
  
  # Setup git config if not already configured
  if [[ ! -f "$HOME/.gitconfig" ]]; then
    info "Setting up initial Git configuration..."
    
    local git_name git_email
    vared -p "Enter your Git name: " -c git_name
    vared -p "Enter your Git email: " -c git_email
    
    # Validate inputs
    if [[ -z "$git_name" || -z "$git_email" ]]; then
      warn "Git configuration skipped due to empty inputs"
    else
      git config --global user.name "$git_name"
      git config --global user.email "$git_email"
      git config --global init.defaultBranch main
      git config --global core.editor "$(which nvim || which vim)"
      git config --global pull.rebase true
      
      # Set up Git aliases
      git config --global alias.co checkout
      git config --global alias.br branch
      git config --global alias.ci commit
      git config --global alias.st status
      git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
      
      success "Git configured with name, email, and useful aliases"
    fi
  fi
  
  # Install or update developer tools
  # if has_command pyenv; then
  #   info "Setting up Python environment with pyenv..."
    
  #   # Check for latest Python version
  #   local latest_python=$(pyenv install --list | grep -v "[a-z]" | grep -v - | tail -1 | tr -d '[:space:]')
  #   local stable_python="3.12" # Fallback stable version
    
  #   info "Latest Python version: $latest_python"
  #   info "Installing Python $stable_python as the stable version..."
    
  #   pyenv install --skip-existing $stable_python
  #   pyenv global $stable_python
    
  #   # Install essential Python packages
  #   info "Installing essential Python packages..."
  #   if has_command pip; then
  #     pip install --upgrade pip
  #     pip install pipx
  #     pipx ensurepath
  #     pipx install poetry
  #     pipx install black
  #     pipx install ruff
  #   fi
  # fi
  
  # if has_command fnm; then
  #   info "Setting up Node.js environment with fnm..."
  #   fnm install --lts
  #   fnm default lts-latest
    
  #   # Install essential global npm packages
  #   if has_command npm; then
  #     info "Installing essential npm packages..."
  #     npm install -g npm@latest
  #     npm install -g typescript tldr http-server
  #   fi
  # fi
  
  # Set up Rust if rustup is installed
  if has_command rustup; then
    info "Setting up Rust environment..."
    rustup update
    rustup component add clippy rustfmt
  fi
}

# -----------------------------------------------------------------------------
# Additional Configuration for Optional Tools
# -----------------------------------------------------------------------------
setup_optional_tools() {
  info "Setting up optional tools..."
  
  # Neovim
  ln -sf "$DOTFILES/config/nvim" "$XDG_CONFIG_HOME/nvim"


  # if [[ -d "$DOTFILES/config/nvim" ]]; then
  #   ensure_dir "$XDG_CONFIG_HOME/nvim"
    
  #   # Link critical Neovim files
  #   if [[ -f "$DOTFILES/config/nvim/init.lua" ]]; then
  #     make_link "$DOTFILES/config/nvim/init.lua" "$XDG_CONFIG_HOME/nvim/init.lua"
  #   fi
    
  #   # Link other Neovim config files
  #   for file in "$DOTFILES/config/nvim/"*.{json,md,vim}; do
  #     if [[ -f "$file" ]]; then
  #       local filename=$(basename "$file")
  #       make_link "$file" "$XDG_CONFIG_HOME/nvim/$filename"
  #     fi
  #   done
    
  #   # Recursively link lua directory if it exists
  #   if [[ -d "$DOTFILES/config/nvim/lua" ]]; then
  #     ensure_dir "$XDG_CONFIG_HOME/nvim/lua"
      
  #     # Find all lua files and link them
  #     find "$DOTFILES/config/nvim/lua" -type f -name "*.lua" | while read -r file; do
  #       local rel_path="${file#$DOTFILES/config/nvim/}"
  #       local target_dir="$(dirname "$XDG_CONFIG_HOME/nvim/$rel_path")"
  #       ensure_dir "$target_dir"
  #       make_link "$file" "$XDG_CONFIG_HOME/nvim/$rel_path"
  #     done
  #   fi
  # fi
  
  # Espanso text expander
  if [[ -d "$DOTFILES/config/espanso" ]]; then
    ensure_dir "$XDG_CONFIG_HOME/espanso/match"
    ensure_dir "$XDG_CONFIG_HOME/espanso/config"
    
    if [[ -f "$DOTFILES/config/espanso/match/base.yml" ]]; then
      make_link "$DOTFILES/config/espanso/match/base.yml" "$XDG_CONFIG_HOME/espanso/match/base.yml"
    fi
    
    if [[ -f "$DOTFILES/config/espanso/config/default.yml" ]]; then
      make_link "$DOTFILES/config/espanso/config/default.yml" "$XDG_CONFIG_HOME/espanso/config/default.yml"
    fi
  fi
  
}

# -----------------------------------------------------------------------------
# Main Setup Function
# -----------------------------------------------------------------------------
main() {
  info "Starting dotfiles setup for macOS..."
  
  # Check if running on macOS
  if ! is_macos; then
    error "This script is designed for macOS only."
    exit 1
  fi
  
  # Verify repository structure first
  verify_repo_structure
  
  # Show install plan
  info "Installation plan:"
  echo "  ✓ Set up ZSH configuration"
  [[ "$NO_BREW" == "false" ]] && echo "  ✓ Set up Homebrew packages"
  echo "  ✓ Configure CLI tools"
  echo "  ✓ Configure GUI applications"
  [[ "$NO_MACOS" == "false" ]] && echo "  ✓ Configure macOS preferences"
  [[ "$MINIMAL" == "false" ]] && echo "  ✓ Set up development environment"
  [[ "$MINIMAL" == "false" ]] && echo "  ✓ Configure optional tools"
  echo ""
  
  # Ask for confirmation
  local answer
  read -q "answer?Continue with installation? [Y/n] "
  echo ""
  
  if [[ ! "$answer" =~ ^[Yy]$ && ! -z "$answer" ]]; then
    info "Installation cancelled by user"
    exit 0
  fi
  
  # Start installation timer
  local start_time=$(date +%s)
  
  # Create XDG directories
  ensure_dir "$XDG_CONFIG_HOME"
  ensure_dir "$XDG_CACHE_HOME"
  ensure_dir "$XDG_DATA_HOME"
  ensure_dir "$XDG_STATE_HOME"
  
  # Setup components
  setup_zsh
  
  if [[ "$NO_BREW" == "false" ]]; then
    setup_homebrew
  else
    info "Skipping Homebrew setup (--no-brew flag used)"
  fi
  
  setup_cli_tools
  # setup_gui_apps
  
  if [[ "$NO_MACOS" == "false" ]]; then
    setup_macos_preferences
  else
    info "Skipping macOS preferences (--no-macos flag used)"
  fi
  
  if [[ "$MINIMAL" == "false" ]]; then
    setup_dev_environment
    setup_optional_tools
  else
    info "Skipping additional tools (--minimal flag used)"
  fi
  
  # Calculate time taken
  local end_time=$(date +%s)
  local time_taken=$((end_time - start_time))
  local minutes=$((time_taken / 60))
  local seconds=$((time_taken % 60))
  
  success "Dotfiles setup complete! 🎉"
  info "Time taken: ${minutes}m ${seconds}s"
  
  if [[ -d "$BACKUP_DIR" && "$(ls -A "$BACKUP_DIR" 2>/dev/null)" ]]; then
    local backup_size=$(du -sh "$BACKUP_DIR" | cut -f1)
    info "Backup created at $BACKUP_DIR ($backup_size)"
  fi
  
  info "Please log out and log back in, or restart your computer for all changes to take effect."
  info "To finish setting up your shell, run: exec zsh"
}

# Parse command-line arguments
parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --no-brew)
        NO_BREW=true
        shift
        ;;
      --no-macos)
        NO_MACOS=true
        shift
        ;;
      --minimal)
        MINIMAL=true
        shift
        ;;
      --help)
        echo "Usage: $0 [options]"
        echo "Options:"
        echo "  --no-brew     Skip Homebrew installation and updates"
        echo "  --no-macos    Skip macOS preferences configuration"
        echo "  --minimal     Install only essential configurations"
        echo "  --help        Show this help message"
        exit 0
        ;;
      *)
        warn "Unknown option: $1"
        shift
        ;;
    esac
  done
}

# Initialize optional flags
NO_BREW=false
NO_MACOS=false
MINIMAL=false

# Run if script is executed directly
if [[ "${(%):-%x}" == "${0:A}" ]]; then
  parse_args "$@"
  main "$@"
fi

