"use strict";var C=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var k=Object.prototype.hasOwnProperty;var U=(e,s)=>{for(var g in s)C(e,g,{get:s[g],enumerable:!0})},v=(e,s,g,i)=>{if(s&&typeof s=="object"||typeof s=="function")for(let n of F(s))!k.call(e,n)&&n!==g&&C(e,n,{get:()=>s[n],enumerable:!(i=P(s,n))||i.enumerable});return e};var H=e=>v(C({},"__esModule",{value:!0}),e);var w={};U(w,{default:()=>L});module.exports=H(w);var I=require("child_process");async function L(e){let s=e.maxDiffLines||100;return new Promise((g,i)=>{let n=r=>new Promise((a,l)=>{(0,I.exec)(r,{cwd:e.path},(o,d,f)=>{o?l(f.trim()||o.message):a(d.trim())})}),y=r=>{let a=r.split(`
`);if(a.length<=s)return r;let l=Math.floor(s/2),o=a.slice(0,l),d=a.slice(-l);return[...o,`... truncated ${a.length-s} lines ...`,...d].join(`
`)},S=[e.onlyIncludeStagedChanges?Promise.resolve(""):n("git diff"),e.onlyIncludeStagedChanges?n("git diff --staged"):Promise.resolve(""),e.onlyIncludeStagedChanges?Promise.resolve(""):n("git ls-files --others --exclude-standard"),n("git status --porcelain"),e.onlyIncludeStagedChanges?Promise.resolve(""):n("git diff HEAD"),n("git diff --shortstat HEAD")];Promise.all(S).then(([r,a,l,o,d,f])=>{let h=l?l.split(`
`).filter(Boolean):[],p=o.split(`
`).filter(Boolean),c=p.filter(t=>t[0]!==" "&&t[0]!=="?").map(t=>t.substring(3)),u=p.filter(t=>t[1]!==" "||t.startsWith("??")).map(t=>t.substring(3)),m=f.match(/(\d+) files? changed(?:, (\d+) insertions?\(\+\))?(?:, (\d+) deletions?\(-\))?/),b={filesChanged:parseInt(m?.[1]||"0"),insertions:parseInt(m?.[2]||"0"),deletions:parseInt(m?.[3]||"0")},D=y(a),x=e.onlyIncludeStagedChanges?"":y(r);if(e.onlyIncludeStagedChanges&&c.length===0){i("No staged changes found in the repository.");return}if(!e.onlyIncludeStagedChanges&&c.length===0&&u.length===0&&h.length===0){i("No changes found in the repository.");return}console.log("Staged files:",c),console.log("Unstaged files:",u),console.log("Untracked files:",h),console.log("Status:",o),console.log("All changes:",d),console.log("Stats:",f),g({path:e.path,changes:{unstagedChanges:x,stagedChanges:D,untrackedFiles:h,untrackedDiff:h.join(`
`),status:o},summary:{hasUnstagedChanges:u.length>0,hasStagedChanges:c.length>0,hasUntrackedFiles:h.length>0,totalFiles:c.length+u.length+h.length,stats:b}})}).catch(i)})}
