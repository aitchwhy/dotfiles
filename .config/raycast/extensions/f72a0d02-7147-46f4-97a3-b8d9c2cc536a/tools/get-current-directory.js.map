{
  "version": 3,
  "sources": ["../../src/tools/get-current-directory.ts"],
  "sourcesContent": ["import { exec } from \"child_process\";\n\ntype Input = {\n  /**\n   * The directory path to check (optional, defaults to Finder path if available, otherwise current directory)\n   */\n  path?: string;\n};\n\n/**\n * Gets the current working directory and verifies if it's a git repository\n * By default, tries to get the current Finder path first\n */\nexport default async function (input: Input) {\n  return new Promise((resolve, reject) => {\n    // If path is provided, use it directly\n    if (input.path) {\n      exec(\"git rev-parse --git-dir\", { cwd: input.path }, (error, stdout) => {\n        if (error) {\n          reject(\n            `This directory ${input.path} is not a git repository. Initialize a new repository with 'git init' first, or provide a correct path to an existing git repository.`,\n          );\n          return;\n        }\n\n        resolve({\n          path: input.path,\n          gitDir: stdout.trim(),\n        });\n      });\n      return;\n    }\n\n    // Otherwise, try to get Finder path first\n    const script = `\n      tell application \"Finder\"\n        if (count of windows) > 0 then\n          get POSIX path of (target of front window as alias)\n        end if\n      end tell\n    `;\n\n    exec(`osascript -e '${script}'`, (_, stdout) => {\n      const finderPath = stdout.trim();\n      const currentDir = finderPath || process.cwd();\n\n      // Check if it's a git repository\n      exec(\"git rev-parse --git-dir\", { cwd: currentDir }, (error, stdout) => {\n        if (error) {\n          reject(\n            `This directory ${currentDir} is not a git repository. Initialize a new repository with 'git init' first, or provide a correct path to an existing git repository.`,\n          );\n          return;\n        }\n\n        resolve({\n          path: currentDir,\n          gitDir: stdout.trim(),\n        });\n      });\n    });\n  });\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAqB,yBAarB,eAAOF,EAAwBG,EAAc,CAC3C,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CAEtC,GAAIF,EAAM,KAAM,IACd,QAAK,0BAA2B,CAAE,IAAKA,EAAM,IAAK,EAAG,CAACG,EAAOC,IAAW,CACtE,GAAID,EAAO,CACTD,EACE,kBAAkBF,EAAM,IAAI,uIAC9B,EACA,MACF,CAEAC,EAAQ,CACN,KAAMD,EAAM,KACZ,OAAQI,EAAO,KAAK,CACtB,CAAC,CACH,CAAC,EACD,MACF,IAWA,QAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4B,CAACC,EAAGD,IAAW,CAE9C,IAAME,EADaF,EAAO,KAAK,GACE,QAAQ,IAAI,KAG7C,QAAK,0BAA2B,CAAE,IAAKE,CAAW,EAAG,CAACH,EAAOC,IAAW,CACtE,GAAID,EAAO,CACTD,EACE,kBAAkBI,CAAU,uIAC9B,EACA,MACF,CAEAL,EAAQ,CACN,KAAMK,EACN,OAAQF,EAAO,KAAK,CACtB,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAAC,CACH",
  "names": ["get_current_directory_exports", "__export", "get_current_directory_default", "__toCommonJS", "import_child_process", "input", "resolve", "reject", "error", "stdout", "_", "currentDir"]
}
