{
  "version": 3,
  "sources": ["../../src/tools/get-git-changes.ts"],
  "sourcesContent": ["import { exec } from \"child_process\";\n\ntype Input = {\n  /**\n   * The repository path (required)\n   */\n  path: string;\n  /**\n   * Whether to only include staged changes\n   * @default false - include all changes (staged, unstaged, and untracked)\n   */\n  onlyIncludeStagedChanges: boolean;\n  /**\n   * Maximum number of lines to include in each diff\n   * @default 100 - limits each diff to 100 lines\n   */\n  maxDiffLines?: number;\n};\n\nexport type GitChanges = {\n  path: string;\n  changes: {\n    unstagedChanges: string;\n    stagedChanges: string;\n    untrackedFiles: string[];\n    untrackedDiff: string;\n    status: string;\n  };\n  summary: {\n    hasUnstagedChanges: boolean;\n    hasStagedChanges: boolean;\n    hasUntrackedFiles: boolean;\n    totalFiles: number;\n    stats: {\n      insertions: number;\n      deletions: number;\n      filesChanged: number;\n    };\n  };\n};\n\n/**\n * Gets all types of git changes in a repository:\n * - Staged changes\n * - Unstaged changes (if stagedOnly is false)\n * - Untracked files\n *\n * For large changes:\n * - Limits diff output to maxDiffLines (default 100)\n * - Provides statistics about insertions/deletions\n * - Shows total number of files changed\n */\nexport default async function (input: Input): Promise<GitChanges> {\n  const maxLines = input.maxDiffLines || 100;\n\n  return new Promise((resolve, reject) => {\n    // Helper function to execute git commands\n    const execGit = (command: string): Promise<string> => {\n      return new Promise((resolve, reject) => {\n        exec(command, { cwd: input.path }, (error, stdout, stderr) => {\n          if (error) {\n            reject(stderr.trim() || error.message);\n          } else {\n            resolve(stdout.trim());\n          }\n        });\n      });\n    };\n\n    // Helper function to truncate diff output\n    const truncateDiff = (diff: string): string => {\n      const lines = diff.split(\"\\n\");\n      if (lines.length <= maxLines) return diff;\n\n      const halfMax = Math.floor(maxLines / 2);\n      const firstHalf = lines.slice(0, halfMax);\n      const lastHalf = lines.slice(-halfMax);\n\n      return [...firstHalf, `... truncated ${lines.length - maxLines} lines ...`, ...lastHalf].join(\"\\n\");\n    };\n\n    // Get changes based on mode\n    const commands = [\n      !input.onlyIncludeStagedChanges ? execGit(\"git diff\") : Promise.resolve(\"\"), // unstaged changes for tracked files\n      input.onlyIncludeStagedChanges ? execGit(\"git diff --staged\") : Promise.resolve(\"\"), // staged changes\n      !input.onlyIncludeStagedChanges ? execGit(\"git ls-files --others --exclude-standard\") : Promise.resolve(\"\"), // untracked files\n      execGit(\"git status --porcelain\"), // status\n      !input.onlyIncludeStagedChanges ? execGit(\"git diff HEAD\") : Promise.resolve(\"\"), // all changes including untracked\n      execGit(\"git diff --shortstat HEAD\"), // get statistics\n    ];\n\n    Promise.all(commands)\n      .then(([unstaged, staged, untracked, status, allChanges, stats]) => {\n        const untrackedFiles = untracked ? untracked.split(\"\\n\").filter(Boolean) : [];\n        const statusLines = status.split(\"\\n\").filter(Boolean);\n\n        // Parse status to get staged vs unstaged files\n        const stagedFiles = statusLines\n          .filter((line) => line[0] !== \" \" && line[0] !== \"?\")\n          .map((line) => line.substring(3));\n\n        // Include both modified and untracked files in unstaged\n        const unstagedFiles = statusLines\n          .filter((line) => line[1] !== \" \" || line.startsWith(\"??\"))\n          .map((line) => line.substring(3));\n\n        // Parse git diff --shortstat\n        const statsMatch = stats.match(\n          /(\\d+) files? changed(?:, (\\d+) insertions?\\(\\+\\))?(?:, (\\d+) deletions?\\(-\\))?/,\n        );\n        const statsData = {\n          filesChanged: parseInt(statsMatch?.[1] || \"0\"),\n          insertions: parseInt(statsMatch?.[2] || \"0\"),\n          deletions: parseInt(statsMatch?.[3] || \"0\"),\n        };\n\n        // Filter and truncate diffs\n        const stagedDiff = truncateDiff(staged);\n        const unstagedDiff = input.onlyIncludeStagedChanges ? \"\" : truncateDiff(unstaged);\n\n        if (input.onlyIncludeStagedChanges && stagedFiles.length === 0) {\n          reject(\"No staged changes found in the repository.\");\n          return;\n        }\n\n        if (\n          !input.onlyIncludeStagedChanges &&\n          stagedFiles.length === 0 &&\n          unstagedFiles.length === 0 &&\n          untrackedFiles.length === 0\n        ) {\n          reject(\"No changes found in the repository.\");\n          return;\n        }\n\n        console.log(\"Staged files:\", stagedFiles);\n        console.log(\"Unstaged files:\", unstagedFiles);\n        console.log(\"Untracked files:\", untrackedFiles);\n        console.log(\"Status:\", status);\n        console.log(\"All changes:\", allChanges);\n        console.log(\"Stats:\", stats);\n\n        resolve({\n          path: input.path,\n          changes: {\n            unstagedChanges: unstagedDiff,\n            stagedChanges: stagedDiff,\n            untrackedFiles,\n            untrackedDiff: untrackedFiles.join(\"\\n\"),\n            status,\n          },\n          summary: {\n            hasUnstagedChanges: unstagedFiles.length > 0,\n            hasStagedChanges: stagedFiles.length > 0,\n            hasUntrackedFiles: untrackedFiles.length > 0,\n            totalFiles: stagedFiles.length + unstagedFiles.length + untrackedFiles.length,\n            stats: statsData,\n          },\n        });\n      })\n      .catch(reject);\n  });\n}\n"],
  "mappings": "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",
  "names": ["get_git_changes_exports", "__export", "get_git_changes_default", "__toCommonJS", "import_child_process", "input", "maxLines", "resolve", "reject", "execGit", "command", "error", "stdout", "stderr", "truncateDiff", "diff", "lines", "halfMax", "firstHalf", "lastHalf", "commands", "unstaged", "staged", "untracked", "status", "allChanges", "stats", "untrackedFiles", "statusLines", "stagedFiles", "line", "unstagedFiles", "statsMatch", "statsData", "stagedDiff", "unstagedDiff"]
}
