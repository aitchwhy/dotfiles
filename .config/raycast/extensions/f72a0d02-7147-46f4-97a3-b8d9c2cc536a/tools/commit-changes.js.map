{
  "version": 3,
  "sources": ["../../src/tools/commit-changes.ts"],
  "sourcesContent": ["import { exec } from \"child_process\";\nimport { Tool } from \"@raycast/api\";\n\ntype Input = {\n  /**\n   * The commit message to use\n   */\n  message: string;\n  /**\n   * The repository path (required)\n   */\n  path: string;\n  /**\n   * Whether to stage all changes before committing\n   */\n  stageAll: boolean;\n};\n\n/**\n * Creates a git commit with the provided message.\n * Requires path and isGitRepo to be provided from get-current-directory tool first.\n */\nexport default async function (input: Input) {\n  return new Promise((resolve, reject) => {\n    // Helper function to execute git commands\n    const execGit = (command: string): Promise<string> => {\n      return new Promise((resolve, reject) => {\n        exec(command, { cwd: input.path }, (error, stdout, stderr) => {\n          if (error) {\n            reject(stderr.trim() || error.message);\n          } else {\n            resolve(stdout.trim());\n          }\n        });\n      });\n    };\n\n    const createCommit = () => {\n      execGit(`git commit -m \"${input.message.replace(/\"/g, '\\\\\"')}\"`)\n        .then((output) => {\n          resolve({\n            success: true,\n            message: output,\n            path: input.path,\n          });\n        })\n        .catch((error) => reject(`Failed to commit: ${error}`));\n    };\n\n    if (input.stageAll) {\n      execGit(\"git add .\")\n        .then(createCommit)\n        .catch((error) => reject(`Failed to stage changes: ${error}`));\n    } else {\n      createCommit();\n    }\n  });\n}\n\nexport const confirmation: Tool.Confirmation<Input> = async (input) => {\n  // Get list of files to be committed\n  const getAffectedFiles = async (): Promise<string[]> => {\n    return new Promise((resolve) => {\n      if (input.stageAll) {\n        // If staging all, show all changes including untracked files\n        exec(\"git status --porcelain\", { cwd: input.path }, (_, stdout) => {\n          const files = stdout\n            .split(\"\\n\")\n            .filter((line) => line.trim())\n            .map((line) => {\n              const staged = line[0];\n              const unstaged = line[1];\n              const file = line.slice(3).trim();\n              // Handle partially staged files first\n              if (staged === \"M\" && unstaged === \"M\") {\n                return `\u26A1\uFE0F ${file} (partially staged)`;\n              }\n              // Then handle other status combinations\n              if (staged !== \" \" && staged !== \"?\") {\n                switch (staged) {\n                  case \"M\":\n                    return `\uD83D\uDCDD ${file} (modified)`;\n                  case \"A\":\n                    return `\u2728 ${file} (added)`;\n                  case \"D\":\n                    return `\uD83D\uDDD1\uFE0F  ${file} (deleted)`;\n                  case \"R\":\n                    return `\uD83D\uDCCB ${file} (renamed)`;\n                  default:\n                    return `\u2022 ${file}`;\n                }\n              } else if (unstaged === \"?\") {\n                return `\u2753 ${file} (untracked)`;\n              } else if (unstaged !== \" \") {\n                switch (unstaged) {\n                  case \"M\":\n                    return `\uD83D\uDCDD ${file} (modified)`;\n                  case \"D\":\n                    return `\uD83D\uDDD1\uFE0F  ${file} (deleted)`;\n                  default:\n                    return `\u2022 ${file}`;\n                }\n              }\n              return `\u2022 ${file}`;\n            });\n          resolve(files);\n        });\n      } else {\n        // Otherwise, show only staged files\n        exec(\"git diff --cached --name-status\", { cwd: input.path }, (_, stdout) => {\n          const files = stdout\n            .split(\"\\n\")\n            .filter(Boolean)\n            .map((line) => {\n              const [status, file] = line.split(\"\\t\");\n              // Add status indicator\n              switch (status.trim()) {\n                case \"M\":\n                  return `\uD83D\uDCDD ${file} (modified)`;\n                case \"A\":\n                  return `\u2728 ${file} (added)`;\n                case \"D\":\n                  return `\uD83D\uDDD1\uFE0F  ${file} (deleted)`;\n                case \"R\":\n                  return `\uD83D\uDCCB ${file} (renamed)`;\n                default:\n                  return `\u2022 ${file}`;\n              }\n            });\n          resolve(files);\n        });\n      }\n    });\n  };\n\n  const affectedFiles = await getAffectedFiles();\n  const filesList = affectedFiles.map((file) => `  ${file}`).join(\"\\n\");\n\n  return {\n    message:\n      \"Do you want to create the following Git commit?\\n\\n\" +\n      \"\uD83D\uDCC4 Files to be committed:\\n\" +\n      `${filesList}\\n\\n` +\n      \"\uD83D\uDCAC Commit Message:\\n\" +\n      input.message\n        .split(\"\\n\")\n        .map((line) => `  ${line}`)\n        .join(\"\\n\"),\n    info: [{ name: \"Repository\", value: input.path }],\n  };\n};\n"],
  "mappings": "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",
  "names": ["commit_changes_exports", "__export", "confirmation", "commit_changes_default", "__toCommonJS", "import_child_process", "input", "resolve", "reject", "execGit", "command", "error", "stdout", "stderr", "createCommit", "output", "_", "files", "line", "staged", "unstaged", "file", "status"]
}
