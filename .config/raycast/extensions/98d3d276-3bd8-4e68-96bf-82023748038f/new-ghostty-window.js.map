{
  "version": 3,
  "sources": ["../src/new-ghostty-window.ts", "../node_modules/run-applescript/index.js", "../src/utils/scripts.ts"],
  "sourcesContent": ["import { runAppleScript } from \"run-applescript\";\nimport { popToRoot } from \"@raycast/api\";\nimport { openGhosttyWindow } from \"./utils/scripts\";\n\nexport default async function Command() {\n  await runAppleScript(openGhosttyWindow);\n  await popToRoot();\n}\n", "import process from 'node:process';\nimport {promisify} from 'node:util';\nimport {execFile, execFileSync} from 'node:child_process';\n\nconst execFileAsync = promisify(execFile);\n\nexport async function runAppleScript(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst {stdout} = await execFileAsync('osascript', ['-e', script, outputArguments]);\n\treturn stdout.trim();\n}\n\nexport function runAppleScriptSync(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst stdout = execFileSync('osascript', ['-e', script, ...outputArguments], {\n\t\tencoding: 'utf8',\n\t\tstdio: ['ignore', 'pipe', 'ignore'],\n\t\ttimeout: 500,\n\t});\n\n\treturn stdout.trim();\n}\n", "export const openGhosttyWindow = `\ntell application \"System Events\"\n    set isGhosttyRunning to exists (processes where name is \"Ghostty\")\n  end tell\n\ntell application \"Ghostty\"\n  if not isGhosttyRunning then\n    activate\n  else\n    -- If Ghostty is already running, activate Finder first then activate Ghostty and send Cmd+N to create new window\n    tell application \"Finder\" to activate\n    activate\n    tell application \"System Events\"\n      tell process \"Ghostty\"\n        keystroke \"n\" using {command down}\n      end tell\n    end tell\n  end if\nend tell`;\n\nexport const openGhosttyTab = `\ntell application \"System Events\"\n  set isGhosttyRunning to exists (processes where name is \"Ghostty\")\nend tell\n\ntell application \"Ghostty\"\n  if not isGhosttyRunning then\n    activate\n  else\n    -- If Ghostty is already running, activate Finder first then activate Ghostty and send Cmd+N to create new window\n    tell application \"Finder\" to activate\n    activate\n    tell application \"System Events\"\n      tell process \"Ghostty\"\n        keystroke \"t\" using {command down}\n      end tell\n    end tell\n  end if\nend tell`;\n\nexport const openGhosttyWindowAtFinderLocation = `\non replaceTilde(theText)\n\tset AppleScript's text item delimiters to \"~\"\n\tset theTextItems to every text item of theText\n\tset AppleScript's text item delimiters to \"~ \"\n\tset newText to theTextItems as text\n\tset AppleScript's text item delimiters to \"\" -- Reset delimiters\n\treturn newText\nend replaceTilde\n\nuse F : application \"Finder\"\non getSelectedFolderPath()\n\ttell (F's selection as list) \u00AC\n\t\tto if (count) is 1 \u00AC\n\t\tand the first item's class is folder \u00AC\n\t\tthen return the POSIX path \u00AC\n\t\tof (the first item as alias)\n\t\n\treturn POSIX path of (F's insertion location as alias)\nend getSelectedFolderPath\n\nset currentPath to replaceTilde(quoted form of getSelectedFolderPath())\n\ntell application \"System Events\"\n\tset isGhosttyRunning to exists (processes where name is \"Ghostty\")\nend tell\n\ntell application \"Ghostty\"\n\tif not isGhosttyRunning then\n\t\tactivate\n\t\ttell application \"System Events\"\n\t\t\ttell process \"Ghostty\"\n\t\t\t\tdelay 0.2\n\t\t\t\tkeystroke \"cd \" & currentPath & \" \" & return\n\t\t\t\tkeystroke \"clear\" & return\n\t\t\tend tell\n\t\tend tell\n\telse\n\t\t-- If Ghostty is already running, activate Finder first then activate Ghostty and send Cmd+N to create new window\n\t\ttell application \"Finder\" to activate\n\t\tactivate\n\t\ttell application \"System Events\"\n\t\t\ttell process \"Ghostty\"\n\t\t\t\tkeystroke \"n\" using {command down}\n\t\t\t\tdelay 0.2\n\t\t\t\tkeystroke \"cd \" & currentPath & \" \" & return\n\t\t\t\tkeystroke \"clear\" & return\n\t\t\tend tell\n\t\tend tell\n\tend if\nend tell`;\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAoB,6BACpBC,EAAwB,qBACxBC,EAAqC,8BAE/BC,KAAgB,aAAU,UAAQ,EAExC,eAAsBC,EAAeC,EAAQ,CAAC,oBAAAC,EAAsB,EAAI,EAAI,CAAC,EAAG,CAC/E,GAAI,EAAAC,QAAQ,WAAa,SACxB,MAAM,IAAI,MAAM,YAAY,EAG7B,IAAMC,EAAkBF,EAAsB,CAAC,EAAI,CAAC,KAAK,EAEnD,CAAC,OAAAG,CAAM,EAAI,MAAMN,EAAc,YAAa,CAAC,KAAME,EAAQG,CAAe,CAAC,EACjF,OAAOC,EAAO,KAAK,CACpB,CDdA,IAAAC,EAA0B,wBEDnB,IAAMC,EAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;UFIjC,eAAOC,GAAiC,CACtC,MAAMC,EAAeC,CAAiB,EACtC,QAAM,aAAU,CAClB",
  "names": ["new_ghostty_window_exports", "__export", "Command", "__toCommonJS", "import_node_process", "import_node_util", "import_node_child_process", "execFileAsync", "runAppleScript", "script", "humanReadableOutput", "process", "outputArguments", "stdout", "import_api", "openGhosttyWindow", "Command", "runAppleScript", "openGhosttyWindow"]
}
