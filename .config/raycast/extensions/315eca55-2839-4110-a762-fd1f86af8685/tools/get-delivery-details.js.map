{
  "version": 3,
  "sources": ["../../src/tools/get-delivery-details.ts", "../../src/api.ts"],
  "sourcesContent": ["import { fetchDeliveries, getStatusDescription, FilterMode } from \"../api\";\n\n/**\n * Get detailed information about a specific delivery.\n *\n * **Usage:**\n * Find a specific delivery by tracking number and get its detailed information.\n *\n * @param input.tracking_number The tracking number of the delivery to find.\n * @returns Detailed information about the requested delivery or null if not found.\n */\ntype Input = {\n  /**\n   * The tracking number of the delivery to find.\n   * This is case-sensitive and must match exactly.\n   */\n  tracking_number: string;\n};\n\nexport default async function getDeliveryDetails(input: Input) {\n  try {\n    // Try active deliveries first\n    let deliveries = await fetchDeliveries(FilterMode.ACTIVE);\n    let delivery = deliveries.find((d) => d.tracking_number === input.tracking_number);\n\n    // If not found in active, try recent\n    if (!delivery) {\n      deliveries = await fetchDeliveries(FilterMode.RECENT);\n      delivery = deliveries.find((d) => d.tracking_number === input.tracking_number);\n    }\n\n    if (!delivery) {\n      return {\n        found: false,\n        message: `No delivery found with tracking number ${input.tracking_number}`,\n      };\n    }\n\n    // Format dates for better readability\n    const formatDate = (dateString: string | undefined | null): string => {\n      if (!dateString) return \"Not available\";\n\n      try {\n        const date = new Date(dateString);\n        return date.toLocaleDateString(undefined, {\n          year: \"numeric\",\n          month: \"short\",\n          day: \"numeric\",\n        });\n      } catch (e) {\n        return \"Invalid date\";\n      }\n    };\n\n    // Calculate days until delivery\n    const calculateDaysUntil = (dateString: string | undefined | null): string => {\n      if (!dateString) return \"Unknown\";\n\n      try {\n        const deliveryDate = new Date(dateString);\n        const today = new Date();\n\n        // Reset time for accurate day calculation\n        deliveryDate.setHours(0, 0, 0, 0);\n        today.setHours(0, 0, 0, 0);\n\n        const diffTime = deliveryDate.getTime() - today.getTime();\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n        if (diffDays < 0) return `${Math.abs(diffDays)} day(s) ago`;\n        if (diffDays === 0) return \"Today\";\n        return `In ${diffDays} day(s)`;\n      } catch (e) {\n        return \"Unknown\";\n      }\n    };\n\n    // Format tracking events\n    const formattedEvents =\n      delivery.events?.map((event) => {\n        return {\n          ...event,\n          formatted_date: formatDate(event.date),\n          time: event.date\n            ? new Date(event.date).toLocaleTimeString(undefined, {\n                hour: \"2-digit\",\n                minute: \"2-digit\",\n              })\n            : \"Unknown\",\n        };\n      }) || [];\n\n    // Return formatted delivery information\n    return {\n      found: true,\n      delivery: {\n        ...delivery,\n        formatted_date_expected: formatDate(delivery.date_expected),\n        delivery_timeframe: calculateDaysUntil(delivery.date_expected),\n        status_description: getStatusDescription(delivery.status_code),\n        formatted_events: formattedEvents,\n      },\n    };\n  } catch (error) {\n    throw new Error(`Failed to fetch delivery details: ${(error as Error).message}`);\n  }\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\n\ninterface Preferences {\n  apiKey: string;\n}\n\nexport enum FilterMode {\n  ACTIVE = \"active\",\n  RECENT = \"recent\",\n}\n\nexport interface Event {\n  event: string;\n  date: string;\n  location?: string;\n  additional?: string;\n}\n\nexport interface Delivery {\n  carrier_code: string;\n  description: string;\n  status_code: number;\n  tracking_number: string;\n  events: Event[];\n  extra_information?: string;\n  date_expected?: string;\n  date_expected_end?: string;\n  timestamp_expected?: number;\n  timestamp_expected_end?: number;\n}\n\nexport interface ParcelApiResponse {\n  success: boolean;\n  error_message?: string;\n  deliveries: Delivery[];\n}\n\n// Status code descriptions\nexport const STATUS_DESCRIPTIONS: Record<number, string> = {\n  0: \"Completed\",\n  1: \"Frozen\",\n  2: \"In Transit\",\n  3: \"Ready for Pickup\",\n  4: \"Out for Delivery\",\n  5: \"Not Found\",\n  6: \"Failed Delivery Attempt\",\n  7: \"Exception\",\n  8: \"Info Received\",\n};\n\nexport function getStatusDescription(statusCode: number): string {\n  return STATUS_DESCRIPTIONS[statusCode] || \"Unknown Status\";\n}\n\n// Map status codes to icons\nexport const STATUS_ICONS: Record<number, string> = {\n  0: \"\u2705\",\n  1: \"\u2744\uFE0F\",\n  2: \"\uD83D\uDE9A\",\n  3: \"\uD83D\uDCE6\",\n  4: \"\uD83D\uDE9A\",\n  5: \"\u2753\",\n  6: \"\u26A0\uFE0F\",\n  7: \"\u26D4\uFE0F\",\n  8: \"\u2139\uFE0F\",\n};\n\nexport function getApiKey(): string {\n  const preferences = getPreferenceValues<Preferences>();\n\n  if (!preferences.apiKey) {\n    throw new Error(\"API key not found. Please add your Parcel API key in extension preferences.\");\n  }\n\n  return preferences.apiKey;\n}\n\nexport function getDeliveriesUrl(filterMode: FilterMode): string {\n  return `https://api.parcel.app/external/deliveries/?filter_mode=${filterMode}`;\n}\n\nexport function getAPIHeaders(): HeadersInit {\n  return {\n    \"api-key\": getApiKey(),\n  };\n}\n\nexport async function fetchDeliveries(filterMode: FilterMode): Promise<Delivery[]> {\n  const url = getDeliveriesUrl(filterMode);\n  const response = await fetch(url, {\n    headers: getAPIHeaders(),\n  });\n\n  if (!response.ok) {\n    throw new Error(`API request failed with status ${response.status} (${await response.text()})`);\n  }\n\n  const data = (await response.json()) as ParcelApiResponse;\n\n  const err = getAPIError(data);\n  if (err) {\n    throw err;\n  }\n\n  return data.deliveries;\n}\n\nexport function getAPIError(data: ParcelApiResponse): Error | null {\n  if (!data.success) {\n    return new Error(data?.error_message || \"Unknown API error\");\n  }\n\n  return null;\n}\n"],
  "mappings": "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",
  "names": ["get_delivery_details_exports", "__export", "getDeliveryDetails", "__toCommonJS", "import_api", "STATUS_DESCRIPTIONS", "getStatusDescription", "statusCode", "getApiKey", "preferences", "getDeliveriesUrl", "filterMode", "getAPIHeaders", "fetchDeliveries", "url", "response", "data", "err", "getAPIError", "getDeliveryDetails", "input", "deliveries", "fetchDeliveries", "delivery", "d", "formatDate", "dateString", "calculateDaysUntil", "deliveryDate", "today", "diffTime", "diffDays", "formattedEvents", "event", "getStatusDescription", "error"]
}
