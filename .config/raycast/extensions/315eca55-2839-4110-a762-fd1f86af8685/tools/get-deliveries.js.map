{
  "version": 3,
  "sources": ["../../src/tools/get-deliveries.ts", "../../src/api.ts"],
  "sourcesContent": ["import { fetchDeliveries, getStatusDescription, FilterMode } from \"../api\";\n\n/**\n * Get a list of deliveries from Parcel.\n *\n * **Usage:**\n * Get active or recent deliveries with optional filtering.\n *\n * @param input.filter Which deliveries to show - \"active\" (default) or \"recent\"\n * @returns A list of deliveries with their tracking information.\n */\ntype Input = {\n  /**\n   * Which deliveries to show - \"active\" or \"recent\"\n   * Default is \"active\" if not specified.\n   */\n  filter?: FilterMode;\n};\n\nexport default async function getDeliveries(input?: Input) {\n  try {\n    const filter = input?.filter || FilterMode.ACTIVE;\n    const deliveries = await fetchDeliveries(filter);\n\n    return deliveries.map((delivery) => {\n      return {\n        ...delivery,\n        formatted_date_expected: delivery.date_expected\n          ? new Date(delivery.date_expected).toLocaleDateString(undefined, {\n              year: \"numeric\",\n              month: \"short\",\n              day: \"numeric\",\n            })\n          : \"Not available\",\n        status_description: getStatusDescription(delivery.status_code),\n      };\n    });\n  } catch (error) {\n    throw new Error(`Failed to fetch deliveries: ${(error as Error).message}`);\n  }\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\n\ninterface Preferences {\n  apiKey: string;\n}\n\nexport enum FilterMode {\n  ACTIVE = \"active\",\n  RECENT = \"recent\",\n}\n\nexport interface Event {\n  event: string;\n  date: string;\n  location?: string;\n  additional?: string;\n}\n\nexport interface Delivery {\n  carrier_code: string;\n  description: string;\n  status_code: number;\n  tracking_number: string;\n  events: Event[];\n  extra_information?: string;\n  date_expected?: string;\n  date_expected_end?: string;\n  timestamp_expected?: number;\n  timestamp_expected_end?: number;\n}\n\nexport interface ParcelApiResponse {\n  success: boolean;\n  error_message?: string;\n  deliveries: Delivery[];\n}\n\n// Status code descriptions\nexport const STATUS_DESCRIPTIONS: Record<number, string> = {\n  0: \"Completed\",\n  1: \"Frozen\",\n  2: \"In Transit\",\n  3: \"Ready for Pickup\",\n  4: \"Out for Delivery\",\n  5: \"Not Found\",\n  6: \"Failed Delivery Attempt\",\n  7: \"Exception\",\n  8: \"Info Received\",\n};\n\nexport function getStatusDescription(statusCode: number): string {\n  return STATUS_DESCRIPTIONS[statusCode] || \"Unknown Status\";\n}\n\n// Map status codes to icons\nexport const STATUS_ICONS: Record<number, string> = {\n  0: \"\u2705\",\n  1: \"\u2744\uFE0F\",\n  2: \"\uD83D\uDE9A\",\n  3: \"\uD83D\uDCE6\",\n  4: \"\uD83D\uDE9A\",\n  5: \"\u2753\",\n  6: \"\u26A0\uFE0F\",\n  7: \"\u26D4\uFE0F\",\n  8: \"\u2139\uFE0F\",\n};\n\nexport function getApiKey(): string {\n  const preferences = getPreferenceValues<Preferences>();\n\n  if (!preferences.apiKey) {\n    throw new Error(\"API key not found. Please add your Parcel API key in extension preferences.\");\n  }\n\n  return preferences.apiKey;\n}\n\nexport function getDeliveriesUrl(filterMode: FilterMode): string {\n  return `https://api.parcel.app/external/deliveries/?filter_mode=${filterMode}`;\n}\n\nexport function getAPIHeaders(): HeadersInit {\n  return {\n    \"api-key\": getApiKey(),\n  };\n}\n\nexport async function fetchDeliveries(filterMode: FilterMode): Promise<Delivery[]> {\n  const url = getDeliveriesUrl(filterMode);\n  const response = await fetch(url, {\n    headers: getAPIHeaders(),\n  });\n\n  if (!response.ok) {\n    throw new Error(`API request failed with status ${response.status} (${await response.text()})`);\n  }\n\n  const data = (await response.json()) as ParcelApiResponse;\n\n  const err = getAPIError(data);\n  if (err) {\n    throw err;\n  }\n\n  return data.deliveries;\n}\n\nexport function getAPIError(data: ParcelApiResponse): Error | null {\n  if (!data.success) {\n    return new Error(data?.error_message || \"Unknown API error\");\n  }\n\n  return null;\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAoC,wBAsC7B,IAAMC,EAA8C,CACzD,EAAG,YACH,EAAG,SACH,EAAG,aACH,EAAG,mBACH,EAAG,mBACH,EAAG,YACH,EAAG,0BACH,EAAG,YACH,EAAG,eACL,EAEO,SAASC,EAAqBC,EAA4B,CAC/D,OAAOF,EAAoBE,CAAU,GAAK,gBAC5C,CAeO,SAASC,GAAoB,CAClC,IAAMC,KAAc,uBAAiC,EAErD,GAAI,CAACA,EAAY,OACf,MAAM,IAAI,MAAM,6EAA6E,EAG/F,OAAOA,EAAY,MACrB,CAEO,SAASC,EAAiBC,EAAgC,CAC/D,MAAO,2DAA2DA,CAAU,EAC9E,CAEO,SAASC,GAA6B,CAC3C,MAAO,CACL,UAAWJ,EAAU,CACvB,CACF,CAEA,eAAsBK,EAAgBF,EAA6C,CACjF,IAAMG,EAAMJ,EAAiBC,CAAU,EACjCI,EAAW,MAAM,MAAMD,EAAK,CAChC,QAASF,EAAc,CACzB,CAAC,EAED,GAAI,CAACG,EAAS,GACZ,MAAM,IAAI,MAAM,kCAAkCA,EAAS,MAAM,KAAK,MAAMA,EAAS,KAAK,CAAC,GAAG,EAGhG,IAAMC,EAAQ,MAAMD,EAAS,KAAK,EAE5BE,EAAMC,EAAYF,CAAI,EAC5B,GAAIC,EACF,MAAMA,EAGR,OAAOD,EAAK,UACd,CAEO,SAASE,EAAYF,EAAuC,CACjE,OAAKA,EAAK,QAIH,KAHE,IAAI,MAAMA,GAAM,eAAiB,mBAAmB,CAI/D,CD9FA,eAAOG,EAAqCC,EAAe,CACzD,GAAI,CACF,IAAMC,EAASD,GAAO,QAAU,SAGhC,OAFmB,MAAME,EAAgBD,CAAM,GAE7B,IAAKE,IACd,CACL,GAAGA,EACH,wBAAyBA,EAAS,cAC9B,IAAI,KAAKA,EAAS,aAAa,EAAE,mBAAmB,OAAW,CAC7D,KAAM,UACN,MAAO,QACP,IAAK,SACP,CAAC,EACD,gBACJ,mBAAoBC,EAAqBD,EAAS,WAAW,CAC/D,EACD,CACH,OAASE,EAAO,CACd,MAAM,IAAI,MAAM,+BAAgCA,EAAgB,OAAO,EAAE,CAC3E,CACF",
  "names": ["get_deliveries_exports", "__export", "getDeliveries", "__toCommonJS", "import_api", "STATUS_DESCRIPTIONS", "getStatusDescription", "statusCode", "getApiKey", "preferences", "getDeliveriesUrl", "filterMode", "getAPIHeaders", "fetchDeliveries", "url", "response", "data", "err", "getAPIError", "getDeliveries", "input", "filter", "fetchDeliveries", "delivery", "getStatusDescription", "error"]
}
