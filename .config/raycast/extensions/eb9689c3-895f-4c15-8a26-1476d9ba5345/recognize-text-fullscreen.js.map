{
  "version": 3,
  "sources": ["../src/recognize-text-fullscreen.ts", "swift:/Users/runner/work/extensions/extensions/extensions/screenocr/swift", "../src/hooks.ts", "../src/data/supportedLanguages.ts", "../src/utils.ts"],
  "sourcesContent": ["import { Clipboard, closeMainWindow, showToast, Toast } from \"@raycast/api\";\nimport { recognizeText } from \"./utils\";\n\nexport default async function command() {\n  await closeMainWindow();\n\n  try {\n    const recognizedText = await recognizeText(true);\n\n    if (!recognizedText) {\n      return await showToast({\n        style: Toast.Style.Failure,\n        title: \"No text detected\",\n      });\n    }\n\n    await Clipboard.copy(recognizedText);\n    await showToast({\n      style: Toast.Style.Success,\n      title: \"Copied text to clipboard\",\n    });\n  } catch (e) {\n    console.error(e);\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed detecting text\",\n    });\n  }\n}\n", "\nimport { environment } from \"@raycast/api\";\nimport { join } from \"path\";\nimport { chmod } from \"fs/promises\";\nimport { spawn } from \"child_process\";\n\nasync function runSwiftFunction(command, ...args) {\n  const swiftPath = join(environment.assetsPath, \"compiled_raycast_swift/swift\");\n  await chmod(swiftPath, \"755\");\n\n  return new Promise((resolve, reject) => {\n    const commandArgs = [command];\n    for (const arg of args) {\n      try {\n        commandArgs.push(JSON.stringify(arg, (k, v) => v === undefined ? null : v));\n      } catch (err) {\n        reject(new SwiftError(\"Failed to serialize input to JSON: \" + err.message));\n        return;\n      }\n    }\n    const child = spawn(swiftPath, commandArgs);\n    const stdout = [];\n    const stderr = [];\n\n    child.stdout?.on(\"data\", (data) => {\n      stdout.push(data.toString());\n    });\n    child.stderr?.on(\"data\", (data) => {\n      stderr.push(data.toString());\n    });\n\n    child.on(\"exit\", (code) => {\n      if (code === 0) {\n        try {\n          const result = stdout.join(\"\").trim();\n          if (result.length != 0) {\n            resolve(JSON.parse(result));\n          } else {\n            resolve(null);\n          }\n        } catch (err) {\n          const error = new SwiftError(\"Failed to deserialize result from JSON: \" + err.message);\n          error.stdout = stdout.join(\"\").trim();\n          error.stderr = stderr.join(\"\").trim();\n          reject(error);\n        }\n      } else {\n        const error = new SwiftError(stderr.join(\"\").trim() || stdout.join(\"\").trim() || \"Could not get any data\");\n        error.stdout = stdout.join(\"\").trim();\n        error.stderr = stderr.join(\"\").trim();\n        reject(error);\n      }\n    });\n\n    child.on(\"error\", (error) => {\n      reject(error);\n    });\n  });\n}\n\nexport async function recognizeText(fullscreen, keepImage, fast, languageCorrection, ignoreLineBreaks, customWordsList, languages) {\n  return await runSwiftFunction(\"recognizeText\", fullscreen, keepImage, fast, languageCorrection, ignoreLineBreaks, customWordsList, languages)\n}\n\nexport class SwiftError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"SwiftError\";\n  }\n}\n", "import { LocalStorage, getPreferenceValues } from \"@raycast/api\";\nimport supportedLanguages from \"./data/supportedLanguages\";\nimport { Language, Preferences } from \"./types\";\n\nexport const usePreferences = () => {\n  return getPreferenceValues<Preferences>();\n};\n\nexport const getUserSelectedLanguages = async () => {\n  const preference = usePreferences();\n\n  const selectedLanguages = await LocalStorage.getItem(\"SelectedLanguages\");\n\n  const primaryLanguage = {\n    title:\n      supportedLanguages.find(\n        (lang) => lang.value === preference.primaryLanguage,\n      )?.title ?? \"\uD83C\uDDFA\uD83C\uDDF8 English (US)\",\n    value: preference.primaryLanguage,\n    isDefault: true,\n  } as Language;\n\n  let userSelectedLanguages: Language[] = [];\n\n  if (typeof selectedLanguages !== \"undefined\") {\n    const selectedLanguagesParsed = JSON.parse(\n      selectedLanguages as unknown as string,\n    ) as Language[];\n    userSelectedLanguages = selectedLanguagesParsed;\n    return userSelectedLanguages;\n  }\n\n  const languages: Language[] = [primaryLanguage];\n  return languages;\n};\n", "export default [\n  { title: \"\uD83C\uDDFA\uD83C\uDDF8 English (US)\", value: \"en-US\" },\n  { title: \"\uD83C\uDDEB\uD83C\uDDF7 French (France)\", value: \"fr-FR\" },\n  { title: \"\uD83C\uDDEE\uD83C\uDDF9 Italian (Italy)\", value: \"it-IT\" },\n  { title: \"\uD83C\uDDE9\uD83C\uDDEA German (Germany)\", value: \"de-DE\" },\n  { title: \"\uD83C\uDDEA\uD83C\uDDF8 Spanish (Spain)\", value: \"es-ES\" },\n  { title: \"\uD83C\uDDE7\uD83C\uDDF7 Portuguese (Brazil)\", value: \"pt-BR\" },\n  { title: \"\uD83C\uDDE8\uD83C\uDDF3 Chinese (Simplified)\", value: \"zh-Hans\" },\n  { title: \"\uD83C\uDDF9\uD83C\uDDFC Chinese (Traditional)\", value: \"zh-Hant\" },\n  { title: \"\uD83C\uDDE8\uD83C\uDDF3 Cantonese (Simplified)\", value: \"yue-Hans\" },\n  { title: \"\uD83C\uDDED\uD83C\uDDF0 Cantonese (Traditional)\", value: \"yue-Hant\" },\n  { title: \"\uD83C\uDDF0\uD83C\uDDF7 Korean (South Korea)\", value: \"ko-KR\" },\n  { title: \"\uD83C\uDDEF\uD83C\uDDF5 Japanese (Japan)\", value: \"ja-JP\" },\n  { title: \"\uD83C\uDDF7\uD83C\uDDFA Russian (Russia)\", value: \"ru-RU\" },\n  { title: \"\uD83C\uDDFA\uD83C\uDDE6 Ukrainian (Ukraine)\", value: \"uk-UA\" },\n  { title: \"\uD83C\uDDF9\uD83C\uDDED Thai (Thailand)\", value: \"th-TH\" },\n  { title: \"\uD83C\uDDFB\uD83C\uDDF3 Vietnamese (Vietnam)\", value: \"vi-VT\" },\n] as const;\n", "import { recognizeText as recognizeTextSwift } from \"swift:../swift\";\nimport { getUserSelectedLanguages, usePreferences } from \"./hooks\";\n\nexport const recognizeText = async (isFullScreen = false) => {\n  const preference = usePreferences();\n\n  try {\n    const languages = await getUserSelectedLanguages();\n\n    const recognizedText = await recognizeTextSwift(\n      isFullScreen,\n      preference.keepImage,\n      preference.ocrMode === \"fast\",\n      preference.languageCorrection,\n      preference.ignoreLineBreaks,\n      preference.customWordsList ? preference.customWordsList.split(\",\") : [],\n      languages.map((lang) => lang.value),\n    );\n\n    return recognizedText;\n  } catch (error) {\n    console.error(error);\n    throw new Error(\"Failed to recognize text\");\n  }\n};\n"],
  "mappings": "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",
  "names": ["recognize_text_fullscreen_exports", "__export", "command", "__toCommonJS", "import_api", "import_api", "import_path", "import_promises", "import_child_process", "runSwiftFunction", "command", "args", "swiftPath", "resolve", "reject", "commandArgs", "arg", "k", "v", "err", "SwiftError", "child", "stdout", "stderr", "data", "code", "result", "error", "recognizeText", "fullscreen", "keepImage", "fast", "languageCorrection", "ignoreLineBreaks", "customWordsList", "languages", "message", "import_api", "supportedLanguages_default", "usePreferences", "getUserSelectedLanguages", "preference", "selectedLanguages", "primaryLanguage", "supportedLanguages_default", "lang", "userSelectedLanguages", "recognizeText", "isFullScreen", "preference", "usePreferences", "languages", "getUserSelectedLanguages", "lang", "error", "command", "recognizedText", "recognizeText", "e"]
}
