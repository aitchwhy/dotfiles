var w=Object.create;var n=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,F=Object.prototype.hasOwnProperty;var A=(e,t)=>{for(var r in t)n(e,r,{get:t[r],enumerable:!0})},l=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of x(t))!F.call(e,s)&&s!==r&&n(e,s,{get:()=>t[s],enumerable:!(o=S(t,s))||o.enumerable});return e};var u=(e,t,r)=>(r=e!=null?w(k(e)):{},l(t||!e||!e.__esModule?n(r,"default",{value:e,enumerable:!0}):r,e)),P=e=>l(n({},"__esModule",{value:!0}),e);var $={};A($,{default:()=>y});module.exports=P($);var d=require("@raycast/api");var a=require("@raycast/api"),f=require("child_process"),p=u(require("fs")),h=u(require("util"));async function i(e,t,r){await(0,a.closeMainWindow)();let o=h.default.promisify(f.exec),s=`${a.environment.assetsPath}/screenshot.png`,g=`/usr/sbin/screencapture ${r?"-s":""} ${s}`,m;try{await o(g),m=await p.default.promises.readFile(s)}catch(c){await(0,a.showToast)({style:a.Toast.Style.Failure,title:"Failed to get screenshot",message:c.message});return}console.log(`Screenshot captured at ${s}`);try{await(0,a.launchCommand)({name:"askAI",type:a.LaunchType.UserInitiated,context:{buffer:[m],args:e.arguments,context:t}})}catch(c){await(0,a.showToast)({style:a.Toast.Style.Failure,title:"Failed to launch askAI command",message:c.message})}}async function y(e){let{prompt:t}=(0,d.getPreferenceValues)();await i(e,t,!0)}
