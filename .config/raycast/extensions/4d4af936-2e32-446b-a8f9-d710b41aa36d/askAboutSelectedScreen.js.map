{
  "version": 3,
  "sources": ["../src/askAboutSelectedScreen.jsx", "../src/askScreenshot.jsx"],
  "sourcesContent": ["import { getPreferenceValues } from \"@raycast/api\";\nimport askScreenshot from \"./askScreenshot\";\n\nexport default async function AskAboutSelectedScreenContent(props) {\n  const { prompt } = getPreferenceValues();\n  await askScreenshot(props, prompt, true);\n}\n", "import { closeMainWindow, environment, launchCommand, LaunchType, showToast, Toast } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport fs from \"fs\";\nimport util from \"util\";\n\nexport default async function askScreenshot(props, prompt, isSelecting) {\n  await closeMainWindow();\n\n  const execPromise = util.promisify(exec);\n\n  const screenshotPath = `${environment.assetsPath}/screenshot.png`;\n  // if isSelecting is true, cmd add -s to screencaptureCmd\n  const screencaptureCmd = `/usr/sbin/screencapture ${isSelecting ? \"-s\" : \"\"} ${screenshotPath}`;\n\n  let fileBuffer;\n  try {\n    await execPromise(screencaptureCmd);\n    fileBuffer = await fs.promises.readFile(screenshotPath);\n  } catch (error) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed to get screenshot\",\n      message: error.message,\n    });\n    return;\n  }\n\n  console.log(`Screenshot captured at ${screenshotPath}`);\n\n  try {\n    await launchCommand({\n      name: \"askAI\",\n      type: LaunchType.UserInitiated,\n      context: {\n        buffer: [fileBuffer],\n        args: props.arguments,\n        context: prompt,\n      },\n    });\n  } catch (error) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed to launch askAI command\",\n      message: error.message,\n    });\n  }\n}\n"],
  "mappings": "6iBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAoC,wBCApC,IAAAC,EAA0F,wBAC1FC,EAAqB,yBACrBC,EAAe,iBACfC,EAAiB,mBAEjB,eAAOC,EAAqCC,EAAOC,EAAQC,EAAa,CACtE,QAAM,mBAAgB,EAEtB,IAAMC,EAAc,EAAAC,QAAK,UAAU,MAAI,EAEjCC,EAAiB,GAAG,cAAY,UAAU,kBAE1CC,EAAmB,2BAA2BJ,EAAc,KAAO,EAAE,IAAIG,CAAc,GAEzFE,EACJ,GAAI,CACF,MAAMJ,EAAYG,CAAgB,EAClCC,EAAa,MAAM,EAAAC,QAAG,SAAS,SAASH,CAAc,CACxD,OAASI,EAAO,CACd,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,2BACP,QAASA,EAAM,OACjB,CAAC,EACD,MACF,CAEA,QAAQ,IAAI,0BAA0BJ,CAAc,EAAE,EAEtD,GAAI,CACF,QAAM,iBAAc,CAClB,KAAM,QACN,KAAM,aAAW,cACjB,QAAS,CACP,OAAQ,CAACE,CAAU,EACnB,KAAMP,EAAM,UACZ,QAASC,CACX,CACF,CAAC,CACH,OAASQ,EAAO,CACd,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,iCACP,QAASA,EAAM,OACjB,CAAC,CACH,CACF,CD3CA,eAAOC,EAAqDC,EAAO,CACjE,GAAM,CAAE,OAAAC,CAAO,KAAI,uBAAoB,EACvC,MAAMC,EAAcF,EAAOC,EAAQ,EAAI,CACzC",
  "names": ["askAboutSelectedScreen_exports", "__export", "AskAboutSelectedScreenContent", "__toCommonJS", "import_api", "import_api", "import_child_process", "import_fs", "import_util", "askScreenshot", "props", "prompt", "isSelecting", "execPromise", "util", "screenshotPath", "screencaptureCmd", "fileBuffer", "fs", "error", "AskAboutSelectedScreenContent", "props", "prompt", "askScreenshot"]
}
