{
  "version": 3,
  "sources": ["../src/index.tsx"],
  "sourcesContent": ["import {\n  Action,\n  ActionPanel,\n  confirmAlert,\n  Icon,\n  showToast,\n  Toast,\n  getPreferenceValues,\n  List,\n  clearSearchBar,\n  closeMainWindow,\n  useNavigation,\n  Alert,\n  LocalStorage,\n} from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport { ReactNode, useEffect, useState } from \"react\";\n\ninterface Preferences {\n  useSudo: boolean;\n}\n\ntype Process = {\n  process: string;\n  label: string;\n  warning?: string;\n  icon: Icon;\n};\n\nconst commonProcesses: Process[] = [\n  { label: \"Finder\", process: \"Finder\", icon: Icon.Finder },\n  { label: \"Dock\", process: \"Dock\", icon: Icon.Desktop },\n  { label: \"Audio\", process: \"coreaudiod\", icon: Icon.Speaker },\n  { label: \"Bluetooth\", process: \"bluetoothd\", icon: Icon.Bluetooth },\n  {\n    label: \"WindowServer\",\n    process: \"-HUP WindowServer\",\n    icon: Icon.Window,\n    warning: \"This will close all open applications and log you out.\",\n  },\n  { label: \"SystemUIServer (e.g. Menu Bar)\", process: \"SystemUIServer\", icon: Icon.ComputerChip },\n];\n\nasync function getOrder(): Promise<string[]> {\n  return JSON.parse((await LocalStorage.getItem<string>(\"order\")) || \"[]\");\n}\n\nasync function orderItems<T extends (string | Process)[]>(items: T): Promise<T> {\n  const order = await getOrder();\n  return items.sort((a, b) => {\n    let aIndex = order.indexOf(typeof a === \"string\" ? a : a.process);\n    let bIndex = order.indexOf(typeof b === \"string\" ? b : b.process);\n    if (aIndex === -1) aIndex = order.length;\n    if (bIndex === -1) bIndex = order.length;\n    return aIndex - bIndex;\n  });\n}\n\nasync function saveLastUsedItems(process: string) {\n  const order = await getOrder();\n  const newOrder = [process, ...order.filter((i) => i !== process)];\n  await LocalStorage.setItem(\"order\", JSON.stringify(newOrder));\n}\n\nfunction getAdvancedItems() {\n  return new Promise<ReactNode[]>((resolve, reject) => {\n    exec(\"launchctl list | grep com.apple | awk '{print $3}'\\n\", (error, stdout) => {\n      if (error) {\n        console.error(`exec error: ${error}`);\n        reject(error); // Reject the promise on error\n        return;\n      }\n\n      const services = stdout.split(\"\\n\").map((line) => line.trim());\n\n      const items = services.map((service) => (\n        <List.Item\n          key={service}\n          title={service}\n          actions={\n            <ActionPanel>\n              <Action\n                title=\"Restart\"\n                onAction={async () => {\n                  await performAction({ advancedMode: service });\n                }}\n              />\n            </ActionPanel>\n          }\n        />\n      ));\n\n      resolve(items); // Resolve the promise with the updated items\n    });\n  });\n}\n\nasync function getExePath(exe: string) {\n  const path = await new Promise((resolve) => {\n    exec(`which ${exe}`, (error, stdout) => {\n      resolve(error ? null : stdout.trim());\n    });\n  });\n\n  if (path) {\n    return path;\n  }\n\n  // test a few common locations\n  const locations = [`/usr/bin/${exe}`, `/bin/${exe}`, `/usr/sbin/${exe}`, `/sbin/${exe}`];\n  for (const loc of locations) {\n    if (\n      await new Promise((resolve) => {\n        exec(`type ${loc}`, (error) => {\n          resolve(!error);\n        });\n      })\n    ) {\n      return loc;\n    }\n  }\n\n  return null;\n}\n\nexport default function Command() {\n  const { push } = useNavigation();\n\n  const [orderedProcesses, setOrderedProcesses] = useState<Process[]>([]);\n  useEffect(() => {\n    orderItems(commonProcesses).then(setOrderedProcesses);\n  }, []);\n\n  return (\n    <List isLoading={orderedProcesses.length === 0}>\n      <List.Section title=\"Common\">\n        {orderedProcesses.map((process) => (\n          <List.Item\n            key={process.process}\n            title={process.label}\n            icon={process.icon}\n            actions={\n              <ActionPanel>\n                <Action\n                  title=\"Restart\"\n                  onAction={async () => {\n                    await performAction({ process });\n                  }}\n                />\n              </ActionPanel>\n            }\n          />\n        ))}\n      </List.Section>\n      {/* This condition needs to be here, otherwise focus would always be on Advanced by default */}\n      {orderedProcesses.length ? (\n        <List.Section title=\"Advanced\">\n          <List.Item\n            key=\"advanced\"\n            title=\"Advanced Mode...\"\n            icon={Icon.BulletPoints}\n            actions={\n              <ActionPanel>\n                <Action\n                  title=\"View All Running Services\"\n                  onAction={async () => {\n                    push(<AdvancedList />);\n                  }}\n                />\n              </ActionPanel>\n            }\n          />\n        </List.Section>\n      ) : null}\n    </List>\n  );\n}\n\nfunction AdvancedList() {\n  const [items, setItems] = useState<ReactNode[]>([]);\n\n  useEffect(() => {\n    getAdvancedItems().then(setItems);\n  }, []);\n\n  return <List isLoading={items.length === 0}>{items}</List>;\n}\n\nasync function performAction(values: { process: Process } | { advancedMode: string }) {\n  const sudoOption = getPreferenceValues<Preferences>().useSudo;\n  const sudo = sudoOption ? \"sudo\" : \"\";\n  const processName = \"process\" in values ? values.process.label : values.advancedMode;\n  let cmd = \"\";\n\n  if (!process) {\n    await showToast(Toast.Style.Failure, \"No process selected\");\n    return;\n  }\n\n  await clearSearchBar();\n  await closeMainWindow();\n\n  if (\"process\" in values) {\n    if (values.process.warning) {\n      let userConfirmed = false;\n      await confirmAlert({\n        title: \"Warning\",\n        message: values.process.warning,\n        icon: Icon.Warning,\n        primaryAction: {\n          title: \"Continue\",\n          style: Alert.ActionStyle.Destructive,\n          onAction: () => {\n            userConfirmed = true;\n          },\n        },\n      });\n      if (!userConfirmed) return;\n    }\n\n    const killall = await getExePath(\"killall\");\n    if (!killall) {\n      await showToast(Toast.Style.Failure, \"killall executable not found\");\n      return;\n    }\n    cmd = `${sudo} ${killall} -KILL ${values.process.process}`;\n  } else {\n    const launchctl = await getExePath(\"launchctl\");\n    if (!launchctl) {\n      await showToast(Toast.Style.Failure, \"launchctl executable not found\");\n      return;\n    }\n    cmd = `${sudo} ${launchctl} stop ${values.advancedMode}`;\n  }\n\n  await saveLastUsedItems(\"process\" in values ? values.process.process : values.advancedMode);\n\n  let success = true;\n\n  const child = exec(cmd, (error, stdout, stderr) => {\n    if (error) {\n      console.log(`exec error: ${error}`);\n      showToast(Toast.Style.Failure, `Error: ${error.message}`);\n      success = false;\n    }\n    if (stderr) {\n      console.log(`stderr: ${stderr}`);\n    }\n    if (stdout) {\n      console.log(`stdout: ${stdout}`);\n    }\n  });\n\n  // return only after the process has finished\n  await new Promise((resolve) => {\n    child.on(\"exit\", resolve);\n  });\n\n  await new Promise((resolve) => {\n    setTimeout(resolve, 5);\n  });\n\n  if (success) {\n    await showToast(Toast.Style.Success, `${processName} restarted`);\n  }\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Command", "__toCommonJS", "import_api", "import_child_process", "import_react", "import_jsx_runtime", "commonProcesses", "getOrder", "orderItems", "items", "order", "a", "b", "aIndex", "bIndex", "saveLastUsedItems", "process", "newOrder", "i", "getAdvancedItems", "resolve", "reject", "error", "stdout", "line", "service", "performAction", "getExePath", "exe", "path", "locations", "loc", "push", "orderedProcesses", "setOrderedProcesses", "AdvancedList", "setItems", "values", "sudo", "processName", "cmd", "userConfirmed", "killall", "launchctl", "success", "child", "stderr"]
}
