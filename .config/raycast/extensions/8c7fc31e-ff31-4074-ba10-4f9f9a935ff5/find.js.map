{
  "version": 3,
  "sources": ["../src/find.tsx", "../src/utils/url.ts"],
  "sourcesContent": ["import { useState, useEffect, useCallback } from \"react\";\nimport { Action, ActionPanel, List, Icon, LocalStorage, getPreferenceValues, LaunchProps } from \"@raycast/api\";\nimport { makeSearchURL } from \"./utils/url\";\nimport { Preferences } from \"./utils/types\";\n\nfunction SearchCommand({ initialSearchText }: { initialSearchText?: string }) {\n  const { saveSearchHistory } = getPreferenceValues<Preferences>();\n\n  const [searchText, setSearchText] = useState(initialSearchText || \"\");\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const loadRecentSearches = useCallback(async () => {\n    const storedSearches = await LocalStorage.getItem<string>(\"recent-searches\");\n    setRecentSearches(storedSearches ? JSON.parse(storedSearches) : []);\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    loadRecentSearches();\n  }, [loadRecentSearches]);\n\n  useEffect(() => {\n    if (searchText.length > 3 && !recentSearches.includes(searchText.trim()) && saveSearchHistory) {\n      const timeoutId = setTimeout(async () => {\n        const updatedSearches = [searchText, ...recentSearches.filter((s) => s !== searchText)].slice(0, 10);\n        await LocalStorage.setItem(\"recent-searches\", JSON.stringify(updatedSearches));\n        setRecentSearches(updatedSearches);\n      }, 3000);\n\n      return () => clearTimeout(timeoutId);\n    }\n  }, [searchText, recentSearches, saveSearchHistory]);\n\n  const handleRemoveSearch = useCallback(\n    async (searchToRemove: string) => {\n      const updatedSearches = recentSearches.filter((s) => s !== searchToRemove);\n      await LocalStorage.setItem(\"recent-searches\", JSON.stringify(updatedSearches));\n      setRecentSearches(updatedSearches);\n    },\n    [recentSearches]\n  );\n\n  // New function to clear all recent searches\n  const handleClearAllSearches = useCallback(async () => {\n    await LocalStorage.removeItem(\"recent-searches\");\n    setRecentSearches([]);\n  }, []);\n\n  const sharedProps: React.ComponentProps<typeof List> = {\n    searchBarPlaceholder: \"Search Google Maps...\",\n    searchText,\n    onSearchTextChange: setSearchText,\n    isLoading,\n  };\n\n  if (!searchText) {\n    return (\n      <List {...sharedProps}>\n        <List.EmptyView title=\"Search Google Maps\" />\n        {recentSearches.map((search) => (\n          <List.Item\n            key={search}\n            title={search}\n            icon={Icon.Clock}\n            actions={\n              <ActionPanel>\n                <Action.OpenInBrowser url={makeSearchURL(search)} />\n                <Action icon={Icon.MagnifyingGlass} title=\"Search Again\" onAction={() => setSearchText(search)} />\n                <Action.CopyToClipboard\n                  title=\"Copy URL\"\n                  content={makeSearchURL(search)}\n                  shortcut={{ modifiers: [\"cmd\"], key: \"c\" }}\n                />\n                <Action icon={Icon.Trash} title=\"Remove Search\" onAction={() => handleRemoveSearch(search)} />\n                {/* New action to clear all searches */}\n                <Action\n                  icon={Icon.Trash}\n                  title=\"Clear All Searches\"\n                  shortcut={{ modifiers: [\"cmd\"], key: \"d\" }}\n                  onAction={handleClearAllSearches}\n                />\n              </ActionPanel>\n            }\n          />\n        ))}\n      </List>\n    );\n  }\n\n  return (\n    <List {...sharedProps}>\n      <List.Item\n        title={searchText}\n        icon={Icon.MagnifyingGlass}\n        actions={\n          <ActionPanel>\n            <Action.OpenInBrowser url={makeSearchURL(searchText)} />\n            <Action.CopyToClipboard\n              title=\"Copy URL\"\n              content={makeSearchURL(searchText)}\n              shortcut={{ modifiers: [\"cmd\"], key: \"n\" }}\n            />\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n\nexport default function Command({ launchContext, fallbackText }: LaunchProps<{ launchContext: { query: string } }>) {\n  return <SearchCommand initialSearchText={launchContext?.query ?? fallbackText} />;\n}\n", "/**\n * Given an origin, a destination, and a travel mode, returns a direction url according to the following specs:\n * https://developers.google.com/maps/documentation/urls/get-started\n *\n * @param origin The origin address\n * @param destination The destination address\n * @param transporttype One of four possible transit types\n * @returns A properly URI encoded string according to Google Maps documentation\n */\nexport function makeDirectionsURL(origin: string, destination: string, transporttype: string): string {\n  const mapsBase = \"https://www.google.com/maps/dir/?api=1\";\n  return (\n    mapsBase +\n    \"&origin=\" +\n    encodeURI(origin) +\n    \"&destination=\" +\n    encodeURI(destination) +\n    \"&travelmode=\" +\n    encodeURI(transporttype)\n  );\n}\n\n/**\n * Given a query string, returns search url according to the following specs:\n * https://developers.google.com/maps/documentation/urls/get-started\n *\n * @param query The query address\n * @returns A properly URI encoded string according to Google Maps documentation\n */\nexport function makeSearchURL(query: string): string {\n  const mapsBase = \"https://www.google.com/maps/search/?api=1\";\n  return mapsBase + \"&query=\" + encodeURI(query);\n}\n"],
  "mappings": "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",
  "names": ["find_exports", "__export", "Command", "__toCommonJS", "import_react", "import_api", "makeSearchURL", "query", "import_jsx_runtime", "SearchCommand", "initialSearchText", "saveSearchHistory", "searchText", "setSearchText", "recentSearches", "setRecentSearches", "isLoading", "setIsLoading", "loadRecentSearches", "storedSearches", "timeoutId", "updatedSearches", "s", "handleRemoveSearch", "searchToRemove", "handleClearAllSearches", "sharedProps", "makeSearchURL", "search", "Command", "launchContext", "fallbackText"]
}
