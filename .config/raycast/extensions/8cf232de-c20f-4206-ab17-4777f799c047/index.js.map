{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/storage.tsx"],
  "sourcesContent": ["import { Action, ActionPanel, Color, Grid, Icon, environment, getPreferenceValues } from \"@raycast/api\";\nimport { readFileSync } from \"node:fs\";\nimport React, { useEffect, useState } from \"react\";\nimport { SaveActions, addRecentSymbol, getPinnedSymbols, getRecentSymbols } from \"./storage\";\n\nexport interface Preferences {\n  primaryAction: \"copySymbol\" | \"pasteSymbol\" | \"copyName\" | \"pasteName\";\n  gridColumns: string;\n  showName: boolean;\n  minimumVersionOS: \"iOS\" | \"macOS\" | \"watchOS\" | \"tvOS\" | \"visionOS\" | \"disabled\";\n}\n\nexport type sfsymbol = {\n  name: string;\n  symbol: string;\n  categories: string[];\n  searchTerms: string[];\n  availableFrom: number;\n};\n\nexport type category = {\n  name: string;\n  title: string;\n  symbol: string;\n};\n\nexport type version = {\n  iOS: string;\n  macOS: string;\n  tvOS: string;\n  visionOS: string;\n  watchOS: string;\n};\n\nexport interface SymbolProps {\n  symbol: sfsymbol;\n  refresh: () => void;\n  pinned?: boolean;\n  recent?: boolean;\n}\n\nconst { primaryAction, gridColumns, showName, minimumVersionOS }: Preferences = getPreferenceValues();\n\nfunction getDataPath() {\n  return `${environment.assetsPath}/symbols/data.json`;\n}\n\nfunction getImageURL(name: string) {\n  return `https://raw.githubusercontent.com/ndckj/sf-symbols/main/images/100/${name}.png`;\n}\n\nconst data: {\n  symbols: sfsymbol[];\n  categories: category[];\n  versions: { [key: string]: version };\n} = JSON.parse(readFileSync(getDataPath(), { encoding: \"utf8\" }));\n\nexport default function Command() {\n  const [category, setCategory] = useState<string>();\n  const [pinned, setPinned] = useState<sfsymbol[]>([]);\n  const [recent, setRecent] = useState<sfsymbol[]>([]);\n  const [refreshState, setRefreshState] = useState(false);\n  const refresh = () => setRefreshState(!refreshState);\n\n  useEffect(() => {\n    setPinned(getPinnedSymbols());\n    setRecent(getRecentSymbols());\n  }, [refreshState]);\n\n  const filteredSymbols =\n    category && category !== \"all\" ? data.symbols.filter((s) => s.categories.includes(category)) : data.symbols;\n\n  return (\n    <Grid\n      isLoading={category === undefined}\n      searchBarPlaceholder=\"Search SF Symbols...\"\n      inset={Grid.Inset.Large}\n      columns={Number(gridColumns)}\n      searchBarAccessory={\n        <Grid.Dropdown\n          tooltip=\"Select SF sfsymbol category\"\n          storeValue={true}\n          onChange={(newValue) => setCategory(newValue)}\n        >\n          <Grid.Dropdown.Item\n            value={data.categories[0].name}\n            title=\"All Categories\"\n            icon={{\n              source: getImageURL(data.categories[0].symbol),\n              fallback: Icon.Warning,\n              tintColor: Color.PrimaryText,\n            }}\n          />\n          <Grid.Dropdown.Section>\n            {data.categories.slice(1).map((category, index) => (\n              <Grid.Dropdown.Item\n                key={index}\n                value={category.name}\n                title={category.title}\n                icon={{\n                  source: getImageURL(category.symbol),\n                  tintColor: Color.PrimaryText,\n                }}\n              />\n            ))}\n          </Grid.Dropdown.Section>\n        </Grid.Dropdown>\n      }\n    >\n      {category && (\n        <React.Fragment>\n          <Grid.Section title=\"Pinned\">\n            {pinned\n              .filter((s) => category === \"all\" || s.categories.includes(category))\n              .map((symbol: sfsymbol, index: number) => (\n                <SFSymbol key={index} symbol={symbol} refresh={refresh} pinned />\n              ))}\n          </Grid.Section>\n          <Grid.Section title=\"Recently Used\">\n            {recent\n              .filter((s) => category === \"all\" || s.categories.includes(category))\n              .map((symbol: sfsymbol, index: number) => (\n                <SFSymbol key={index} symbol={symbol} refresh={refresh} recent />\n              ))}\n          </Grid.Section>\n          <Grid.Section title={recent.length + pinned.length > 0 ? \"All Symbols\" : undefined}>\n            {filteredSymbols.map((symbol: sfsymbol, index: number) => (\n              <SFSymbol key={index} symbol={symbol} refresh={refresh} />\n            ))}\n          </Grid.Section>\n        </React.Fragment>\n      )}\n    </Grid>\n  );\n}\n\nconst SFSymbol = (props: SymbolProps) => {\n  const { symbol } = props;\n\n  let subtitle;\n  if (minimumVersionOS != \"disabled\" && symbol.availableFrom) {\n    subtitle = `${minimumVersionOS} ${data.versions[symbol.availableFrom][minimumVersionOS]}`;\n  } else {\n    subtitle = undefined;\n  }\n\n  return (\n    <Grid.Item\n      title={showName ? symbol.name : undefined}\n      subtitle={subtitle}\n      content={{\n        tooltip: symbol.name,\n        value: {\n          source: getImageURL(symbol.name),\n          fallback: Icon.Warning,\n          tintColor: Color.PrimaryText,\n        },\n      }}\n      keywords={symbol.searchTerms.concat([symbol.name])}\n      actions={<SymbolActions {...props} />}\n    />\n  );\n};\n\nconst SymbolActions = (props: SymbolProps): JSX.Element => {\n  const { name, symbol } = props.symbol;\n\n  const actions: { [key: string]: JSX.Element } = {\n    paste: (\n      <Action.Paste\n        key=\"paste\"\n        title=\"Paste Symbol\"\n        content={symbol}\n        shortcut={{ modifiers: [\"shift\", \"opt\"], key: \"v\" }}\n        onPaste={() => {\n          addRecentSymbol(props.symbol);\n          props.refresh();\n        }}\n      />\n    ),\n    copy: (\n      <Action.CopyToClipboard\n        key=\"copy\"\n        title=\"Copy Symbol\"\n        content={symbol}\n        shortcut={{ modifiers: [\"shift\", \"opt\"], key: \"c\" }}\n        onCopy={() => {\n          addRecentSymbol(props.symbol);\n          props.refresh();\n        }}\n      />\n    ),\n    pasteName: (\n      <Action.Paste\n        key=\"pasteName\"\n        title=\"Paste Name\"\n        content={name}\n        shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \"v\" }}\n        onPaste={() => {\n          addRecentSymbol(props.symbol);\n          props.refresh();\n        }}\n      />\n    ),\n    copyName: (\n      <Action.CopyToClipboard\n        key=\"copyName\"\n        title=\"Copy Name\"\n        content={name}\n        shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \"c\" }}\n        onCopy={() => {\n          addRecentSymbol(props.symbol);\n          props.refresh();\n        }}\n      />\n    ),\n  };\n\n  let order: JSX.Element[] = [];\n\n  if (primaryAction == \"pasteSymbol\") {\n    order = [actions[\"paste\"], actions[\"copy\"], actions[\"copyName\"], actions[\"pasteName\"]];\n  } else if (primaryAction == \"copySymbol\") {\n    order = [actions[\"copy\"], actions[\"paste\"], actions[\"copyName\"], actions[\"pasteName\"]];\n  } else if (primaryAction == \"pasteName\") {\n    order = [actions[\"pasteName\"], actions[\"copyName\"], actions[\"paste\"], actions[\"copy\"]];\n  } else if (primaryAction == \"copyName\") {\n    order = [actions[\"copyName\"], actions[\"pasteName\"], actions[\"copy\"], actions[\"paste\"]];\n  }\n\n  return (\n    <ActionPanel title={name}>\n      {...order}\n      <SaveActions {...props} />\n    </ActionPanel>\n  );\n};\n", "import { Action, ActionPanel, Alert, Cache, confirmAlert, Icon } from \"@raycast/api\";\nimport React from \"react\";\nimport { sfsymbol, SymbolProps } from \"./index\";\n\nconst storage = new Cache();\n\nexport const getPinnedSymbols = (): sfsymbol[] => {\n  const data = storage.get(\"pinned\");\n  return data ? JSON.parse(data) : [];\n};\n\nexport const getRecentSymbols = (): sfsymbol[] => {\n  const data = storage.get(\"recent\");\n  return data ? JSON.parse(data).slice(0, 16) : [];\n};\n\nconst addPinnedSymbol = (symbol: sfsymbol) => {\n  removeRecentSymbol(symbol);\n  const pinnedSymbols = getPinnedSymbols();\n  storage.set(\"pinned\", JSON.stringify([symbol, ...pinnedSymbols.filter((s) => s.name !== symbol.name)]));\n};\n\nexport const addRecentSymbol = (symbol: sfsymbol) => {\n  const pinnedSymbols = getPinnedSymbols();\n  if (!pinnedSymbols.find((s) => s.name === symbol.name)) {\n    const recentSymbols = getRecentSymbols();\n    storage.set(\"recent\", JSON.stringify([symbol, ...recentSymbols.filter((s) => s.name !== symbol.name)]));\n  }\n};\n\nconst removePinnedSymbol = (symbol: sfsymbol) => {\n  const pinnedSymbols = getPinnedSymbols();\n  storage.set(\"pinned\", JSON.stringify(pinnedSymbols.filter((s) => s.name !== symbol.name)));\n};\n\nconst removeRecentSymbol = (symbol: sfsymbol) => {\n  const recentSymbols = getRecentSymbols();\n  storage.set(\"recent\", JSON.stringify(recentSymbols.filter((s) => s.name !== symbol.name)));\n};\n\nconst clearRecentSymbols = () => {\n  storage.set(\"recent\", JSON.stringify([]));\n};\n\nexport const SaveActions = (props: SymbolProps): JSX.Element => {\n  return (\n    <ActionPanel.Section>\n      {props.pinned ? (\n        <React.Fragment>\n          <Action\n            title=\"Unpin Symbol\"\n            shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \"p\" }}\n            icon={Icon.PinDisabled}\n            onAction={async () => {\n              removePinnedSymbol(props.symbol);\n              props.refresh();\n            }}\n          />\n        </React.Fragment>\n      ) : (\n        <Action\n          title=\"Pin Symbol\"\n          icon={Icon.Pin}\n          shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \"p\" }}\n          onAction={async () => {\n            addPinnedSymbol(props.symbol);\n            props.refresh();\n          }}\n        />\n      )}\n      {props.recent && (\n        <React.Fragment>\n          <Action\n            title=\"Clear Recently Used Symbols\"\n            icon={Icon.XMarkCircle}\n            shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"r\" }}\n            style={Action.Style.Destructive}\n            onAction={async () => {\n              const confirmed = await confirmAlert({\n                title: \"Clear recently used symbols?\",\n                message: \"This action cannot be undone.\",\n                primaryAction: {\n                  title: \"Clear\",\n                  style: Alert.ActionStyle.Destructive,\n                },\n              });\n\n              if (confirmed) {\n                clearRecentSymbols();\n                props.refresh();\n              }\n            }}\n          />\n        </React.Fragment>\n      )}\n    </ActionPanel.Section>\n  );\n};\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "Command", "__toCommonJS", "import_api", "import_node_fs", "import_react", "import_api", "import_react", "import_jsx_runtime", "storage", "getPinnedSymbols", "data", "getRecentSymbols", "addPinnedSymbol", "symbol", "removeRecentSymbol", "pinnedSymbols", "s", "addRecentSymbol", "recentSymbols", "removePinnedSymbol", "clearRecentSymbols", "SaveActions", "props", "React", "import_jsx_runtime", "primaryAction", "gridColumns", "showName", "minimumVersionOS", "getDataPath", "getImageURL", "name", "data", "Command", "category", "setCategory", "pinned", "setPinned", "recent", "setRecent", "refreshState", "setRefreshState", "refresh", "getPinnedSymbols", "getRecentSymbols", "filteredSymbols", "s", "newValue", "index", "React", "symbol", "SFSymbol", "props", "subtitle", "SymbolActions", "actions", "addRecentSymbol", "order", "SaveActions"]
}
