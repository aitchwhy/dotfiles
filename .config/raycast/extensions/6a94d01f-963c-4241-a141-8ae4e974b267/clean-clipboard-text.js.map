{
  "version": 3,
  "sources": ["../src/clean-clipboard-text.ts", "../src/utils/remove-tracking-params.ts", "../src/utils/rules.ts", "../src/utils/url-utils.ts", "../src/utils/try-catch.ts"],
  "sourcesContent": ["import { Clipboard, showHUD } from \"@raycast/api\";\nimport removeTrackingParams from \"./utils/remove-tracking-params\";\nimport { tryCatch } from \"./utils/try-catch\";\n\nexport default async function Command() {\n  // get raw text from clipboard\n  const { data: rawText, error } = await tryCatch(Clipboard.readText());\n  // if clipboard is empty, exit\n  if (error || !rawText) {\n    await showHUD(\"Failed to get clipboard text\");\n    return;\n  }\n\n  await removeTrackingParams(rawText);\n}\n", "import { Clipboard, getFrontmostApplication, showHUD, showToast, Toast } from \"@raycast/api\";\nimport { rules } from \"./rules\";\nimport { findURLs, removeQueryParams, replaceURLs } from \"./url-utils\";\n\nexport default async function removeTrackingParams(rawText: string) {\n  // detect urls in text\n  const urls = findURLs(rawText);\n  // if no url found, exit\n  if (urls.length === 0) {\n    await showHUD(\"No URL found\");\n    return;\n  }\n  console.log(\"raw urls\", urls);\n\n  // generate new urls without tracking parameters\n  const newURLs = [];\n  for (const url of urls) {\n    // find allow params in rules\n    const allowParams = rules.find((rule) => url.includes(rule.url))?.allowParams || [];\n    console.log(\"allow params\", allowParams);\n    // remove query params\n    const newURL = removeQueryParams(url, allowParams);\n    newURLs.push(newURL);\n  }\n  console.log(\"new urls\", newURLs);\n\n  // replace urls with new urls in text\n  const newText = replaceURLs(rawText, newURLs);\n  console.log(\"new text\", newText);\n\n  // finishing touches\n  await Clipboard.copy(newText);\n  const frontmostApp = await getFrontmostApplication();\n\n  await showToast({\n    title: \"Tracking parameters removed\",\n    message: newText,\n    style: Toast.Style.Success,\n    primaryAction: {\n      title: `Paste Cleaned URL to ${frontmostApp.name}`,\n      onAction: async () => {\n        await Clipboard.paste(newText);\n      },\n    },\n  });\n}\n", "interface Rule {\n  name: string;\n  url: string;\n  allowParams: string[];\n}\n\nconst rules: Rule[] = [\n  {\n    name: \"Google Search\",\n    url: \"google.com\",\n    allowParams: [\"q\", \"ie\"],\n  },\n  {\n    name: \"Baidu Search\",\n    url: \"baidu.com\",\n    allowParams: [\"wd\", \"ie\"],\n  },\n  {\n    name: \"Bing Search\",\n    url: \"bing.com\",\n    allowParams: [\"q\"],\n  },\n  {\n    name: \"Netease Music\",\n    url: \"music.163.com\",\n    allowParams: [\"id\"],\n  },\n  {\n    name: \"Youtube\",\n    url: \"youtube.com\",\n    allowParams: [\"v\", \"search_query\"],\n  },\n  {\n    name: \"Instagram Reel\",\n    url: \"instagram.com/reel\",\n    allowParams: [],\n  },\n];\n\nexport { rules };\n", "// detect all urls in text\nfunction findURLs(text: string): string[] {\n  const regex = /(https?:\\/\\/[^\\s]+)/g;\n  const matches = text.match(regex);\n  return matches ?? [];\n}\n\n// replace all urls in text\nfunction replaceURLs(text: string, newURLs: string[]): string {\n  const urls = findURLs(text);\n  for (const url of urls) {\n    text = text.replace(url, newURLs.shift() || url);\n  }\n  return text;\n}\n\n// remove some query params from url\nfunction removeQueryParams(url: string, allowParams: string[]): string {\n  // find all query params\n  const urlParts = url.split(\"?\");\n  if (urlParts.length < 2) {\n    return url;\n  }\n  const query = urlParts[1].split(\"&\");\n\n  // if params is not empty, match params to remove\n  if (allowParams.length > 0) {\n    const newQuery = query.filter((param) => allowParams.includes(param.split(\"=\")[0]));\n    return `${urlParts[0]}?${newQuery.join(\"&\")}`;\n  }\n  // if params is empty, remove all query params\n  return urlParts[0];\n}\n\nexport { findURLs, removeQueryParams, replaceURLs };\n", "// Types for the result object with discriminated union\ntype Success<T> = {\n  data: T;\n  error: null;\n};\n\ntype Failure<E> = {\n  data: null;\n  error: E;\n};\n\ntype Result<T, E = Error> = Success<T> | Failure<E>;\n\n// Main wrapper function\nasync function tryCatch<T, E = Error>(promise: Promise<T>): Promise<Result<T, E>> {\n  try {\n    const data = await promise;\n    return { data, error: null };\n  } catch (error) {\n    return { data: null, error: error as E };\n  }\n}\n\nexport { tryCatch };\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAmC,wBCAnC,IAAAC,EAA8E,wBCM9E,IAAMC,EAAgB,CACpB,CACE,KAAM,gBACN,IAAK,aACL,YAAa,CAAC,IAAK,IAAI,CACzB,EACA,CACE,KAAM,eACN,IAAK,YACL,YAAa,CAAC,KAAM,IAAI,CAC1B,EACA,CACE,KAAM,cACN,IAAK,WACL,YAAa,CAAC,GAAG,CACnB,EACA,CACE,KAAM,gBACN,IAAK,gBACL,YAAa,CAAC,IAAI,CACpB,EACA,CACE,KAAM,UACN,IAAK,cACL,YAAa,CAAC,IAAK,cAAc,CACnC,EACA,CACE,KAAM,iBACN,IAAK,qBACL,YAAa,CAAC,CAChB,CACF,ECpCA,SAASC,EAASC,EAAwB,CACxC,IAAMC,EAAQ,uBAEd,OADgBD,EAAK,MAAMC,CAAK,GACd,CAAC,CACrB,CAGA,SAASC,EAAYF,EAAcG,EAA2B,CAC5D,IAAMC,EAAOL,EAASC,CAAI,EAC1B,QAAWK,KAAOD,EAChBJ,EAAOA,EAAK,QAAQK,EAAKF,EAAQ,MAAM,GAAKE,CAAG,EAEjD,OAAOL,CACT,CAGA,SAASM,EAAkBD,EAAaE,EAA+B,CAErE,IAAMC,EAAWH,EAAI,MAAM,GAAG,EAC9B,GAAIG,EAAS,OAAS,EACpB,OAAOH,EAET,IAAMI,EAAQD,EAAS,CAAC,EAAE,MAAM,GAAG,EAGnC,GAAID,EAAY,OAAS,EAAG,CAC1B,IAAMG,EAAWD,EAAM,OAAQE,GAAUJ,EAAY,SAASI,EAAM,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,EAClF,MAAO,GAAGH,EAAS,CAAC,CAAC,IAAIE,EAAS,KAAK,GAAG,CAAC,EAC7C,CAEA,OAAOF,EAAS,CAAC,CACnB,CF5BA,eAAOI,EAA4CC,EAAiB,CAElE,IAAMC,EAAOC,EAASF,CAAO,EAE7B,GAAIC,EAAK,SAAW,EAAG,CACrB,QAAM,WAAQ,cAAc,EAC5B,MACF,CACA,QAAQ,IAAI,WAAYA,CAAI,EAG5B,IAAME,EAAU,CAAC,EACjB,QAAWC,KAAOH,EAAM,CAEtB,IAAMI,EAAcC,EAAM,KAAMC,GAASH,EAAI,SAASG,EAAK,GAAG,CAAC,GAAG,aAAe,CAAC,EAClF,QAAQ,IAAI,eAAgBF,CAAW,EAEvC,IAAMG,EAASC,EAAkBL,EAAKC,CAAW,EACjDF,EAAQ,KAAKK,CAAM,CACrB,CACA,QAAQ,IAAI,WAAYL,CAAO,EAG/B,IAAMO,EAAUC,EAAYX,EAASG,CAAO,EAC5C,QAAQ,IAAI,WAAYO,CAAO,EAG/B,MAAM,YAAU,KAAKA,CAAO,EAC5B,IAAME,EAAe,QAAM,2BAAwB,EAEnD,QAAM,aAAU,CACd,MAAO,8BACP,QAASF,EACT,MAAO,QAAM,MAAM,QACnB,cAAe,CACb,MAAO,wBAAwBE,EAAa,IAAI,GAChD,SAAU,SAAY,CACpB,MAAM,YAAU,MAAMF,CAAO,CAC/B,CACF,CACF,CAAC,CACH,CG/BA,eAAeG,EAAuBC,EAA4C,CAChF,GAAI,CAEF,MAAO,CAAE,KADI,MAAMA,EACJ,MAAO,IAAK,CAC7B,OAASC,EAAO,CACd,MAAO,CAAE,KAAM,KAAM,MAAOA,CAAW,CACzC,CACF,CJjBA,eAAOC,GAAiC,CAEtC,GAAM,CAAE,KAAMC,EAAS,MAAAC,CAAM,EAAI,MAAMC,EAAS,YAAU,SAAS,CAAC,EAEpE,GAAID,GAAS,CAACD,EAAS,CACrB,QAAM,WAAQ,8BAA8B,EAC5C,MACF,CAEA,MAAMG,EAAqBH,CAAO,CACpC",
  "names": ["clean_clipboard_text_exports", "__export", "Command", "__toCommonJS", "import_api", "import_api", "rules", "findURLs", "text", "regex", "replaceURLs", "newURLs", "urls", "url", "removeQueryParams", "allowParams", "urlParts", "query", "newQuery", "param", "removeTrackingParams", "rawText", "urls", "findURLs", "newURLs", "url", "allowParams", "rules", "rule", "newURL", "removeQueryParams", "newText", "replaceURLs", "frontmostApp", "tryCatch", "promise", "error", "Command", "rawText", "error", "tryCatch", "removeTrackingParams"]
}
