"use strict";var p=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var P=Object.prototype.hasOwnProperty;var h=(e,t)=>{for(var n in t)p(e,n,{get:t[n],enumerable:!0})},y=(e,t,n,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of v(t))!P.call(e,i)&&i!==n&&p(e,i,{get:()=>t[i],enumerable:!(o=N(t,i))||o.enumerable});return e};var I=e=>y(p({},"__esModule",{value:!0}),e);var E={};h(E,{default:()=>b});module.exports=I(E);var S=require("@raycast/api");var f=require("@raycast/api"),d=require("node:child_process");var r=class extends Error{},a=class extends Error{},l=class extends Error{},c=class extends Error{},g=class extends Error{};function x(e=!0){let t=T(`status --json --peers=${e}`),n=JSON.parse(t);if(!n||!n.Self.Online)throw new l;return n}function m(e){let t=[],n=e.Self,o={self:!0,key:n.ID,name:n.DNSName.split(".")[0],userid:n.UserID.toString(),dns:n.DNSName,ipv4:n.TailscaleIPs[0],ipv6:n.TailscaleIPs[1],os:n.OS,online:n.Online,lastseen:new Date(n.LastSeen),exitnode:n.ExitNode,exitnodeoption:n.ExitNodeOption,tags:n.Tags};t.push(o);for(let[,i]of Object.entries(e.Peer)){let u={self:!1,key:i.ID,name:i.DNSName.split(".")[0],userid:i.UserID.toString(),dns:i.DNSName,ipv4:i.TailscaleIPs[0],ipv6:i.TailscaleIPs[1],os:i.OS=="linux"?"Linux":i.OS,online:i.Online,lastseen:new Date(i.LastSeen),exitnode:i.ExitNode,exitnodeoption:i.ExitNodeOption,tags:i.Tags};t.push(u)}return t}var s=(0,f.getPreferenceValues)(),R=s.tailscalePath&&s.tailscalePath.length>0?s.tailscalePath:"/Applications/Tailscale.app/Contents/MacOS/Tailscale",w=s.tailscaleExecMaxBuffersMB&&s.tailscaleExecMaxBuffersMB?s.tailscaleExecMaxBuffersMB*1024*1024:10*1024*1024;function T(e){try{return(0,d.execSync)(`${R} ${e}`,{maxBuffer:w}).toString().trim()}catch(t){if(t instanceof Error){if(t.message.includes("No such file or directory"))throw new r;if(t.message.includes("is Tailscale running?"))throw new a;if(t.message.includes("spawnSync /bin/sh ENOBUFS"))throw new c;if(t.message.includes('The value of "options.maxBuffer" is out of range. It must be a positive number. Received NaN'))throw new g}throw console.log(`throwing error: ${t}`),t}}function D(e,t){return e instanceof r?{title:"Can\u2019t find the Tailscale CLI",description:`Your Tailscale CLI Path is invalid.
Update your extension preferences to fix this.`}:e instanceof a?{title:"Can\u2019t connect to Tailscale",description:"Make sure Tailscale is running and try again."}:e instanceof l?{title:"Not connected to a tailnet",description:`Tailscale is running, but you\u2019re not connected to a tailnet.
Log in and try again.`}:e instanceof c?{title:"Response larger than buffer size",description:"Increase `Max buffers ...` in the extension configuration."}:e instanceof g?{title:"Invalid `Max buffers ...` configuration",description:"Set `Max buffers ...` to a number in the extension configuration."}:(console.log(`Unhandled error: ${e}`),{title:"Something went wrong",description:t})}async function b(){let e;try{let t=x(),n=t.MagicDNSSuffix,i=m(t).find(u=>u.exitnode);e=`\u2705 Connected on ${n}`,i&&(e+=` via ${i.name}`)}catch(t){e="\u274C "+D(t,"").title}await(0,S.updateCommandMetadata)({subtitle:e})}
