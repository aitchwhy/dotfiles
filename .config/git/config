
# core vars
[core]
  filemode = false
  editor = nvim
  pager = "bat --paging=never"
  excludesfile = ./ignore
  # Use custom commit message template
  committemplate = ./message
  # Use husky hooks
  hooksPath = .husky

# ===== User Information =====
[user]
  name = Hank
  email = hank.lee.qed@gmail.com
  username = aitchwhy

# ===== Basic UI Settings =====
[color]
  ui = true

[init]
  defaultBranch = main


[interactive]
  diffFilter = delta --color-only

[delta]
  navigate = true
  dark = true
  line-numbers = true
  side-by-side = true

[push]
	default = current
	followTags = true
	recurseSubmodules = check

[safe]
	directory = *

[branch]
  autoSetupRebase = always
  sort = -committerdate

# ===== Authentication & Signing =====
[credential]
  helper = osxkeychain

[credential "https://github.com"]
	helper =
	helper = !/opt/homebrew/bin/gh auth git-credential

[credential "https://gist.github.com"]
	helper =
	helper = !/opt/homebrew/bin/gh auth git-credential

[gpg "ssh"]
  program = ssh-keygen
  allowedSignersFile = $XDG_CONFIG_HOME/ssh/allowed_signers

# ===== URL Handling =====
[url "git@github.com:"]
  insteadOf = https://github.com/
[diff "ignore-timestamp"]
	textconv = "sed '/#   timestamp:/d'"
[diff]
  tool = Kaleidoscope
[difftool]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
	prompt = false
	trustExitCode = true

# ===== Commit Message & Workflow Settings =====
[commit]
  # Use the template
  template = ~/.config/git/message
  # Show diff when editing commit message
  verbose = true
  # Sign all commits by default
  gpgsign = false

[alias]
  # Commitizen for interactive conventional commits
  cz = "!f() { npx --no-install commitizen; }; f"
  czf = "!f() { npx --no-install -- commitizen; }; f"

  # Conventional Commits helpers (legacy)
  feat = "!f() { git commit -m \"feat${1:+($1)}: $2\"; }; f"
  fix = "!f() { git commit -m \"fix${1:+($1)}: $2\"; }; f"
  docs = "!f() { git commit -m \"docs${1:+($1)}: $2\"; }; f"
  style = "!f() { git commit -m \"style${1:+($1)}: $2\"; }; f"
  refactor = "!f() { git commit -m \"refactor${1:+($1)}: $2\"; }; f"
  perf = "!f() { git commit -m \"perf${1:+($1)}: $2\"; }; f"
  test = "!f() { git commit -m \"test${1:+($1)}: $2\"; }; f"
  chore = "!f() { git commit -m \"chore${1:+($1)}: $2\"; }; f"
  wip = "!f() { git commit -m \"wip${1:+($1)}: $2\"; }; f"
  deps = "!f() { git commit -m \"deps${1:+($1)}: $2\"; }; f"

  # Fuzzy commit selection with enhanced filtering and preview
  fc = "!f() { git status --short | fzf --multi --preview 'git diff --color {2}' | cut -c4- | tr '\\n' ' ' | xargs -r git add && npx --no-install commitizen; }; f"

  # Fuzzy add and commit
  fa = "!f() { git status --short | fzf --multi --preview 'git diff --color {2}' | cut -c4- | tr '\\n' ' ' | xargs -r git add; }; f"

  # AI-assisted commit message generation
  ai-commit = "!f() { just ai commit-msg; }; f"

  # Check if commit message follows conventional format using commitlint
  check = "!f() { npx --no-install commitlint --edit \"$1\"; }; f"

  # Standard workflow shortcuts
  s = status
  co = checkout
  br = branch
  ci = commit
  ca = commit --amend
  cp = cherry-pick
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

# ===== Git Hooks Settings =====
[hooks "commit-msg"]
  checkConventional = true

# ===== Pull/Merge Settings =====
[pull]
  rebase = true

[merge]
	tool = Kaleidoscope

[rebase]
  autosquash = true
  autostash = true

# ===== Diff & Tool Settings =====
[diff]
  colorMoved = default
  algorithm = histogram

[difftool]
  prompt = false

[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[mergetool]
  prompt = false
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true

# ===== AI Assistant Integration =====
[ai]
  enabled = true
  provider = claude
  commit-message = true
