# .envrc ──────────────────────────────────────────────────────────────────
#
# Works with: direnv ≥ 2.35, Nix ≥ 2.22 (flakes enabled)
# Tested on: macOS 14 (M-series), zsh 5.9+, Zellij 0.40+, Cursor IDE v0.47,
#            Neovim 0.10 nightly
# ─────────────────────────────────────────────────────────────────────────

# Source Nix-specific direnv helpers
# source_env "$XDG_CONFIG_HOME/direnv/nix.direnvrc"

# # 1. Recreate the dev shell from the project's flake.
# if [ -f flake.nix ]; then
#   watch_file flake.nix
#   watch_file flake.lock
#   use_flake .
# fi
#
# # 2. Local utility bins that shouldn't leak outside the project.
# PATH_add ./scripts
# PATH_add ./node_modules/.bin
#
# # 3. Project-specific variables (example: override editor & cache dir).
# export EDITOR="nvim"
# export XDG_CACHE_HOME="$PWD/.cache"
#
# # 4. Neovim tweaks that load only inside this repo.
# #export NVIM_APPNAME="nv-$(${PWD##*/})"    # keeps configs isolated per-project
#
# # 5. Git metadata you don't want in global ~/.gitconfig.
# # if has git; then
# #   export GIT_AUTHOR_NAME="Hank Lee"
# #   export GIT_AUTHOR_EMAIL="hank.lee.qed@gmail.com"
# # fi
#
# # 6. Zellij helpers — keep panes in the same env even when spawned directly.
# #    nvim launched in a pane will inherit this env if you use `direnv exec`.
# if [[ -n "$ZELLIJ" ]]; then               # inside a Zellij session
#   export DIRENV_LOG_FORMAT=""
# fi
#
# # 7. Cursor IDE / VS Code – ensure integrated terminal and tasks load the env.
# export DIRENV_DIR="$PWD"                  # picked up when Cursor is launched from CLI
#
# # 8. Safety – refuse to load if a second direnv is shadow-hooking this shell.
# #    Prevents the classic "_direnv_hook(): command not found" race.
# # source_env_if_exists ".envrc.local"
#
# # ───────────────────────────── end ───────────────────────────────────────
# EOF < /dev/null

layout_uv() {
    if [[ -d ".venv" ]]; then
        VIRTUAL_ENV="$(pwd)/.venv"
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`uv venv\` to create one."
        uv venv
        VIRTUAL_ENV="$(pwd)/.venv"
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export UV_ACTIVE=1  # or VENV_ACTIVE=1
    export VIRTUAL_ENV
}
